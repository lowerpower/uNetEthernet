
eth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001aa  00800100  00004994  00004a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004994  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000880  008002aa  008002aa  00004bd2  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  00004bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  00004f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00004fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e74  00000000  00000000  000051fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006dbf  00000000  00000000  00006071  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001eed  00000000  00000000  0000ce30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004a58  00000000  00000000  0000ed1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000990  00000000  00000000  00013778  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000101d  00000000  00000000  00014108  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002e24  00000000  00000000  00015125  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_8>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <__vector_14>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__vector_16>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_18>
      4c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      50:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__vector_20>
      54:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      58:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      5c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      60:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      64:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      68:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      6c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      70:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      74:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      78:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      7c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      80:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      84:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      88:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>

0000008c <STime>:
      8c:	03 07 0b 17 2f 5f bf 00                             ..../_..

00000094 <BTime>:
      94:	03 05 09 14 29 52 70 00                             ....)Rp.

0000009c <strOK>:
      9c:	4f 4b 00                                            OK.

0000009f <strCONNECT>:
      9f:	43 4f 4e 4e 45 43 54 00                             CONNECT.

000000a7 <strERROR>:
      a7:	45 52 52 4f 52 00                                   ERROR.

000000ad <strLINKDown>:
      ad:	46 41 49 4c 20 4c 49 4e 4b 00                       FAIL LINK.

000000b7 <strDHCPFail>:
      b7:	46 41 49 4c 20 44 48 43 50 00                       FAIL DHCP.

000000c1 <strTCPFail>:
      c1:	46 41 49 4c 20 54 43 50 00                          FAIL TCP.

000000ca <strSOCDown>:
      ca:	53 4f 43 4b 45 54 20 43 4c 4f 53 45 44 00           SOCKET CLOSED.

000000d8 <strDNSFail>:
      d8:	46 41 49 4c 20 44 4e 53 00                          FAIL DNS.

000000e1 <strFAIL>:
      e1:	46 41 49 4c 00                                      FAIL.

000000e6 <strNoData>:
      e6:	4e 4f 20 44 41 54 41 00                             NO DATA.

000000ee <strEERROR>:
      ee:	45 52 52 4f 52 20 2d 20 44 45 46 41 55 4c 54 53     ERROR - DEFAULTS
      fe:	20 4c 4f 41 44 45 44 00                              LOADED.

00000106 <strVersion>:
     106:	30 2e 36 63 00 00                                   0.6c..

0000010c <__ctors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf ef       	ldi	r28, 0xFF	; 255
     112:	d0 e1       	ldi	r29, 0x10	; 16
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
     118:	12 e0       	ldi	r17, 0x02	; 2
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b1 e0       	ldi	r27, 0x01	; 1
     11e:	e4 e9       	ldi	r30, 0x94	; 148
     120:	f9 e4       	ldi	r31, 0x49	; 73
     122:	02 c0       	rjmp	.+4      	; 0x128 <.do_copy_data_start>

00000124 <.do_copy_data_loop>:
     124:	05 90       	lpm	r0, Z+
     126:	0d 92       	st	X+, r0

00000128 <.do_copy_data_start>:
     128:	aa 3a       	cpi	r26, 0xAA	; 170
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <.do_copy_data_loop>

0000012e <__do_clear_bss>:
     12e:	1b e0       	ldi	r17, 0x0B	; 11
     130:	aa ea       	ldi	r26, 0xAA	; 170
     132:	b2 e0       	ldi	r27, 0x02	; 2
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	aa 32       	cpi	r26, 0x2A	; 42
     13a:	b1 07       	cpc	r27, r17
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <main>
     142:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <enc28j60ReadOp>:
}
*/

u08 enc28j60ReadOp(u08 op, u08 address)
{
     14a:	ab 98       	cbi	0x15, 3	; 21
	u08 data;
   
	// assert CS
	ENC28J60_CONTROL_PORT &= ~(1<<ENC28J60_CONTROL_CS);
	
	// issue read command
	SPDR = op | (address & ADDR_MASK);
     14c:	96 2f       	mov	r25, r22
     14e:	9f 71       	andi	r25, 0x1F	; 31
     150:	98 2b       	or	r25, r24
     152:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR & (1<<SPIF)));
     154:	77 9b       	sbis	0x0e, 7	; 14
     156:	fe cf       	rjmp	.-4      	; 0x154 <enc28j60ReadOp+0xa>
	// read data
	SPDR = 0x00;
     158:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)));
     15a:	77 9b       	sbis	0x0e, 7	; 14
     15c:	fe cf       	rjmp	.-4      	; 0x15a <enc28j60ReadOp+0x10>
	// do dummy read if needed
	if(address & 0x80)
     15e:	67 ff       	sbrs	r22, 7
     160:	03 c0       	rjmp	.+6      	; 0x168 <enc28j60ReadOp+0x1e>
	{
		SPDR = 0x00;
     162:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));
     164:	77 9b       	sbis	0x0e, 7	; 14
     166:	fe cf       	rjmp	.-4      	; 0x164 <enc28j60ReadOp+0x1a>
		//while( !(inb(SPSR) & (1<<SPIF) ) );
	}
	data = SPDR;
     168:	8f b1       	in	r24, 0x0f	; 15
	
	// release CS
	ENC28J60_CONTROL_PORT |= (1<<ENC28J60_CONTROL_CS);
     16a:	ab 9a       	sbi	0x15, 3	; 21

	return data;
}
     16c:	99 27       	eor	r25, r25
     16e:	08 95       	ret

00000170 <enc28j60WriteOp>:

void enc28j60WriteOp(u08 op, u08 address, u08 data)
{
     170:	ab 98       	cbi	0x15, 3	; 21
	// assert CS
	ENC28J60_CONTROL_PORT &= ~(1<<ENC28J60_CONTROL_CS);

	// issue write command
	SPDR = op | (address & ADDR_MASK);
     172:	6f 71       	andi	r22, 0x1F	; 31
     174:	68 2b       	or	r22, r24
     176:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
     178:	77 9b       	sbis	0x0e, 7	; 14
     17a:	fe cf       	rjmp	.-4      	; 0x178 <enc28j60WriteOp+0x8>
	// write data
	SPDR = data;
     17c:	4f b9       	out	0x0f, r20	; 15
	while(!(SPSR & (1<<SPIF)));
     17e:	77 9b       	sbis	0x0e, 7	; 14
     180:	fe cf       	rjmp	.-4      	; 0x17e <enc28j60WriteOp+0xe>

	// release CS
	ENC28J60_CONTROL_PORT |= (1<<ENC28J60_CONTROL_CS);
     182:	ab 9a       	sbi	0x15, 3	; 21
     184:	08 95       	ret

00000186 <enc28j60ReadBuffer>:
}

void enc28j60ReadBuffer(u16 len, u08* data)
{
     186:	9c 01       	movw	r18, r24
     188:	fb 01       	movw	r30, r22
	// assert CS
	ENC28J60_CONTROL_PORT &= ~(1<<ENC28J60_CONTROL_CS);
     18a:	ab 98       	cbi	0x15, 3	; 21
	
	// issue read command
	SPDR = ENC28J60_READ_BUF_MEM;
     18c:	8a e3       	ldi	r24, 0x3A	; 58
     18e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     190:	77 99       	sbic	0x0e, 7	; 14
     192:	06 c0       	rjmp	.+12     	; 0x1a0 <enc28j60ReadBuffer+0x1a>
     194:	fd cf       	rjmp	.-6      	; 0x190 <enc28j60ReadBuffer+0xa>
	while(len--)
	{
		// read data
		SPDR = 0x00;
     196:	1f b8       	out	0x0f, r1	; 15
		while(!(SPSR & (1<<SPIF)));
     198:	77 9b       	sbis	0x0e, 7	; 14
     19a:	fe cf       	rjmp	.-4      	; 0x198 <enc28j60ReadBuffer+0x12>
		*data++ = SPDR;
     19c:	8f b1       	in	r24, 0x0f	; 15
     19e:	81 93       	st	Z+, r24
     1a0:	21 50       	subi	r18, 0x01	; 1
     1a2:	30 40       	sbci	r19, 0x00	; 0
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	2f 3f       	cpi	r18, 0xFF	; 255
     1a8:	38 07       	cpc	r19, r24
     1aa:	a9 f7       	brne	.-22     	; 0x196 <enc28j60ReadBuffer+0x10>
	}	
	// release CS
	ENC28J60_CONTROL_PORT |= (1<<ENC28J60_CONTROL_CS);
     1ac:	ab 9a       	sbi	0x15, 3	; 21
     1ae:	08 95       	ret

000001b0 <enc28j60WriteBuffer>:
}

void enc28j60WriteBuffer(u16 len, u08* data)
{
     1b0:	9c 01       	movw	r18, r24
     1b2:	fb 01       	movw	r30, r22
	// assert CS
	ENC28J60_CONTROL_PORT &= ~(1<<ENC28J60_CONTROL_CS);
     1b4:	ab 98       	cbi	0x15, 3	; 21
	
	// issue write command
	SPDR = ENC28J60_WRITE_BUF_MEM;
     1b6:	8a e7       	ldi	r24, 0x7A	; 122
     1b8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     1ba:	77 99       	sbic	0x0e, 7	; 14
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <enc28j60WriteBuffer+0x1a>
     1be:	fd cf       	rjmp	.-6      	; 0x1ba <enc28j60WriteBuffer+0xa>
	while(len--)
	{
		// write data
		SPDR = *data++;
     1c0:	80 81       	ld	r24, Z
     1c2:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
     1c4:	77 9b       	sbis	0x0e, 7	; 14
     1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <enc28j60WriteBuffer+0x14>
     1c8:	31 96       	adiw	r30, 0x01	; 1
     1ca:	21 50       	subi	r18, 0x01	; 1
     1cc:	30 40       	sbci	r19, 0x00	; 0
     1ce:	8f ef       	ldi	r24, 0xFF	; 255
     1d0:	2f 3f       	cpi	r18, 0xFF	; 255
     1d2:	38 07       	cpc	r19, r24
     1d4:	a9 f7       	brne	.-22     	; 0x1c0 <enc28j60WriteBuffer+0x10>
	}	
	// release CS
	ENC28J60_CONTROL_PORT |= (1<<ENC28J60_CONTROL_CS);
     1d6:	ab 9a       	sbi	0x15, 3	; 21
     1d8:	08 95       	ret

000001da <enc28j60SetBank>:
}

void enc28j60SetBank(u08 address)
{
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	18 2f       	mov	r17, r24
	// set the bank (if needed)
	if((address & BANK_MASK) != Enc28j60Bank)
     1e2:	c8 2f       	mov	r28, r24
     1e4:	dd 27       	eor	r29, r29
     1e6:	c0 76       	andi	r28, 0x60	; 96
     1e8:	d0 70       	andi	r29, 0x00	; 0
     1ea:	80 91 e4 02 	lds	r24, 0x02E4
     1ee:	99 27       	eor	r25, r25
     1f0:	c8 17       	cp	r28, r24
     1f2:	d9 07       	cpc	r29, r25
     1f4:	91 f0       	breq	.+36     	; 0x21a <enc28j60SetBank+0x40>
	{
		// set the bank
		enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
     1f6:	43 e0       	ldi	r20, 0x03	; 3
     1f8:	6f e1       	ldi	r22, 0x1F	; 31
     1fa:	80 ea       	ldi	r24, 0xA0	; 160
     1fc:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
		enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     200:	85 e0       	ldi	r24, 0x05	; 5
     202:	d5 95       	asr	r29
     204:	c7 95       	ror	r28
     206:	8a 95       	dec	r24
     208:	e1 f7       	brne	.-8      	; 0x202 <enc28j60SetBank+0x28>
     20a:	4c 2f       	mov	r20, r28
     20c:	6f e1       	ldi	r22, 0x1F	; 31
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
		Enc28j60Bank = (address & BANK_MASK);
     214:	10 76       	andi	r17, 0x60	; 96
     216:	10 93 e4 02 	sts	0x02E4, r17
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	08 95       	ret

00000222 <enc28j60Read>:
	}
}

u08 enc28j60Read(u08 address)
{
     222:	1f 93       	push	r17
     224:	18 2f       	mov	r17, r24
	// set the bank
	enc28j60SetBank(address);
     226:	0e 94 ed 00 	call	0x1da	; 0x1da <enc28j60SetBank>
	// do the read
	return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     22a:	61 2f       	mov	r22, r17
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 a5 00 	call	0x14a	; 0x14a <enc28j60ReadOp>
}
     232:	99 27       	eor	r25, r25
     234:	1f 91       	pop	r17
     236:	08 95       	ret

00000238 <nicGetMacAddress>:
     238:	ef 92       	push	r14
     23a:	ff 92       	push	r15
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	7c 01       	movw	r14, r24
     242:	84 ee       	ldi	r24, 0xE4	; 228
     244:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     248:	f7 01       	movw	r30, r14
     24a:	81 93       	st	Z+, r24
     24c:	8f 01       	movw	r16, r30
     24e:	85 ee       	ldi	r24, 0xE5	; 229
     250:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     254:	f7 01       	movw	r30, r14
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	78 01       	movw	r14, r16
     25a:	08 94       	sec
     25c:	e1 1c       	adc	r14, r1
     25e:	f1 1c       	adc	r15, r1
     260:	82 ee       	ldi	r24, 0xE2	; 226
     262:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     266:	f8 01       	movw	r30, r16
     268:	81 83       	std	Z+1, r24	; 0x01
     26a:	87 01       	movw	r16, r14
     26c:	0f 5f       	subi	r16, 0xFF	; 255
     26e:	1f 4f       	sbci	r17, 0xFF	; 255
     270:	83 ee       	ldi	r24, 0xE3	; 227
     272:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     276:	f7 01       	movw	r30, r14
     278:	81 83       	std	Z+1, r24	; 0x01
     27a:	80 ee       	ldi	r24, 0xE0	; 224
     27c:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     280:	f8 01       	movw	r30, r16
     282:	81 83       	std	Z+1, r24	; 0x01
     284:	81 ee       	ldi	r24, 0xE1	; 225
     286:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     28a:	0f 5f       	subi	r16, 0xFF	; 255
     28c:	1f 4f       	sbci	r17, 0xFF	; 255
     28e:	f8 01       	movw	r30, r16
     290:	81 83       	std	Z+1, r24	; 0x01
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	08 95       	ret

0000029c <enc28j60Write>:

void enc28j60Write(u08 address, u08 data)
{
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	08 2f       	mov	r16, r24
     2a2:	16 2f       	mov	r17, r22
	// set the bank
	enc28j60SetBank(address);
     2a4:	0e 94 ed 00 	call	0x1da	; 0x1da <enc28j60SetBank>
	// do the write
	enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
     2a8:	41 2f       	mov	r20, r17
     2aa:	60 2f       	mov	r22, r16
     2ac:	80 e4       	ldi	r24, 0x40	; 64
     2ae:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	08 95       	ret

000002b8 <nicSetMacAddress>:
     2b8:	cf 92       	push	r12
     2ba:	df 92       	push	r13
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	8c 01       	movw	r16, r24
     2c6:	6c 01       	movw	r12, r24
     2c8:	08 94       	sec
     2ca:	c1 1c       	adc	r12, r1
     2cc:	d1 1c       	adc	r13, r1
     2ce:	fc 01       	movw	r30, r24
     2d0:	60 81       	ld	r22, Z
     2d2:	84 ee       	ldi	r24, 0xE4	; 228
     2d4:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     2d8:	76 01       	movw	r14, r12
     2da:	08 94       	sec
     2dc:	e1 1c       	adc	r14, r1
     2de:	f1 1c       	adc	r15, r1
     2e0:	f8 01       	movw	r30, r16
     2e2:	61 81       	ldd	r22, Z+1	; 0x01
     2e4:	85 ee       	ldi	r24, 0xE5	; 229
     2e6:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     2ea:	87 01       	movw	r16, r14
     2ec:	0f 5f       	subi	r16, 0xFF	; 255
     2ee:	1f 4f       	sbci	r17, 0xFF	; 255
     2f0:	f6 01       	movw	r30, r12
     2f2:	61 81       	ldd	r22, Z+1	; 0x01
     2f4:	82 ee       	ldi	r24, 0xE2	; 226
     2f6:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     2fa:	f7 01       	movw	r30, r14
     2fc:	61 81       	ldd	r22, Z+1	; 0x01
     2fe:	83 ee       	ldi	r24, 0xE3	; 227
     300:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     304:	f8 01       	movw	r30, r16
     306:	61 81       	ldd	r22, Z+1	; 0x01
     308:	80 ee       	ldi	r24, 0xE0	; 224
     30a:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     30e:	0f 5f       	subi	r16, 0xFF	; 255
     310:	1f 4f       	sbci	r17, 0xFF	; 255
     312:	f8 01       	movw	r30, r16
     314:	61 81       	ldd	r22, Z+1	; 0x01
     316:	81 ee       	ldi	r24, 0xE1	; 225
     318:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	08 95       	ret

0000032a <enc28j60PhyRead>:
}

u16 enc28j60PhyRead(u08 address)
{
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
	u16 data;

	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     32e:	68 2f       	mov	r22, r24
     330:	84 ed       	ldi	r24, 0xD4	; 212
     332:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	82 ed       	ldi	r24, 0xD2	; 210
     33a:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     33e:	8a ee       	ldi	r24, 0xEA	; 234
     340:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     344:	80 fd       	sbrc	r24, 0
     346:	fb cf       	rjmp	.-10     	; 0x33e <enc28j60PhyRead+0x14>

	// quit reading
	enc28j60Write(MICMD, 0x00);
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	82 ed       	ldi	r24, 0xD2	; 210
     34c:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	
	// get data value
	data  = enc28j60Read(MIRDL);
     350:	88 ed       	ldi	r24, 0xD8	; 216
     352:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     356:	08 2f       	mov	r16, r24
     358:	11 27       	eor	r17, r17
	data |= enc28j60Read(MIRDH);
     35a:	89 ed       	ldi	r24, 0xD9	; 217
     35c:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     360:	99 27       	eor	r25, r25
	// return the data
	return data;
}
     362:	80 2b       	or	r24, r16
     364:	91 2b       	or	r25, r17
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret

0000036c <nicIsLinked>:
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 95 01 	call	0x32a	; 0x32a <enc28j60PhyRead>
     372:	84 70       	andi	r24, 0x04	; 4
     374:	90 70       	andi	r25, 0x00	; 0
     376:	96 95       	lsr	r25
     378:	87 95       	ror	r24
     37a:	96 95       	lsr	r25
     37c:	87 95       	ror	r24
     37e:	08 95       	ret

00000380 <enc28j60PhyWrite>:

void enc28j60PhyWrite(u08 address, u16 data)
{
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	8b 01       	movw	r16, r22
	// set the PHY register address
	enc28j60Write(MIREGADR, address);
     386:	68 2f       	mov	r22, r24
     388:	84 ed       	ldi	r24, 0xD4	; 212
     38a:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	
	// write the PHY data
	enc28j60Write(MIWRL, data);	
     38e:	60 2f       	mov	r22, r16
     390:	86 ed       	ldi	r24, 0xD6	; 214
     392:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	enc28j60Write(MIWRH, data>>8);
     396:	01 2f       	mov	r16, r17
     398:	11 27       	eor	r17, r17
     39a:	60 2f       	mov	r22, r16
     39c:	87 ed       	ldi	r24, 0xD7	; 215
     39e:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>

	// wait until the PHY write completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     3a2:	8a ee       	ldi	r24, 0xEA	; 234
     3a4:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     3a8:	80 fd       	sbrc	r24, 0
     3aa:	fb cf       	rjmp	.-10     	; 0x3a2 <enc28j60PhyWrite+0x22>
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <enc28j60PacketSend>:
}

S8 enc28j60Init()
{
	int i;
	
	// initialize I/O
	sbi(ENC28J60_CONTROL_DDR, ENC28J60_CONTROL_CS);
	sbi(ENC28J60_CONTROL_PORT, ENC28J60_CONTROL_CS);

	// setup SPI I/O pins
	sbi(PORTB, 1);	// set SCK hi
	sbi(DDRB, 1);	// set SCK as output
	cbi(DDRB, 3);	// set MISO as input
	sbi(DDRB, 2);	// set MOSI as output
	//sbi(DDRB, 0);	// SS must be output for Master mode to work
	// initialize SPI interface
	// master mode
	sbi(SPCR, MSTR);
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
	// Data order MSB first
	cbi(SPCR,DORD);
	// switch to f/4 2X = f/2 bitrate
	cbi(SPCR, SPR0);
	cbi(SPCR, SPR1);
	sbi(SPSR, SPI2X);
	// enable SPI
	sbi(SPCR, SPE);

	//
	// Wait for ENC28j60 to become ready
	//
	i=0;
	while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY))
	{
		if(enc28j60Read(ESTAT) & ESTAT_CLKRDY)
			break;
		i++;
		delay_us(10);
		if(i>10)
			return(-1);
#ifdef DEBUG_LV1
		DEBUG1(".");printByte(enc28j60Read(ESTAT));DEBUG1(CRLF);
#endif
	}

	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
	// check CLKRDY bit to see if reset is complete
	delay_us(80);

	
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	NextPacketPtr = RXSTART_INIT;
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
	// set receive buffer end
	// ERXND defaults to 0x1FFF (end of ram)
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
	// set transmit buffer start
	// ETXST defaults to 0x0000 (beginnging of ram)
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);

	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
	// enable automatic padding and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
//	enc28j60Write(MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
	enc28j60Write(MAIPGH, 0x0C);
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
	// Set the maximum packet size which the controller will accept
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);

	// do bank 3 stuff
	// write MAC address
	// NOTE: MAC address in ENC28J60 is byte-backward
	enc28j60Write(MAADR5, ENC28J60_MAC0);
	enc28j60Write(MAADR4, ENC28J60_MAC1);
	enc28j60Write(MAADR3, ENC28J60_MAC2);
	enc28j60Write(MAADR2, ENC28J60_MAC3);
	enc28j60Write(MAADR1, ENC28J60_MAC4);
	enc28j60Write(MAADR0, ENC28J60_MAC5);

	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);

	// switch to bank 0
	enc28j60SetBank(ECON1);
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
	//
	// Setup LEDs 0000 1 010 1 010 00 10
	enc28j60PhyWrite(PHLCON, 0x01C2);
/*
	enc28j60PhyWrite(PHLCON, 0x0AA2);

	// setup duplex ----------------------

	// Disable receive logic and abort any packets currently being transmitted
	enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS|ECON1_RXEN);
	
	{
		u16 temp;
		// Set the PHY to the proper duplex mode
		temp = enc28j60PhyRead(PHCON1);
		temp &= ~PHCON1_PDPXMD;
		enc28j60PhyWrite(PHCON1, temp);
		// Set the MAC to the proper duplex mode
		temp = enc28j60Read(MACON3);
		temp &= ~MACON3_FULDPX;
		enc28j60Write(MACON3, temp);
	}

	// Set the back-to-back inter-packet gap time to IEEE specified 
	// requirements.  The meaning of the MABBIPG value changes with the duplex
	// state, so it must be updated in this function.
	// In full duplex, 0x15 represents 9.6us; 0x12 is 9.6us in half duplex
	//enc28j60Write(MABBIPG, DuplexState ? 0x15 : 0x12);	
	
	// Reenable receive logic
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);

	// setup duplex ----------------------
*/
	return(0);
}

void enc28j60PacketSend(unsigned int len, unsigned char* packet)
{
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	8c 01       	movw	r16, r24
     3bc:	7b 01       	movw	r14, r22

	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     3c6:	6a e1       	ldi	r22, 0x1A	; 26
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len));
     3ce:	60 2f       	mov	r22, r16
     3d0:	86 e0       	ldi	r24, 0x06	; 6
     3d2:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     3d6:	00 50       	subi	r16, 0x00	; 0
     3d8:	16 4e       	sbci	r17, 0xE6	; 230
     3da:	61 2f       	mov	r22, r17
     3dc:	77 27       	eor	r23, r23
     3de:	00 50       	subi	r16, 0x00	; 0
     3e0:	1a 41       	sbci	r17, 0x1A	; 26
     3e2:	87 e0       	ldi	r24, 0x07	; 7
     3e4:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>

	// write per-packet control byte
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	8a e7       	ldi	r24, 0x7A	; 122
     3ee:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>

	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
     3f2:	b7 01       	movw	r22, r14
     3f4:	c8 01       	movw	r24, r16
     3f6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60WriteBuffer>
	
	// Reset tx engine (erratta #12) (workaround #12) 
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     3fa:	40 e8       	ldi	r20, 0x80	; 128
     3fc:	6f e1       	ldi	r22, 0x1F	; 31
     3fe:	80 e8       	ldi	r24, 0x80	; 128
     400:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
	enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     404:	40 e8       	ldi	r20, 0x80	; 128
     406:	6f e1       	ldi	r22, 0x1F	; 31
     408:	80 ea       	ldi	r24, 0xA0	; 160
     40a:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
	enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF);		// workaround #10 clear interrupt
     40e:	42 e0       	ldi	r20, 0x02	; 2
     410:	6c e1       	ldi	r22, 0x1C	; 28
     412:	80 ea       	ldi	r24, 0xA0	; 160
     414:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
		
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     418:	48 e0       	ldi	r20, 0x08	; 8
     41a:	6f e1       	ldi	r22, 0x1F	; 31
     41c:	80 e8       	ldi	r24, 0x80	; 128
     41e:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	08 95       	ret

0000042c <nicSend>:
     42c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <enc28j60PacketSend>
     430:	08 95       	ret

00000432 <enc28j60PacketSendMulti>:
}


void enc28j60PacketSendMulti(U8 *header, U16 hlen, U8 *data, U16 dlen)
{
     432:	cf 92       	push	r12
     434:	df 92       	push	r13
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	7c 01       	movw	r14, r24
     444:	eb 01       	movw	r28, r22
     446:	6a 01       	movw	r12, r20
     448:	89 01       	movw	r16, r18

	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT);
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     452:	6a e1       	ldi	r22, 0x1A	; 26
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+(hlen+dlen)));
     45a:	ce 01       	movw	r24, r28
     45c:	80 0f       	add	r24, r16
     45e:	68 2f       	mov	r22, r24
     460:	86 e0       	ldi	r24, 0x06	; 6
     462:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+(hlen+dlen))>>8);
     466:	be 01       	movw	r22, r28
     468:	60 50       	subi	r22, 0x00	; 0
     46a:	76 4e       	sbci	r23, 0xE6	; 230
     46c:	60 0f       	add	r22, r16
     46e:	71 1f       	adc	r23, r17
     470:	67 2f       	mov	r22, r23
     472:	77 27       	eor	r23, r23
     474:	87 e0       	ldi	r24, 0x07	; 7
     476:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>

	// write per-packet control byte
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	8a e7       	ldi	r24, 0x7A	; 122
     480:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>

	// copy the packet into the transmit buffer
	if(hlen)
     484:	20 97       	sbiw	r28, 0x00	; 0
     486:	21 f0       	breq	.+8      	; 0x490 <enc28j60PacketSendMulti+0x5e>
		enc28j60WriteBuffer(hlen, header);
     488:	b7 01       	movw	r22, r14
     48a:	ce 01       	movw	r24, r28
     48c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60WriteBuffer>
	// copy the packet into the transmit buffer
	if(dlen)
     490:	01 15       	cp	r16, r1
     492:	11 05       	cpc	r17, r1
     494:	21 f0       	breq	.+8      	; 0x49e <enc28j60PacketSendMulti+0x6c>
		enc28j60WriteBuffer(dlen, data);
     496:	b6 01       	movw	r22, r12
     498:	c8 01       	movw	r24, r16
     49a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <enc28j60WriteBuffer>

	// Reset transmit logic if a TX Error has previously occured
	// This is a silicon errata #12 workaround
	//if(enc28j60Read(EIR) & EIR_TXERIF)
	//{
	//	enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF);
		enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     49e:	40 e8       	ldi	r20, 0x80	; 128
     4a0:	6f e1       	ldi	r22, 0x1F	; 31
     4a2:	80 e8       	ldi	r24, 0x80	; 128
     4a4:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
		enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     4a8:	40 e8       	ldi	r20, 0x80	; 128
     4aa:	6f e1       	ldi	r22, 0x1F	; 31
     4ac:	80 ea       	ldi	r24, 0xA0	; 160
     4ae:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
		enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, EIR, EIR_TXERIF);		// workaround #10 clear interrupt
     4b2:	42 e0       	ldi	r20, 0x02	; 2
     4b4:	6c e1       	ldi	r22, 0x1C	; 28
     4b6:	80 ea       	ldi	r24, 0xA0	; 160
     4b8:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
	//}
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     4bc:	48 e0       	ldi	r20, 0x08	; 8
     4be:	6f e1       	ldi	r22, 0x1F	; 31
     4c0:	80 e8       	ldi	r24, 0x80	; 128
     4c2:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	df 90       	pop	r13
     4d4:	cf 90       	pop	r12
     4d6:	08 95       	ret

000004d8 <nicSendMulti>:
     4d8:	0e 94 19 02 	call	0x432	; 0x432 <enc28j60PacketSendMulti>
     4dc:	08 95       	ret

000004de <enc28j60PacketReceive>:
}




unsigned int enc28j60PacketReceive(unsigned int maxlen, unsigned char* packet)
{
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	6c 01       	movw	r12, r24
     4f0:	7b 01       	movw	r14, r22
	u16 rxstat;
	u16 len,rs,re;

	// check if a packet has been received and buffered
	if( !(enc28j60Read(EIR) & EIR_PKTIF) )
     4f2:	8c e1       	ldi	r24, 0x1C	; 28
     4f4:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     4f8:	86 fd       	sbrc	r24, 6
     4fa:	03 c0       	rjmp	.+6      	; 0x502 <enc28j60PacketReceive+0x24>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	86 c0       	rjmp	.+268    	; 0x60e <enc28j60PacketReceive+0x130>
		return 0;
	
	// Make absolutely certain that any previous packet was discarded	
	//if( WasDiscarded == FALSE)
	//	MACDiscardRx();

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (NextPacketPtr));
     502:	60 91 e2 02 	lds	r22, 0x02E2
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
     50c:	60 91 e2 02 	lds	r22, 0x02E2
     510:	70 91 e3 02 	lds	r23, 0x02E3
     514:	67 2f       	mov	r22, r23
     516:	77 27       	eor	r23, r23
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	8a e3       	ldi	r24, 0x3A	; 58
     522:	0e 94 a5 00 	call	0x14a	; 0x14a <enc28j60ReadOp>
     526:	08 2f       	mov	r16, r24
     528:	11 27       	eor	r17, r17
     52a:	10 93 e3 02 	sts	0x02E3, r17
     52e:	00 93 e2 02 	sts	0x02E2, r16
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	8a e3       	ldi	r24, 0x3A	; 58
     536:	0e 94 a5 00 	call	0x14a	; 0x14a <enc28j60ReadOp>
     53a:	99 27       	eor	r25, r25
     53c:	98 2f       	mov	r25, r24
     53e:	88 27       	eor	r24, r24
     540:	08 2b       	or	r16, r24
     542:	19 2b       	or	r17, r25
     544:	10 93 e3 02 	sts	0x02E3, r17
     548:	00 93 e2 02 	sts	0x02E2, r16
	// read the packet length
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	8a e3       	ldi	r24, 0x3A	; 58
     550:	0e 94 a5 00 	call	0x14a	; 0x14a <enc28j60ReadOp>
     554:	c8 2f       	mov	r28, r24
     556:	dd 27       	eor	r29, r29
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	8a e3       	ldi	r24, 0x3A	; 58
     55c:	0e 94 a5 00 	call	0x14a	; 0x14a <enc28j60ReadOp>
     560:	99 27       	eor	r25, r25
     562:	98 2f       	mov	r25, r24
     564:	88 27       	eor	r24, r24
     566:	c8 2b       	or	r28, r24
     568:	d9 2b       	or	r29, r25
	// read the receive status
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     56a:	60 e0       	ldi	r22, 0x00	; 0
     56c:	8a e3       	ldi	r24, 0x3A	; 58
     56e:	0e 94 a5 00 	call	0x14a	; 0x14a <enc28j60ReadOp>
	rxstat |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	8a e3       	ldi	r24, 0x3A	; 58
     576:	0e 94 a5 00 	call	0x14a	; 0x14a <enc28j60ReadOp>
     57a:	cc 15       	cp	r28, r12
     57c:	dd 05       	cpc	r29, r13
     57e:	08 f4       	brcc	.+2      	; 0x582 <enc28j60PacketReceive+0xa4>
     580:	6e 01       	movw	r12, r28

	// limit retrieve length
	// (we reduce the MAC-reported length by 4 to remove the CRC)
	if(len>maxlen)
		len=maxlen;

	// copy the packet from the receive buffer
	enc28j60ReadBuffer(len, packet);
     582:	b7 01       	movw	r22, r14
     584:	c6 01       	movw	r24, r12
     586:	0e 94 c3 00 	call	0x186	; 0x186 <enc28j60ReadBuffer>

	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out  (Workaround code #11)
        rs = enc28j60Read(ERXSTH);
     58a:	89 e0       	ldi	r24, 0x09	; 9
     58c:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     590:	08 2f       	mov	r16, r24
     592:	11 27       	eor	r17, r17
        rs <<= 8;
     594:	10 2f       	mov	r17, r16
     596:	00 27       	eor	r16, r16
        rs |= enc28j60Read(ERXSTL);
     598:	88 e0       	ldi	r24, 0x08	; 8
     59a:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     59e:	e8 2e       	mov	r14, r24
        re = enc28j60Read(ERXNDH);
     5a0:	8b e0       	ldi	r24, 0x0B	; 11
     5a2:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     5a6:	99 27       	eor	r25, r25
        re <<= 8;
     5a8:	d8 2f       	mov	r29, r24
     5aa:	cc 27       	eor	r28, r28
        re |= enc28j60Read(ERXNDL);
     5ac:	8a e0       	ldi	r24, 0x0A	; 10
     5ae:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     5b2:	99 27       	eor	r25, r25
     5b4:	c8 2b       	or	r28, r24
     5b6:	d9 2b       	or	r29, r25
        if ( ((NextPacketPtr - 1) < rs) || ((NextPacketPtr - 1) > re) )
     5b8:	60 91 e2 02 	lds	r22, 0x02E2
     5bc:	70 91 e3 02 	lds	r23, 0x02E3
     5c0:	cb 01       	movw	r24, r22
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	ff 24       	eor	r15, r15
     5c6:	0e 29       	or	r16, r14
     5c8:	1f 29       	or	r17, r15
     5ca:	80 17       	cp	r24, r16
     5cc:	91 07       	cpc	r25, r17
     5ce:	18 f0       	brcs	.+6      	; 0x5d6 <enc28j60PacketReceive+0xf8>
     5d0:	c8 17       	cp	r28, r24
     5d2:	d9 07       	cpc	r29, r25
     5d4:	38 f4       	brcc	.+14     	; 0x5e4 <enc28j60PacketReceive+0x106>
        {
            enc28j60Write(ERXRDPTL, (re));
     5d6:	6c 2f       	mov	r22, r28
     5d8:	8c e0       	ldi	r24, 0x0C	; 12
     5da:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
            enc28j60Write(ERXRDPTH, (re)>>8);
     5de:	6d 2f       	mov	r22, r29
     5e0:	77 27       	eor	r23, r23
     5e2:	0c c0       	rjmp	.+24     	; 0x5fc <enc28j60PacketReceive+0x11e>
        }
        else
        {
            enc28j60Write(ERXRDPTL, (NextPacketPtr-1));
     5e4:	61 50       	subi	r22, 0x01	; 1
     5e6:	8c e0       	ldi	r24, 0x0C	; 12
     5e8:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
            enc28j60Write(ERXRDPTH, (NextPacketPtr-1)>>8);
     5ec:	60 91 e2 02 	lds	r22, 0x02E2
     5f0:	70 91 e3 02 	lds	r23, 0x02E3
     5f4:	61 50       	subi	r22, 0x01	; 1
     5f6:	70 40       	sbci	r23, 0x00	; 0
     5f8:	67 2f       	mov	r22, r23
     5fa:	77 27       	eor	r23, r23
     5fc:	8d e0       	ldi	r24, 0x0D	; 13
     5fe:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
        }
	/* old code
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
*/
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     602:	40 e4       	ldi	r20, 0x40	; 64
     604:	6e e1       	ldi	r22, 0x1E	; 30
     606:	80 e8       	ldi	r24, 0x80	; 128
     608:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
     60c:	c6 01       	movw	r24, r12
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	df 90       	pop	r13
     61c:	cf 90       	pop	r12
     61e:	08 95       	ret

00000620 <nicPoll>:
     620:	0e 94 6f 02 	call	0x4de	; 0x4de <enc28j60PacketReceive>
     624:	08 95       	ret

00000626 <enc28j60ReceiveOverflowRecover>:

	return len;
}

void enc28j60ReceiveOverflowRecover(void)
{
     626:	08 95       	ret

00000628 <enc28j60RegDump>:
	// receive buffer overflow handling procedure

	// recovery completed
}

void enc28j60RegDump(void)
{		
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
	CONSOLE_puts("RevID: 0x");
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
	printByte(enc28j60Read(EREVID));
     638:	82 e7       	ldi	r24, 0x72	; 114
     63a:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     63e:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
	CONSOLE_puts(CRLF);
     642:	4a e0       	ldi	r20, 0x0A	; 10
     644:	e4 2e       	mov	r14, r20
     646:	41 e0       	ldi	r20, 0x01	; 1
     648:	f4 2e       	mov	r15, r20
     64a:	c7 01       	movw	r24, r14
     64c:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>

	CONSOLE_puts("Cntrl: ECON1 ECON2 ESTAT  EIR  EIE\r\n");
     650:	8d e0       	ldi	r24, 0x0D	; 13
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
	CONSOLE_puts("         ");
     658:	82 e3       	ldi	r24, 0x32	; 50
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
	printByte(enc28j60Read(ECON1));
     660:	8f e1       	ldi	r24, 0x1F	; 31
     662:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     666:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
	CONSOLE_puts("    ");
     66a:	0c e3       	ldi	r16, 0x3C	; 60
     66c:	11 e0       	ldi	r17, 0x01	; 1
     66e:	c8 01       	movw	r24, r16
     670:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
	printByte(enc28j60Read(ECON2));
     674:	8e e1       	ldi	r24, 0x1E	; 30
     676:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     67a:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
	CONSOLE_puts("    ");
     67e:	c8 01       	movw	r24, r16
     680:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
	printByte(enc28j60Read(ESTAT));
     684:	8d e1       	ldi	r24, 0x1D	; 29
     686:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     68a:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
	CONSOLE_puts("    ");
     68e:	c8 01       	movw	r24, r16
     690:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
	printByte(enc28j60Read(EIR));
     694:	8c e1       	ldi	r24, 0x1C	; 28
     696:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     69a:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
	CONSOLE_puts("   ");
     69e:	81 e4       	ldi	r24, 0x41	; 65
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
	printByte(enc28j60Read(EIE));
     6a6:	8b e1       	ldi	r24, 0x1B	; 27
     6a8:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     6ac:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
	CONSOLE_puts(CRLF);
     6b0:	c7 01       	movw	r24, r14
     6b2:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	08 95       	ret

000006c0 <nicRegDump>:
     6c0:	0e 94 14 03 	call	0x628	; 0x628 <enc28j60RegDump>
     6c4:	08 95       	ret

000006c6 <enc28j60Init>:
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	a3 9a       	sbi	0x14, 3	; 20
     6cc:	ab 9a       	sbi	0x15, 3	; 21
     6ce:	c1 9a       	sbi	0x18, 1	; 24
     6d0:	b9 9a       	sbi	0x17, 1	; 23
     6d2:	bb 98       	cbi	0x17, 3	; 23
     6d4:	ba 9a       	sbi	0x17, 2	; 23
     6d6:	6c 9a       	sbi	0x0d, 4	; 13
     6d8:	6b 98       	cbi	0x0d, 3	; 13
     6da:	6d 98       	cbi	0x0d, 5	; 13
     6dc:	68 98       	cbi	0x0d, 0	; 13
     6de:	69 98       	cbi	0x0d, 1	; 13
     6e0:	70 9a       	sbi	0x0e, 0	; 14
     6e2:	6e 9a       	sbi	0x0d, 6	; 13
     6e4:	c0 e0       	ldi	r28, 0x00	; 0
     6e6:	d0 e0       	ldi	r29, 0x00	; 0
     6e8:	10 c0       	rjmp	.+32     	; 0x70a <enc28j60Init+0x44>
     6ea:	8d e1       	ldi	r24, 0x1D	; 29
     6ec:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     6f0:	80 fd       	sbrc	r24, 0
     6f2:	10 c0       	rjmp	.+32     	; 0x714 <enc28j60Init+0x4e>
     6f4:	21 96       	adiw	r28, 0x01	; 1
     6f6:	8a e0       	ldi	r24, 0x0A	; 10
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 ef 08 	call	0x11de	; 0x11de <delay_us>
     6fe:	cb 30       	cpi	r28, 0x0B	; 11
     700:	d1 05       	cpc	r29, r1
     702:	19 f4       	brne	.+6      	; 0x70a <enc28j60Init+0x44>
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	9f ef       	ldi	r25, 0xFF	; 255
     708:	84 c0       	rjmp	.+264    	; 0x812 <enc28j60Init+0x14c>
     70a:	8d e1       	ldi	r24, 0x1D	; 29
     70c:	0e 94 11 01 	call	0x222	; 0x222 <enc28j60Read>
     710:	80 ff       	sbrs	r24, 0
     712:	eb cf       	rjmp	.-42     	; 0x6ea <enc28j60Init+0x24>
     714:	4f ef       	ldi	r20, 0xFF	; 255
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	8f ef       	ldi	r24, 0xFF	; 255
     71a:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
     71e:	80 e5       	ldi	r24, 0x50	; 80
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 ef 08 	call	0x11de	; 0x11de <delay_us>
     726:	10 92 e3 02 	sts	0x02E3, r1
     72a:	10 92 e2 02 	sts	0x02E2, r1
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	88 e0       	ldi	r24, 0x08	; 8
     732:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	89 e0       	ldi	r24, 0x09	; 9
     73a:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	8c e0       	ldi	r24, 0x0C	; 12
     742:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	8d e0       	ldi	r24, 0x0D	; 13
     74a:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     74e:	6f ef       	ldi	r22, 0xFF	; 255
     750:	8a e0       	ldi	r24, 0x0A	; 10
     752:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     756:	69 e1       	ldi	r22, 0x19	; 25
     758:	8b e0       	ldi	r24, 0x0B	; 11
     75a:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	84 e0       	ldi	r24, 0x04	; 4
     762:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     766:	6a e1       	ldi	r22, 0x1A	; 26
     768:	85 e0       	ldi	r24, 0x05	; 5
     76a:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     76e:	6d e0       	ldi	r22, 0x0D	; 13
     770:	80 ec       	ldi	r24, 0xC0	; 192
     772:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	81 ec       	ldi	r24, 0xC1	; 193
     77a:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     77e:	42 e3       	ldi	r20, 0x32	; 50
     780:	62 ec       	ldi	r22, 0xC2	; 194
     782:	80 e8       	ldi	r24, 0x80	; 128
     784:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
     788:	62 e1       	ldi	r22, 0x12	; 18
     78a:	86 ec       	ldi	r24, 0xC6	; 198
     78c:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     790:	6c e0       	ldi	r22, 0x0C	; 12
     792:	87 ec       	ldi	r24, 0xC7	; 199
     794:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     798:	62 e1       	ldi	r22, 0x12	; 18
     79a:	84 ec       	ldi	r24, 0xC4	; 196
     79c:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     7a0:	6e ee       	ldi	r22, 0xEE	; 238
     7a2:	8a ec       	ldi	r24, 0xCA	; 202
     7a4:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     7a8:	65 e0       	ldi	r22, 0x05	; 5
     7aa:	8b ec       	ldi	r24, 0xCB	; 203
     7ac:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	84 ee       	ldi	r24, 0xE4	; 228
     7b4:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	85 ee       	ldi	r24, 0xE5	; 229
     7bc:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     7c0:	64 e1       	ldi	r22, 0x14	; 20
     7c2:	82 ee       	ldi	r24, 0xE2	; 226
     7c4:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     7c8:	65 e7       	ldi	r22, 0x75	; 117
     7ca:	83 ee       	ldi	r24, 0xE3	; 227
     7cc:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     7d0:	6e e4       	ldi	r22, 0x4E	; 78
     7d2:	80 ee       	ldi	r24, 0xE0	; 224
     7d4:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     7d8:	65 e6       	ldi	r22, 0x65	; 101
     7da:	81 ee       	ldi	r24, 0xE1	; 225
     7dc:	0e 94 4e 01 	call	0x29c	; 0x29c <enc28j60Write>
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	71 e0       	ldi	r23, 0x01	; 1
     7e4:	80 e1       	ldi	r24, 0x10	; 16
     7e6:	0e 94 c0 01 	call	0x380	; 0x380 <enc28j60PhyWrite>
     7ea:	8f e1       	ldi	r24, 0x1F	; 31
     7ec:	0e 94 ed 00 	call	0x1da	; 0x1da <enc28j60SetBank>
     7f0:	40 ec       	ldi	r20, 0xC0	; 192
     7f2:	6b e1       	ldi	r22, 0x1B	; 27
     7f4:	80 e8       	ldi	r24, 0x80	; 128
     7f6:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
     7fa:	44 e0       	ldi	r20, 0x04	; 4
     7fc:	6f e1       	ldi	r22, 0x1F	; 31
     7fe:	80 e8       	ldi	r24, 0x80	; 128
     800:	0e 94 b8 00 	call	0x170	; 0x170 <enc28j60WriteOp>
     804:	62 ec       	ldi	r22, 0xC2	; 194
     806:	71 e0       	ldi	r23, 0x01	; 1
     808:	84 e1       	ldi	r24, 0x14	; 20
     80a:	0e 94 c0 01 	call	0x380	; 0x380 <enc28j60PhyWrite>
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <nicInit>:
     818:	0e 94 63 03 	call	0x6c6	; 0x6c6 <enc28j60Init>
     81c:	99 27       	eor	r25, r25
     81e:	87 fd       	sbrc	r24, 7
     820:	90 95       	com	r25
     822:	08 95       	ret

00000824 <bytecopy>:


U8 *
bytecopy(U8 *dest,U8 *source, U16 length)
{
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	9c 01       	movw	r18, r24
	U16 i=0;

	if((dest) && (source))
     82a:	00 97       	sbiw	r24, 0x00	; 0
     82c:	81 f0       	breq	.+32     	; 0x84e <bytecopy+0x2a>
     82e:	61 15       	cp	r22, r1
     830:	71 05       	cpc	r23, r1
     832:	69 f0       	breq	.+26     	; 0x84e <bytecopy+0x2a>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ec 01       	movw	r28, r24
     83a:	db 01       	movw	r26, r22
     83c:	03 c0       	rjmp	.+6      	; 0x844 <bytecopy+0x20>
	{
		while(i<length)
		{
			dest[i]=source[i];
     83e:	8d 91       	ld	r24, X+
     840:	89 93       	st	Y+, r24
			i++;
     842:	31 96       	adiw	r30, 0x01	; 1
     844:	e4 17       	cp	r30, r20
     846:	f5 07       	cpc	r31, r21
     848:	d1 f7       	brne	.-12     	; 0x83e <bytecopy+0x1a>
		}
	}
	else
		return(dest);

	return(&dest[i]);
     84a:	24 0f       	add	r18, r20
     84c:	35 1f       	adc	r19, r21
}
     84e:	c9 01       	movw	r24, r18
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <setup_hw>:

void
setup_hw(void)
{
     856:	1a ba       	out	0x1a, r1	; 26
#ifdef __AVR__
	DDRA=PORTADIR;						// outp(PORTADIR,DDRA);
	DDRB=PORTBDIR;						// outp(PORTBDIR,DDRB);
     858:	89 ef       	ldi	r24, 0xF9	; 249
     85a:	87 bb       	out	0x17, r24	; 23
	DDRC=PORTCDIR;						// outp(PORTCDIR,DDRC);
     85c:	8d e0       	ldi	r24, 0x0D	; 13
     85e:	84 bb       	out	0x14, r24	; 20
	DDRD=PORTDDIR;						// outp(PORTDDIR,DDRD); 
     860:	11 ba       	out	0x11, r1	; 17
	DDRE=PORTEDIR;						// outp(PORTEDIR,DDRE);
     862:	8e e1       	ldi	r24, 0x1E	; 30
     864:	82 b9       	out	0x02, r24	; 2
	DDRG=PORTGDIR;						// outp(PORTGDIR,DDRG);
     866:	88 e0       	ldi	r24, 0x08	; 8
     868:	80 93 64 00 	sts	0x0064, r24

	// weak pullups on some inputs
	//outp(~PORTADIR,PORTA);  not used
	PORTB=~PORTBDIR;					// outp(~PORTBDIR,PORTB);
     86c:	86 e0       	ldi	r24, 0x06	; 6
     86e:	88 bb       	out	0x18, r24	; 24
	PORTC=~PORTCDIR;
     870:	82 ef       	ldi	r24, 0xF2	; 242
     872:	85 bb       	out	0x15, r24	; 21
	PORTD=~PORTDDIR;
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	82 bb       	out	0x12, r24	; 18
	PORTE=~PORTEDIR;
     878:	81 ee       	ldi	r24, 0xE1	; 225
     87a:	83 b9       	out	0x03, r24	; 3
	PORTG=~PORTGDIR;
     87c:	87 ef       	ldi	r24, 0xF7	; 247
     87e:	80 93 65 00 	sts	0x0065, r24
     882:	08 95       	ret

00000884 <boot_addr>:
     884:	85 e4       	ldi	r24, 0x45	; 69
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     88c:	80 91 14 02 	lds	r24, 0x0214
     890:	90 91 15 02 	lds	r25, 0x0215
     894:	0e 94 3b 07 	call	0xe76	; 0xe76 <printWord>
     898:	8b e5       	ldi	r24, 0x5B	; 91
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     8a0:	08 95       	ret

000008a2 <nic_intialize>:
	//outp(~PORTCDIR,PORTC);
	//outp(~PORTDDIR,PORTD);
	//outp(~PORTEDIR,PORTE);
	//outp(~PORTGDIR,PORTG);
	
#endif
}


//
// Poll_serial() - This should be in a different file, this should be platform specific
//
// Get a char from the modem port and process it.  This function is re-entrent and
// is internally protected by a semiphor.
//
U8	poll_semi=0;
void
poll_serial()
{
	U16			plen,i;
	MEMBLOCK	*memblock;
	U8			*packet;	
	U8			mac[6];

	if(poll_semi)
		return;

	poll_semi=1;

	nicGetMacAddress(mac);

	packet=rx_pkt;
	//for(i=0;i<128;i++)packet[i]=0xfe;
	
	// On receive we use our own buffer and process packets until there are no more.
	plen=1;
	while(plen)
	{
		plen= nicPoll(MAX_RX_PACKET, packet);
		if(plen)
		{
			// Filter for our MAC or broadcast
			if( ((0xff==packet[0]) && (0xff==packet[1]) && (0xff==packet[2]) &&
				(0xff==packet[3]) && (0xff==packet[4]) && (0xff==packet[5])) ||
				(0==memcmp(packet,mac,6) ))
			{
				// Demux
				// Parse packet, either ARP or IP
				if(0x08==packet[12])
				{
					if(0x00==packet[13])
					{
						// IP
						DEBUG2("IP Packet"CRLF);
						ip_upcall(&packet[14], plen-14);
					}
					else if(0x06==packet[13])
					{
						// ARP
						DEBUG2("ARP Packet");
						arpHandler(packet, plen);
					}
				}
			}
		}
	}
	poll_semi=0;
}

#ifdef WIRELESS
wireless()
{
	// setup SPI I/O pins
	sbi(PORTB, 1);	// set SCK hi
	sbi(DDRB, 1);	// set SCK as output
	cbi(DDRB, 3);	// set MISO as input
	sbi(DDRB, 2);	// set MOSI as output
	sbi(DDRB, 0);	// SS must be output for Master mode to work
	// initialize SPI interface
	// master mode
	sbi(SPCR, MSTR);

spi_readFromSlaveReg(HOST_S2M_MAIL_BOX_REG2, &parser_stat );

#if 0
	// select clock phase positive-going in middle of data
	cbi(SPCR, CPOL);
	// Data order MSB first
	cbi(SPCR,DORD);
	// switch to f/4 2X = f/2 bitrate
	cbi(SPCR, SPR0);
	cbi(SPCR, SPR1);
	sbi(SPSR, SPI2X);
	// enable SPI
	sbi(SPCR, SPE);
#endif
}

#endif


U16
nic_intialize()
{
     8a2:	aa 98       	cbi	0x15, 2	; 21
	//
	// Reset ETH controller for good mesure
	//
	ERST_ON();
	TIMER_Wait_Tick(200);
     8a4:	88 ec       	ldi	r24, 0xC8	; 200
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
	ERST_OFF();
     8ac:	aa 9a       	sbi	0x15, 2	; 21
	TIMER_Wait_Tick(50);
     8ae:	82 e3       	ldi	r24, 0x32	; 50
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
	//
	// Initialize NIC
	//
	DEBUG1("Nic Init"CRLF);
#ifdef __AVR__
	WDTCR=0x0d;							// 0x    0000 1101			enbable watch dog timeour .5 seconds
     8b6:	8d e0       	ldi	r24, 0x0D	; 13
     8b8:	81 bd       	out	0x21, r24	; 33
     8ba:	08 c0       	rjmp	.+16     	; 0x8cc <nic_intialize+0x2a>
#endif	
	while(-1==nicInit())
	{
		CONSOLE_puts("NIC initialization failure.");
     8bc:	8e e5       	ldi	r24, 0x5E	; 94
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
		TIMER_Wait_Tick(100);
     8c4:	84 e6       	ldi	r24, 0x64	; 100
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
     8cc:	0e 94 0c 04 	call	0x818	; 0x818 <nicInit>
     8d0:	8f 3f       	cpi	r24, 0xFF	; 255
     8d2:	a1 f3       	breq	.-24     	; 0x8bc <nic_intialize+0x1a>
	}

	DEBUG1("Nic Init out"CRLF);
#ifdef __AVR__
	WDTCR=0x1d;							// Clear watch dog timer!!!!!!!!!!!!!!!!!!!!!!!!
     8d4:	8d e1       	ldi	r24, 0x1D	; 29
     8d6:	81 bd       	out	0x21, r24	; 33
	WDTCR=0x05;
     8d8:	85 e0       	ldi	r24, 0x05	; 5
     8da:	81 bd       	out	0x21, r24	; 33
	// Set MAC
	nicSetMacAddress(mm.our_mac_addr);
     8dc:	84 e8       	ldi	r24, 0x84	; 132
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <nicSetMacAddress>



#ifdef DEBUG_LV5 
	while(1)
	{
		enc28j60RegDump();//stdout = &uart_str;
		CONSOLE_puts(CRLF);
		TIMER_Wait_Tick(5);
	}
	enc28j60RegDump();//stdout = &uart_str;
#endif

#endif
	// Init ARP
	arpInit();
     8e4:	0e 94 c8 09 	call	0x1390	; 0x1390 <arpInit>
	// Init IP
	ipConfig();
     8e8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <ipConfig>

	TIMER_Wait_Tick(200);
     8ec:	88 ec       	ldi	r24, 0xC8	; 200
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
     8f4:	08 95       	ret

000008f6 <main>:

}






#ifdef WINDOWS

void
eexit(void)
{
	printf("**********");
	//MODEM_close();
	exit(1);
}

void
main(argc,argv)
int 	argc;
char 	**argv;
{
int		port=1;
int		speed=19200;

	signal(SIGINT,eexit);
/*
	if (argc==3)
	{   
		// Get com port
		port=atoi(argv[1]);
		// Get com speed
		speed=atoi(argv[2]);
    }
	else
	{
		printf("Warning: must specify IP address Gateway and netmask to not use defaults.\n");
		printf("	Correct format is unete <ipaddress> <gatewayip> <netmask>\n");
		printf("	Example: ppp 192.168.1.10 192.168.1.1 255.255.255.0\n\n");
	}
*/

#else

int
main()
{
     8f6:	0e 94 2b 04 	call	0x856	; 0x856 <setup_hw>
int	port=1;
int c;
U16	plen;
IPADDR	ipaddr;
U8	buf[13];

//eeprom_write_byte (0,0);
#endif


	// Setup the hardware pins
	setup_hw();
	// Initialize the Timer
	TIMER_Init();
     8fa:	0e 94 df 08 	call	0x11be	; 0x11be <TIMER_Init>
	// start reset seq of eth controller
	ERST_OFF();
     8fe:	aa 9a       	sbi	0x15, 2	; 21
	// Enable the interrupts
	sei();
     900:	78 94       	sei


	IND2_OFF();
     902:	c5 98       	cbi	0x18, 5	; 24
	IND3_OFF();
     904:	c6 98       	cbi	0x18, 6	; 24
	TIMER_Wait_Tick(20);
     906:	84 e1       	ldi	r24, 0x14	; 20
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
	//
	// Intialize the config to defaults (change this to 1 !!!+++)
	global_init(1);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	0e 94 2d 09 	call	0x125a	; 0x125a <global_init>
	IND2_OFF();
     914:	c5 98       	cbi	0x18, 5	; 24
	TIMER_Wait_Tick(20);
     916:	84 e1       	ldi	r24, 0x14	; 20
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
	// If set to autobaud, autobaud the Console Serial Port and save it to mm
#ifdef __AVR__	

	if(mm.SerialConfig & AUTOBAUD)
     91e:	80 91 7b 03 	lds	r24, 0x037B
     922:	87 ff       	sbrs	r24, 7
     924:	05 c0       	rjmp	.+10     	; 0x930 <main+0x3a>
	{
		c=autobaud_setup();
     926:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <autobaud_setup>
		mm.ConsoleBaud=c;
     92a:	80 93 7c 03 	sts	0x037C, r24
     92e:	03 c0       	rjmp	.+6      	; 0x936 <main+0x40>
	}
	else
	{
		// Load default baud/ no autobaud
		c= mm.ConsoleBaud;
     930:	80 91 7c 03 	lds	r24, 0x037C
     934:	99 27       	eor	r25, r25
	}

	// Initialize the Console Port 
	CONSOLE_init(c);
     936:	0e 94 4f 08 	call	0x109e	; 0x109e <CONSOLE_init>
	IND2_OFF();
     93a:	c5 98       	cbi	0x18, 5	; 24
	IND3_OFF();
     93c:	c6 98       	cbi	0x18, 6	; 24
	RI0_OFF();
     93e:	80 91 65 00 	lds	r24, 0x0065
     942:	88 60       	ori	r24, 0x08	; 8
     944:	80 93 65 00 	sts	0x0065, r24

#endif

#ifdef __AVR__
#ifdef DEBUG_LV3	
	CONSOLE_puts("autobaud = ");
	printShort(c);
	DEBUG1(CRLF);
#endif

	//
	// Print the hello message
	//
	if(mm.IMMConfig & BOOT_BANNER)
     948:	80 91 75 03 	lds	r24, 0x0375
     94c:	85 ff       	sbrs	r24, 5
     94e:	0c c0       	rjmp	.+24     	; 0x968 <main+0x72>
	{
		TIMER_Wait_Tick(20);
     950:	84 e1       	ldi	r24, 0x14	; 20
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
		CONSOLE_puts("uNetEthernet, Embedded Internet TCP/IP stack over Ethernet, Beta - Version "EM_VERSION CRLF);
     958:	8a e7       	ldi	r24, 0x7A	; 122
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
		CONSOLE_puts("	-Beta Version build on " __DATE__ " at " __TIME__ CRLF);
     960:	8c ec       	ldi	r24, 0xCC	; 204
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
	}
	TIMER_Wait_Tick(20);
     968:	84 e1       	ldi	r24, 0x14	; 20
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
#endif

#ifdef __AVR__	
	//
	// This is where the AVR bootloader checker is, we should also put the CRC routing
	// in the bootloader since it will never change.
	//
	if(mm.IMMConfig & BOOT_BANNER)
     970:	80 91 75 03 	lds	r24, 0x0375
     974:	85 ff       	sbrs	r24, 5
     976:	0f c0       	rjmp	.+30     	; 0x996 <main+0xa0>
	{
		CONSOLE_puts("	-Bootloader Version ");
     978:	8e ef       	ldi	r24, 0xFE	; 254
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
		c=boot_version();
     980:	e0 91 14 02 	lds	r30, 0x0214
     984:	f0 91 15 02 	lds	r31, 0x0215
     988:	09 95       	icall
		printWord(c);
     98a:	0e 94 3b 07 	call	0xe76	; 0xe76 <printWord>
		CONSOLE_puts(CRLF);
     98e:	8b e5       	ldi	r24, 0x5B	; 91
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
	}
#endif

	// Initialize memory
	DEBUG1("Initialize Memory Pool"CRLF);
	MEM_init();
     996:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <MEM_init>
	DEBUG1("out init"CRLF);
// Initialize modem
//	DEBUG1("Initialize camera serial port"CRLF);
//	MODEM_init(MODEM_BAUD_STATIC);								// camera talks at 14.4K to start
//	DEBUG1("out init"CRLF);

	
//	if(MODEM_Init_Camera())
//		DEBUG1("Camera Initialized"CRLF);
//	else
//		DEBUG1("Camera Failed Initialization"CRLF);
	
	// 
	// Get a picture
	//
//	MODEM_Camera_SendCmd(05,0,0,0,0);			// Snapshot compressed
//	MODEM_Camera_SendCmd(04,1,0,0,0);			// Get picture
	
#ifdef WIRELESS
	// wireless init?
	DEBUG1("enter wireless test"CRLF);
	wireless();
	DEBUG1("exit wireless test"CRLF);
	while(1);
#endif	
	
	nic_intialize();
     99a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <nic_intialize>

//	if(mm.network_config & DHCP_ENABLE)
//	{
		// Try to aquire a DHCP address
//		if(0==dhcp_init())
//			CONSOLE_puts("DHCP_OK"CRLF);
//		else
//			CONSOLE_puts("DHCP_FAIL"CRLF);
//	}
//	else
//		CONSOLE_puts("NO DHCP"CRLF);


	// command processor loop, runs forever
	irCommands();
     99e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <irCommands>

}
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	08 95       	ret

000009a8 <poll_serial>:
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	26 97       	sbiw	r28, 0x06	; 6
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	80 91 aa 02 	lds	r24, 0x02AA
     9c4:	88 23       	and	r24, r24
     9c6:	09 f0       	breq	.+2      	; 0x9ca <poll_serial+0x22>
     9c8:	4d c0       	rjmp	.+154    	; 0xa64 <poll_serial+0xbc>
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 aa 02 	sts	0x02AA, r24
     9d0:	ce 01       	movw	r24, r28
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	0e 94 1c 01 	call	0x238	; 0x238 <nicGetMacAddress>
     9d8:	6f e9       	ldi	r22, 0x9F	; 159
     9da:	73 e0       	ldi	r23, 0x03	; 3
     9dc:	8c eb       	ldi	r24, 0xBC	; 188
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	0e 94 10 03 	call	0x620	; 0x620 <nicPoll>
     9e4:	8c 01       	movw	r16, r24
     9e6:	89 2b       	or	r24, r25
     9e8:	d9 f1       	breq	.+118    	; 0xa60 <poll_serial+0xb8>
     9ea:	80 91 9f 03 	lds	r24, 0x039F
     9ee:	8f 3f       	cpi	r24, 0xFF	; 255
     9f0:	a1 f4       	brne	.+40     	; 0xa1a <poll_serial+0x72>
     9f2:	80 91 a0 03 	lds	r24, 0x03A0
     9f6:	8f 3f       	cpi	r24, 0xFF	; 255
     9f8:	81 f4       	brne	.+32     	; 0xa1a <poll_serial+0x72>
     9fa:	80 91 a1 03 	lds	r24, 0x03A1
     9fe:	8f 3f       	cpi	r24, 0xFF	; 255
     a00:	61 f4       	brne	.+24     	; 0xa1a <poll_serial+0x72>
     a02:	80 91 a2 03 	lds	r24, 0x03A2
     a06:	8f 3f       	cpi	r24, 0xFF	; 255
     a08:	41 f4       	brne	.+16     	; 0xa1a <poll_serial+0x72>
     a0a:	80 91 a3 03 	lds	r24, 0x03A3
     a0e:	8f 3f       	cpi	r24, 0xFF	; 255
     a10:	21 f4       	brne	.+8      	; 0xa1a <poll_serial+0x72>
     a12:	80 91 a4 03 	lds	r24, 0x03A4
     a16:	8f 3f       	cpi	r24, 0xFF	; 255
     a18:	59 f0       	breq	.+22     	; 0xa30 <poll_serial+0x88>
     a1a:	46 e0       	ldi	r20, 0x06	; 6
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	be 01       	movw	r22, r28
     a20:	6f 5f       	subi	r22, 0xFF	; 255
     a22:	7f 4f       	sbci	r23, 0xFF	; 255
     a24:	8f e9       	ldi	r24, 0x9F	; 159
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	0e 94 69 24 	call	0x48d2	; 0x48d2 <memcmp>
     a2c:	89 2b       	or	r24, r25
     a2e:	a1 f6       	brne	.-88     	; 0x9d8 <poll_serial+0x30>
     a30:	80 91 ab 03 	lds	r24, 0x03AB
     a34:	88 30       	cpi	r24, 0x08	; 8
     a36:	81 f6       	brne	.-96     	; 0x9d8 <poll_serial+0x30>
     a38:	80 91 ac 03 	lds	r24, 0x03AC
     a3c:	88 23       	and	r24, r24
     a3e:	41 f4       	brne	.+16     	; 0xa50 <poll_serial+0xa8>
     a40:	0e 50       	subi	r16, 0x0E	; 14
     a42:	10 40       	sbci	r17, 0x00	; 0
     a44:	b8 01       	movw	r22, r16
     a46:	8d ea       	ldi	r24, 0xAD	; 173
     a48:	93 e0       	ldi	r25, 0x03	; 3
     a4a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <ip_upcall>
     a4e:	c4 cf       	rjmp	.-120    	; 0x9d8 <poll_serial+0x30>
     a50:	86 30       	cpi	r24, 0x06	; 6
     a52:	11 f6       	brne	.-124    	; 0x9d8 <poll_serial+0x30>
     a54:	b8 01       	movw	r22, r16
     a56:	8f e9       	ldi	r24, 0x9F	; 159
     a58:	93 e0       	ldi	r25, 0x03	; 3
     a5a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <arpHandler>
     a5e:	bc cf       	rjmp	.-136    	; 0x9d8 <poll_serial+0x30>
     a60:	10 92 aa 02 	sts	0x02AA, r1
     a64:	26 96       	adiw	r28, 0x06	; 6
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	08 95       	ret

00000a7a <b2X>:

/* byte 2 heX ascii */
char* 
b2X( unsigned char val, char *cp ) 
{
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	38 2f       	mov	r19, r24
     a80:	fb 01       	movw	r30, r22
	*cp++ = n2X( val >>  4 );
     a82:	28 2f       	mov	r18, r24
     a84:	22 95       	swap	r18
     a86:	2f 70       	andi	r18, 0x0F	; 15
     a88:	82 2f       	mov	r24, r18
     a8a:	99 27       	eor	r25, r25
     a8c:	2f 70       	andi	r18, 0x0F	; 15
     a8e:	0a 97       	sbiw	r24, 0x0a	; 10
     a90:	14 f4       	brge	.+4      	; 0xa96 <b2X+0x1c>
     a92:	20 5d       	subi	r18, 0xD0	; 208
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <b2X+0x1e>
     a96:	29 5c       	subi	r18, 0xC9	; 201
     a98:	21 93       	st	Z+, r18
     a9a:	df 01       	movw	r26, r30
	*cp++ = n2X( val );
     a9c:	83 2f       	mov	r24, r19
     a9e:	99 27       	eor	r25, r25
     aa0:	8f 70       	andi	r24, 0x0F	; 15
     aa2:	90 70       	andi	r25, 0x00	; 0
     aa4:	23 2f       	mov	r18, r19
     aa6:	2f 70       	andi	r18, 0x0F	; 15
     aa8:	0a 97       	sbiw	r24, 0x0a	; 10
     aaa:	14 f4       	brge	.+4      	; 0xab0 <b2X+0x36>
     aac:	20 5d       	subi	r18, 0xD0	; 208
     aae:	01 c0       	rjmp	.+2      	; 0xab2 <b2X+0x38>
     ab0:	29 5c       	subi	r18, 0xC9	; 201
     ab2:	fd 01       	movw	r30, r26
     ab4:	21 93       	st	Z+, r18
	*cp = '\0';
     ab6:	ed 01       	movw	r28, r26
     ab8:	19 82       	std	Y+1, r1	; 0x01
	return cp;
}
     aba:	cf 01       	movw	r24, r30
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	08 95       	ret

00000ac2 <s2X>:

/* short 2 heX ascii */
char* 
s2X( unsigned short val, char *cp ) 
{
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	9c 01       	movw	r18, r24
     ac8:	fb 01       	movw	r30, r22
	*cp++ = n2X( val >> 12 );
     aca:	89 2f       	mov	r24, r25
     acc:	99 27       	eor	r25, r25
     ace:	82 95       	swap	r24
     ad0:	8f 70       	andi	r24, 0x0F	; 15
     ad2:	48 2f       	mov	r20, r24
     ad4:	4f 70       	andi	r20, 0x0F	; 15
     ad6:	0a 97       	sbiw	r24, 0x0a	; 10
     ad8:	18 f4       	brcc	.+6      	; 0xae0 <s2X+0x1e>
     ada:	84 2f       	mov	r24, r20
     adc:	80 5d       	subi	r24, 0xD0	; 208
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <s2X+0x22>
     ae0:	84 2f       	mov	r24, r20
     ae2:	89 5c       	subi	r24, 0xC9	; 201
     ae4:	81 93       	st	Z+, r24
	*cp++ = n2X( val >>  8 );
     ae6:	83 2f       	mov	r24, r19
     ae8:	99 27       	eor	r25, r25
     aea:	48 2f       	mov	r20, r24
     aec:	4f 70       	andi	r20, 0x0F	; 15
     aee:	8f 70       	andi	r24, 0x0F	; 15
     af0:	90 70       	andi	r25, 0x00	; 0
     af2:	0a 97       	sbiw	r24, 0x0a	; 10
     af4:	18 f4       	brcc	.+6      	; 0xafc <s2X+0x3a>
     af6:	84 2f       	mov	r24, r20
     af8:	80 5d       	subi	r24, 0xD0	; 208
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <s2X+0x3e>
     afc:	84 2f       	mov	r24, r20
     afe:	89 5c       	subi	r24, 0xC9	; 201
     b00:	81 93       	st	Z+, r24
	*cp++ = n2X( val >>  4 );
     b02:	c9 01       	movw	r24, r18
     b04:	44 e0       	ldi	r20, 0x04	; 4
     b06:	96 95       	lsr	r25
     b08:	87 95       	ror	r24
     b0a:	4a 95       	dec	r20
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <s2X+0x44>
     b0e:	48 2f       	mov	r20, r24
     b10:	4f 70       	andi	r20, 0x0F	; 15
     b12:	8f 70       	andi	r24, 0x0F	; 15
     b14:	90 70       	andi	r25, 0x00	; 0
     b16:	0a 97       	sbiw	r24, 0x0a	; 10
     b18:	18 f4       	brcc	.+6      	; 0xb20 <s2X+0x5e>
     b1a:	84 2f       	mov	r24, r20
     b1c:	80 5d       	subi	r24, 0xD0	; 208
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <s2X+0x62>
     b20:	84 2f       	mov	r24, r20
     b22:	89 5c       	subi	r24, 0xC9	; 201
     b24:	81 93       	st	Z+, r24
     b26:	df 01       	movw	r26, r30
     b28:	82 2f       	mov	r24, r18
     b2a:	8f 70       	andi	r24, 0x0F	; 15
     b2c:	2f 70       	andi	r18, 0x0F	; 15
     b2e:	30 70       	andi	r19, 0x00	; 0
	*cp++ = n2X( val );
     b30:	2a 30       	cpi	r18, 0x0A	; 10
     b32:	31 05       	cpc	r19, r1
     b34:	10 f4       	brcc	.+4      	; 0xb3a <s2X+0x78>
     b36:	80 5d       	subi	r24, 0xD0	; 208
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <s2X+0x7a>
     b3a:	89 5c       	subi	r24, 0xC9	; 201
     b3c:	fd 01       	movw	r30, r26
     b3e:	81 93       	st	Z+, r24
	*cp = '\0';
     b40:	ed 01       	movw	r28, r26
     b42:	19 82       	std	Y+1, r1	; 0x01
	return cp;
}
     b44:	cf 01       	movw	r24, r30
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <s2ip>:


/* ascii to ip addr */
char *
s2ip( char *cp, IPAddr *ip ) 
{
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	7c 01       	movw	r14, r24
     b5a:	8b 01       	movw	r16, r22
    IPAddr lip;
    char *lcp = cp;  
    char *sp=cp;

	lip.ip32 = 0;
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	d7 01       	movw	r26, r14
     b68:	7a e0       	ldi	r23, 0x0A	; 10
     b6a:	07 c0       	rjmp	.+14     	; 0xb7a <s2ip+0x2e>

	/* eg: MS.ms.ls.LS */

    /* MS --> */
	while( ( '0' <= *lcp ) && ( '9' >= *lcp ) )
    {
		lip.ipb1 = ( lip.ipb1 * 10 ) + (*lcp++ - '0');
     b6c:	97 9f       	mul	r25, r23
     b6e:	c0 01       	movw	r24, r0
     b70:	11 24       	eor	r1, r1
     b72:	96 2f       	mov	r25, r22
     b74:	98 0f       	add	r25, r24
     b76:	90 53       	subi	r25, 0x30	; 48
     b78:	11 96       	adiw	r26, 0x01	; 1
     b7a:	6c 91       	ld	r22, X
     b7c:	86 2f       	mov	r24, r22
     b7e:	80 53       	subi	r24, 0x30	; 48
     b80:	8a 30       	cpi	r24, 0x0A	; 10
     b82:	a0 f3       	brcs	.-24     	; 0xb6c <s2ip+0x20>
     b84:	29 2f       	mov	r18, r25
    }

	if (cp == lcp) return sp; /* watch for no number */
     b86:	ea 16       	cp	r14, r26
     b88:	fb 06       	cpc	r15, r27
     b8a:	09 f4       	brne	.+2      	; 0xb8e <s2ip+0x42>
     b8c:	4c c0       	rjmp	.+152    	; 0xc26 <s2ip+0xda>
	//if (lip.ipb1 >= 0x100) return lcp;/* watch for .256. */
    /* <-- MS */

    cp = lcp;
	if ('.' != *lcp++) return sp; /* watch for no '.' */
     b8e:	6e 32       	cpi	r22, 0x2E	; 46
     b90:	09 f0       	breq	.+2      	; 0xb94 <s2ip+0x48>
     b92:	49 c0       	rjmp	.+146    	; 0xc26 <s2ip+0xda>
     b94:	93 2f       	mov	r25, r19
     b96:	fd 01       	movw	r30, r26
     b98:	7a e0       	ldi	r23, 0x0A	; 10
     b9a:	06 c0       	rjmp	.+12     	; 0xba8 <s2ip+0x5c>

    /* ms --> */
	while( ( '0' <= *lcp ) && ( '9' >= *lcp ) )
    {
		lip.ipb2 = ( lip.ipb2 * 10 ) + (*lcp++ - '0');
     b9c:	97 9f       	mul	r25, r23
     b9e:	c0 01       	movw	r24, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	96 2f       	mov	r25, r22
     ba4:	98 0f       	add	r25, r24
     ba6:	90 53       	subi	r25, 0x30	; 48
     ba8:	61 81       	ldd	r22, Z+1	; 0x01
     baa:	31 96       	adiw	r30, 0x01	; 1
     bac:	86 2f       	mov	r24, r22
     bae:	80 53       	subi	r24, 0x30	; 48
     bb0:	8a 30       	cpi	r24, 0x0A	; 10
     bb2:	a0 f3       	brcs	.-24     	; 0xb9c <s2ip+0x50>
     bb4:	39 2f       	mov	r19, r25
    }

	if (cp == lcp) return sp; /* watch for no number */
     bb6:	ae 17       	cp	r26, r30
     bb8:	bf 07       	cpc	r27, r31
     bba:	a9 f1       	breq	.+106    	; 0xc26 <s2ip+0xda>
	//if (lip.ipb2 >= 0x100) return sp;/* watch for .256. */
    /* <-- ms */

    cp = lcp;
	if ('.' != *lcp++) return sp; /* watch for no '.' */
     bbc:	6e 32       	cpi	r22, 0x2E	; 46
     bbe:	99 f5       	brne	.+102    	; 0xc26 <s2ip+0xda>
     bc0:	94 2f       	mov	r25, r20
     bc2:	df 01       	movw	r26, r30
     bc4:	7a e0       	ldi	r23, 0x0A	; 10
     bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <s2ip+0x88>

    /* ls --> */
	while( ( '0' <= *lcp ) && ( '9' >= *lcp ) )
    {
		lip.ipb3 = ( lip.ipb3 * 10 ) + (*lcp++ - '0');
     bc8:	97 9f       	mul	r25, r23
     bca:	c0 01       	movw	r24, r0
     bcc:	11 24       	eor	r1, r1
     bce:	96 2f       	mov	r25, r22
     bd0:	98 0f       	add	r25, r24
     bd2:	90 53       	subi	r25, 0x30	; 48
     bd4:	ed 01       	movw	r28, r26
     bd6:	69 81       	ldd	r22, Y+1	; 0x01
     bd8:	11 96       	adiw	r26, 0x01	; 1
     bda:	86 2f       	mov	r24, r22
     bdc:	80 53       	subi	r24, 0x30	; 48
     bde:	8a 30       	cpi	r24, 0x0A	; 10
     be0:	98 f3       	brcs	.-26     	; 0xbc8 <s2ip+0x7c>
     be2:	49 2f       	mov	r20, r25
    }

	if (cp == lcp) return sp; /* watch for no number */
     be4:	ea 17       	cp	r30, r26
     be6:	fb 07       	cpc	r31, r27
     be8:	f1 f0       	breq	.+60     	; 0xc26 <s2ip+0xda>
	//if (lip.ipb3 >= 0x100) return sp;/* watch for .256. */
    /* <-- ls */

    cp = lcp;
	if ('.' != *lcp++) return sp; /* watch for no '.' */
     bea:	6e 32       	cpi	r22, 0x2E	; 46
     bec:	e1 f4       	brne	.+56     	; 0xc26 <s2ip+0xda>
     bee:	95 2f       	mov	r25, r21
     bf0:	fd 01       	movw	r30, r26
     bf2:	7a e0       	ldi	r23, 0x0A	; 10
     bf4:	06 c0       	rjmp	.+12     	; 0xc02 <s2ip+0xb6>

    /* LS --> */
	while( ( '0' <= *lcp ) && ( '9' >= *lcp ) )
    {
		lip.ipb4 = ( lip.ipb4 * 10 ) + (*lcp++ - '0');
     bf6:	97 9f       	mul	r25, r23
     bf8:	c0 01       	movw	r24, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	96 2f       	mov	r25, r22
     bfe:	98 0f       	add	r25, r24
     c00:	90 53       	subi	r25, 0x30	; 48
     c02:	61 81       	ldd	r22, Z+1	; 0x01
     c04:	31 96       	adiw	r30, 0x01	; 1
     c06:	86 2f       	mov	r24, r22
     c08:	80 53       	subi	r24, 0x30	; 48
     c0a:	8a 30       	cpi	r24, 0x0A	; 10
     c0c:	a0 f3       	brcs	.-24     	; 0xbf6 <s2ip+0xaa>
     c0e:	59 2f       	mov	r21, r25
    }

	if (cp == lcp) return sp; /* watch for no number */
     c10:	ae 17       	cp	r26, r30
     c12:	bf 07       	cpc	r27, r31
     c14:	41 f0       	breq	.+16     	; 0xc26 <s2ip+0xda>
	//if (lip.ipb4 >= 0x100) return sp;/* watch for .256. */
    /* <-- LS */

    cp = lcp;
    *ip = lip;
     c16:	d8 01       	movw	r26, r16
     c18:	2d 93       	st	X+, r18
     c1a:	3d 93       	st	X+, r19
     c1c:	4d 93       	st	X+, r20
     c1e:	5c 93       	st	X, r21
     c20:	13 97       	sbiw	r26, 0x03	; 3
     c22:	cf 01       	movw	r24, r30
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <s2ip+0xdc>

	return cp;		/* OK */
     c26:	c7 01       	movw	r24, r14
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	ff 90       	pop	r15
     c32:	ef 90       	pop	r14
     c34:	08 95       	ret

00000c36 <d2s>:
}




/* decimal ascii string to short */
unsigned short 
d2s( char *cp ) 
{
     c36:	fc 01       	movw	r30, r24
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	0f c0       	rjmp	.+30     	; 0xc5c <d2s+0x26>
	unsigned short val = 0;
	while((*cp>='0') && (*cp<='9')) 
    {
		val *= 10;
	    val += (unsigned short)(*cp-'0');			//d2n(*cp);
     c3e:	c9 01       	movw	r24, r18
     c40:	a3 e0       	ldi	r26, 0x03	; 3
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	aa 95       	dec	r26
     c48:	e1 f7       	brne	.-8      	; 0xc42 <d2s+0xc>
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	28 0f       	add	r18, r24
     c50:	39 1f       	adc	r19, r25
     c52:	24 0f       	add	r18, r20
     c54:	31 1d       	adc	r19, r1
     c56:	20 53       	subi	r18, 0x30	; 48
     c58:	30 40       	sbci	r19, 0x00	; 0
        ++cp;
     c5a:	31 96       	adiw	r30, 0x01	; 1
     c5c:	40 81       	ld	r20, Z
     c5e:	84 2f       	mov	r24, r20
     c60:	80 53       	subi	r24, 0x30	; 48
     c62:	8a 30       	cpi	r24, 0x0A	; 10
     c64:	60 f3       	brcs	.-40     	; 0xc3e <d2s+0x8>
	}
	return val;
}
     c66:	c9 01       	movw	r24, r18
     c68:	08 95       	ret

00000c6a <s2p>:
 
/* ascii to ipport */
char
*s2p( char *str, unsigned short *port ) 
{
     c6a:	dc 01       	movw	r26, r24
     c6c:	fb 01       	movw	r30, r22
    *port = 0;
     c6e:	11 82       	std	Z+1, r1	; 0x01
     c70:	10 82       	st	Z, r1
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <s2p+0x32>
	while( ( '0' <= *str ) && ( '9' >= *str ) )
    {
		*port = ((Port)*port) * ((U16)10);
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	9c 01       	movw	r18, r24
     c7a:	53 e0       	ldi	r21, 0x03	; 3
     c7c:	22 0f       	add	r18, r18
     c7e:	33 1f       	adc	r19, r19
     c80:	5a 95       	dec	r21
     c82:	e1 f7       	brne	.-8      	; 0xc7c <s2p+0x12>
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	80 83       	st	Z, r24
	    *port += ((U16)*str-'0');	//d2n(*str));
     c90:	2d 91       	ld	r18, X+
     c92:	82 0f       	add	r24, r18
     c94:	91 1d       	adc	r25, r1
     c96:	c0 97       	sbiw	r24, 0x30	; 48
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	80 83       	st	Z, r24
     c9c:	8c 91       	ld	r24, X
     c9e:	80 53       	subi	r24, 0x30	; 48
     ca0:	8a 30       	cpi	r24, 0x0A	; 10
     ca2:	40 f3       	brcs	.-48     	; 0xc74 <s2p+0xa>
        ++str;
	}
    return str;
}
     ca4:	cd 01       	movw	r24, r26
     ca6:	08 95       	ret

00000ca8 <_2d>:


/* to decimal ascii */
char 
*_2d( unsigned short val, char *cp, unsigned short dec_digits, unsigned char pad ) 
{	
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ec 01       	movw	r28, r24
     cb0:	fb 01       	movw	r30, r22
     cb2:	12 2f       	mov	r17, r18
	unsigned theDigit;
	unsigned short dv;
    unsigned char fill = 0;   
    
	if( (0 == val) && (0 == pad) ) 
     cb4:	89 2b       	or	r24, r25
     cb6:	19 f0       	breq	.+6      	; 0xcbe <_2d+0x16>
     cb8:	9a 01       	movw	r18, r20
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	31 c0       	rjmp	.+98     	; 0xd20 <_2d+0x78>
     cbe:	22 23       	and	r18, r18
     cc0:	d9 f7       	brne	.-10     	; 0xcb8 <_2d+0x10>
    {
		*cp++ = '0';
     cc2:	80 e3       	ldi	r24, 0x30	; 48
     cc4:	81 93       	st	Z+, r24
     cc6:	2f c0       	rjmp	.+94     	; 0xd26 <_2d+0x7e>
	}
	else 
    {
		for( dv = dec_digits; dv; dv /= 10 ) 
        {
			theDigit = val / dv;
     cc8:	ce 01       	movw	r24, r28
     cca:	b9 01       	movw	r22, r18
     ccc:	0e 94 7f 24 	call	0x48fe	; 0x48fe <__udivmodhi4>
			if( theDigit || fill ) 
     cd0:	61 15       	cp	r22, r1
     cd2:	71 05       	cpc	r23, r1
     cd4:	19 f4       	brne	.+6      	; 0xcdc <_2d+0x34>
     cd6:	44 23       	and	r20, r20
     cd8:	31 f4       	brne	.+12     	; 0xce6 <_2d+0x3e>
     cda:	18 c0       	rjmp	.+48     	; 0xd0c <_2d+0x64>
            {
				*cp++ = n2d( theDigit );	/* ascii */
     cdc:	cb 01       	movw	r24, r22
     cde:	8f 70       	andi	r24, 0x0F	; 15
     ce0:	90 70       	andi	r25, 0x00	; 0
     ce2:	0a 97       	sbiw	r24, 0x0a	; 10
     ce4:	20 f4       	brcc	.+8      	; 0xcee <_2d+0x46>
     ce6:	86 2f       	mov	r24, r22
     ce8:	8f 70       	andi	r24, 0x0F	; 15
     cea:	80 5d       	subi	r24, 0xD0	; 208
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <_2d+0x4c>
     cee:	86 2f       	mov	r24, r22
     cf0:	8f 70       	andi	r24, 0x0F	; 15
     cf2:	89 5c       	subi	r24, 0xC9	; 201
     cf4:	81 93       	st	Z+, r24
				val -= theDigit * dv;
     cf6:	62 9f       	mul	r22, r18
     cf8:	c0 01       	movw	r24, r0
     cfa:	63 9f       	mul	r22, r19
     cfc:	90 0d       	add	r25, r0
     cfe:	72 9f       	mul	r23, r18
     d00:	90 0d       	add	r25, r0
     d02:	11 24       	eor	r1, r1
     d04:	c8 1b       	sub	r28, r24
     d06:	d9 0b       	sbc	r29, r25
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	04 c0       	rjmp	.+8      	; 0xd14 <_2d+0x6c>
                fill = 1;
			}
            else 
            {
                if( pad ) *cp++ = '0';
     d0c:	11 23       	and	r17, r17
     d0e:	11 f0       	breq	.+4      	; 0xd14 <_2d+0x6c>
     d10:	80 e3       	ldi	r24, 0x30	; 48
     d12:	81 93       	st	Z+, r24
     d14:	c9 01       	movw	r24, r18
     d16:	6a e0       	ldi	r22, 0x0A	; 10
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	0e 94 7f 24 	call	0x48fe	; 0x48fe <__udivmodhi4>
     d1e:	9b 01       	movw	r18, r22
     d20:	21 15       	cp	r18, r1
     d22:	31 05       	cpc	r19, r1
     d24:	89 f6       	brne	.-94     	; 0xcc8 <_2d+0x20>
            }
		}
	}
	*cp = '\0';
     d26:	10 82       	st	Z, r1
	return cp;
}       
     d28:	cf 01       	movw	r24, r30
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	08 95       	ret

00000d32 <X2s>:



/* hex ascii string to short */
unsigned short 
X2s( char *cp ) 
{
     d32:	fc 01       	movw	r30, r24
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	22 c0       	rjmp	.+68     	; 0xd7e <X2s+0x4c>
	unsigned short val = 0;
	while(( *cp > 32 ) && (*cp != '='))
    {
		val *= 0x10;
	    val += X2n(*cp);
     d3a:	82 2f       	mov	r24, r18
     d3c:	80 53       	subi	r24, 0x30	; 48
     d3e:	8a 30       	cpi	r24, 0x0A	; 10
     d40:	20 f4       	brcc	.+8      	; 0xd4a <X2s+0x18>
     d42:	33 27       	eor	r19, r19
     d44:	20 53       	subi	r18, 0x30	; 48
     d46:	30 40       	sbci	r19, 0x00	; 0
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <X2s+0x3c>
     d4a:	82 2f       	mov	r24, r18
     d4c:	81 56       	subi	r24, 0x61	; 97
     d4e:	86 30       	cpi	r24, 0x06	; 6
     d50:	20 f4       	brcc	.+8      	; 0xd5a <X2s+0x28>
     d52:	33 27       	eor	r19, r19
     d54:	27 55       	subi	r18, 0x57	; 87
     d56:	30 40       	sbci	r19, 0x00	; 0
     d58:	0a c0       	rjmp	.+20     	; 0xd6e <X2s+0x3c>
     d5a:	82 2f       	mov	r24, r18
     d5c:	81 54       	subi	r24, 0x41	; 65
     d5e:	86 30       	cpi	r24, 0x06	; 6
     d60:	18 f0       	brcs	.+6      	; 0xd68 <X2s+0x36>
     d62:	2f ef       	ldi	r18, 0xFF	; 255
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <X2s+0x3c>
     d68:	33 27       	eor	r19, r19
     d6a:	27 53       	subi	r18, 0x37	; 55
     d6c:	30 40       	sbci	r19, 0x00	; 0
     d6e:	64 e0       	ldi	r22, 0x04	; 4
     d70:	44 0f       	add	r20, r20
     d72:	55 1f       	adc	r21, r21
     d74:	6a 95       	dec	r22
     d76:	e1 f7       	brne	.-8      	; 0xd70 <X2s+0x3e>
     d78:	42 0f       	add	r20, r18
     d7a:	53 1f       	adc	r21, r19
        ++cp;
     d7c:	31 96       	adiw	r30, 0x01	; 1
     d7e:	20 81       	ld	r18, Z
     d80:	21 32       	cpi	r18, 0x21	; 33
     d82:	10 f0       	brcs	.+4      	; 0xd88 <X2s+0x56>
     d84:	2d 33       	cpi	r18, 0x3D	; 61
     d86:	c9 f6       	brne	.-78     	; 0xd3a <X2s+0x8>
	}
	return val;
}
     d88:	ca 01       	movw	r24, r20
     d8a:	08 95       	ret

00000d8c <Get_Byte>:

void
printShort(U16 t)
{   
	//
	// Printout either ASCII dec short
	//
	s2d( t, smbuff );
	CONSOLE_puts(smbuff);
}

void
printByte(U8 t)
{   
	//
	// Printout either ASCII dec short
	//
	b2X(t, smbuff);
	CONSOLE_puts(smbuff);
}

void
printWord(U16 t)
{   
	//
	// Printout either ASCII dec short
	//
	s2X(t, smbuff);
	CONSOLE_puts(smbuff);
}

void
printDWord(U32 t)
{   
U8	*tptr;
	//
	// Printout either ASCII dec short
	//
	tptr=(U8 *)&t;
	printByte(tptr[3]);
	printByte(tptr[2]);
	printByte(tptr[1]);
	printByte(tptr[0]);
}


void
printIP(IPAddr *ip)
{   
	//
	// printout either ASCII ip dot quad string
	//
		//
		// Write the IP address as ASC string
		//		
		b2d(ip->ipb1, smbuff);
		CONSOLE_puts(smbuff);
		CONSOLE_putch('.');
	
		b2d(ip->ipb2, smbuff);
		CONSOLE_puts(smbuff);
		CONSOLE_putch('.');

		b2d(ip->ipb3, smbuff);
		CONSOLE_puts(smbuff);
		CONSOLE_putch('.');
	
		b2d(ip->ipb4, smbuff);
		CONSOLE_puts(smbuff);
}

void
printMAC(U8 *mac)
{   
	//
	// printout either ASCII ip dot quad string
	//
		//
		// Write the IP address as ASC string
		//		
		printByte(mac[0]);
		CONSOLE_putch(':');
		printByte(mac[1]);
		CONSOLE_putch(':');
		printByte(mac[2]);
		CONSOLE_putch(':');
		printByte(mac[3]);
		CONSOLE_putch(':');
		printByte(mac[4]);
		CONSOLE_putch(':');
		printByte(mac[5]);

}



//
// 
//
U8
*Get_Byte(U8 *ptr, U8 *val)
{
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	ec 01       	movw	r28, r24
     d96:	8b 01       	movw	r16, r22
	*val=0;
     d98:	fb 01       	movw	r30, r22
     d9a:	10 82       	st	Z, r1
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <Get_Byte+0x14>
	//
	// Dump Spaces and colin
	//
	while((*ptr==' ') || (*ptr==':'))
			ptr++ ;
     d9e:	21 96       	adiw	r28, 0x01	; 1
     da0:	88 81       	ld	r24, Y
     da2:	80 32       	cpi	r24, 0x20	; 32
     da4:	e1 f3       	breq	.-8      	; 0xd9e <Get_Byte+0x12>
     da6:	8a 33       	cpi	r24, 0x3A	; 58
     da8:	d1 f3       	breq	.-12     	; 0xd9e <Get_Byte+0x12>

	if((*ptr==0xa) || (*ptr==0xd))
     daa:	8a 30       	cpi	r24, 0x0A	; 10
     dac:	c9 f0       	breq	.+50     	; 0xde0 <Get_Byte+0x54>
     dae:	8d 30       	cpi	r24, 0x0D	; 13
     db0:	b9 f0       	breq	.+46     	; 0xde0 <Get_Byte+0x54>
		return(ptr);

	smbuff[0]=(*ptr++ | 0x20);
     db2:	80 62       	ori	r24, 0x20	; 32
     db4:	80 93 17 03 	sts	0x0317, r24
     db8:	9e 01       	movw	r18, r28
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
	smbuff[1]=(*ptr++ | 0x20);
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	80 62       	ori	r24, 0x20	; 32
     dc2:	80 93 18 03 	sts	0x0318, r24
     dc6:	e9 01       	movw	r28, r18
     dc8:	21 96       	adiw	r28, 0x01	; 1
	smbuff[2]=0;
     dca:	10 92 19 03 	sts	0x0319, r1
	
	if('='==smbuff[1])
     dce:	8d 33       	cpi	r24, 0x3D	; 61
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <Get_Byte+0x48>
	{
		ptr--;
     dd2:	e9 01       	movw	r28, r18
	}

	// Convert
	*val=(unsigned char)X2s(&smbuff[0]); 
     dd4:	87 e1       	ldi	r24, 0x17	; 23
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	0e 94 99 06 	call	0xd32	; 0xd32 <X2s>
     ddc:	f8 01       	movw	r30, r16
     dde:	80 83       	st	Z, r24
	return(ptr);
}
     de0:	ce 01       	movw	r24, r28
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <printIP>:
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	7c 01       	movw	r14, r24
     df6:	07 e1       	ldi	r16, 0x17	; 23
     df8:	13 e0       	ldi	r17, 0x03	; 3
     dfa:	fc 01       	movw	r30, r24
     dfc:	80 81       	ld	r24, Z
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	44 e6       	ldi	r20, 0x64	; 100
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	b8 01       	movw	r22, r16
     e06:	99 27       	eor	r25, r25
     e08:	0e 94 54 06 	call	0xca8	; 0xca8 <_2d>
     e0c:	c8 01       	movw	r24, r16
     e0e:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     e12:	8e e2       	ldi	r24, 0x2E	; 46
     e14:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
     e18:	f7 01       	movw	r30, r14
     e1a:	81 81       	ldd	r24, Z+1	; 0x01
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	44 e6       	ldi	r20, 0x64	; 100
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	b8 01       	movw	r22, r16
     e24:	99 27       	eor	r25, r25
     e26:	0e 94 54 06 	call	0xca8	; 0xca8 <_2d>
     e2a:	c8 01       	movw	r24, r16
     e2c:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     e30:	8e e2       	ldi	r24, 0x2E	; 46
     e32:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
     e36:	f7 01       	movw	r30, r14
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	44 e6       	ldi	r20, 0x64	; 100
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	b8 01       	movw	r22, r16
     e42:	99 27       	eor	r25, r25
     e44:	0e 94 54 06 	call	0xca8	; 0xca8 <_2d>
     e48:	c8 01       	movw	r24, r16
     e4a:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     e4e:	8e e2       	ldi	r24, 0x2E	; 46
     e50:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
     e54:	f7 01       	movw	r30, r14
     e56:	83 81       	ldd	r24, Z+3	; 0x03
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	44 e6       	ldi	r20, 0x64	; 100
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	b8 01       	movw	r22, r16
     e60:	99 27       	eor	r25, r25
     e62:	0e 94 54 06 	call	0xca8	; 0xca8 <_2d>
     e66:	c8 01       	movw	r24, r16
     e68:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	08 95       	ret

00000e76 <printWord>:
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	07 e1       	ldi	r16, 0x17	; 23
     e7c:	13 e0       	ldi	r17, 0x03	; 3
     e7e:	b8 01       	movw	r22, r16
     e80:	0e 94 61 05 	call	0xac2	; 0xac2 <s2X>
     e84:	c8 01       	movw	r24, r16
     e86:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret

00000e90 <printByte>:
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	07 e1       	ldi	r16, 0x17	; 23
     e96:	13 e0       	ldi	r17, 0x03	; 3
     e98:	b8 01       	movw	r22, r16
     e9a:	0e 94 3d 05 	call	0xa7a	; 0xa7a <b2X>
     e9e:	c8 01       	movw	r24, r16
     ea0:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	08 95       	ret

00000eaa <printMAC>:
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	8c 01       	movw	r16, r24
     eb0:	fc 01       	movw	r30, r24
     eb2:	80 81       	ld	r24, Z
     eb4:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     eb8:	8a e3       	ldi	r24, 0x3A	; 58
     eba:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
     ebe:	f8 01       	movw	r30, r16
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     ec6:	8a e3       	ldi	r24, 0x3A	; 58
     ec8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
     ecc:	f8 01       	movw	r30, r16
     ece:	82 81       	ldd	r24, Z+2	; 0x02
     ed0:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     ed4:	8a e3       	ldi	r24, 0x3A	; 58
     ed6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
     eda:	f8 01       	movw	r30, r16
     edc:	83 81       	ldd	r24, Z+3	; 0x03
     ede:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     ee2:	8a e3       	ldi	r24, 0x3A	; 58
     ee4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
     ee8:	f8 01       	movw	r30, r16
     eea:	84 81       	ldd	r24, Z+4	; 0x04
     eec:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     ef0:	8a e3       	ldi	r24, 0x3A	; 58
     ef2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
     ef6:	f8 01       	movw	r30, r16
     ef8:	85 81       	ldd	r24, Z+5	; 0x05
     efa:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	08 95       	ret

00000f04 <printDWord>:
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	24 97       	sbiw	r28, 0x04	; 4
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	69 83       	std	Y+1, r22	; 0x01
     f1a:	7a 83       	std	Y+2, r23	; 0x02
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     f2c:	fe 01       	movw	r30, r28
     f2e:	31 96       	adiw	r30, 0x01	; 1
     f30:	81 81       	ldd	r24, Z+1	; 0x01
     f32:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
     f3c:	24 96       	adiw	r28, 0x04	; 4
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <printShort>:
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	07 e1       	ldi	r16, 0x17	; 23
     f54:	13 e0       	ldi	r17, 0x03	; 3
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	40 e1       	ldi	r20, 0x10	; 16
     f5a:	57 e2       	ldi	r21, 0x27	; 39
     f5c:	b8 01       	movw	r22, r16
     f5e:	0e 94 54 06 	call	0xca8	; 0xca8 <_2d>
     f62:	c8 01       	movw	r24, r16
     f64:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	08 95       	ret

00000f6e <__vector_18>:


/* UART0 Receive Complete Interrupt Function */
SIGNAL(SIG_UART0_RECV)      
{    
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	8f 93       	push	r24
     f7a:	9f 93       	push	r25
     f7c:	ef 93       	push	r30
     f7e:	ff 93       	push	r31
U8	c;             

	RXI0_ON();
     f80:	c5 9a       	sbi	0x18, 5	; 24
    /* Get incomming char */
	c=UDR0;					//    c = inp(UDR0);
     f82:	9c b1       	in	r25, 0x0c	; 12
    
	/* check for room on the fifo, if so store the char, else we toss it. */
	if(UART0_RxSize<UART0_RX_BUFFER_SIZE)
     f84:	80 91 6d 03 	lds	r24, 0x036D
     f88:	85 34       	cpi	r24, 0x45	; 69
     f8a:	d8 f4       	brcc	.+54     	; 0xfc2 <__vector_18+0x54>
	{
		UART0_RxBuffer[UART0_RxTail++]=c;
     f8c:	80 91 6f 03 	lds	r24, 0x036F
     f90:	e8 2f       	mov	r30, r24
     f92:	ff 27       	eor	r31, r31
     f94:	e8 5d       	subi	r30, 0xD8	; 216
     f96:	fc 4f       	sbci	r31, 0xFC	; 252
     f98:	90 83       	st	Z, r25
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 6f 03 	sts	0x036F, r24
		if(UART0_RxTail>=UART0_RX_BUFFER_SIZE)
     fa0:	80 91 6f 03 	lds	r24, 0x036F
     fa4:	85 34       	cpi	r24, 0x45	; 69
     fa6:	10 f0       	brcs	.+4      	; 0xfac <__vector_18+0x3e>
			UART0_RxTail=0;
     fa8:	10 92 6f 03 	sts	0x036F, r1
		UART0_RxSize++;
     fac:	80 91 6d 03 	lds	r24, 0x036D
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	80 93 6d 03 	sts	0x036D, r24
		if(UART0_RxSize>=UART0_RX_FLOW_SIZE)
     fb6:	80 91 6d 03 	lds	r24, 0x036D
     fba:	81 34       	cpi	r24, 0x41	; 65
     fbc:	10 f0       	brcs	.+4      	; 0xfc2 <__vector_18+0x54>
		{
			// Turn Cleart to send off    
			CTS0_OFF();
     fbe:	1a 9a       	sbi	0x03, 2	; 3
			MIG_OFF();						// Miguel special pin
     fc0:	a8 9a       	sbi	0x15, 0	; 21
     fc2:	ff 91       	pop	r31
     fc4:	ef 91       	pop	r30
     fc6:	9f 91       	pop	r25
     fc8:	8f 91       	pop	r24
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <__vector_20>:
//			DTRI_OFF();
		}
	}
}

/* UART0 Receive Complete Interrupt Function */
SIGNAL(SIG_UART0_TRANS)      
{    
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	8f 93       	push	r24
    UART0_Ready = ((U8)0x1);
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 6e 03 	sts	0x036E, r24
     fe6:	8f 91       	pop	r24
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <UART0_Init>:
}

void 
UART0_Init(U16 Baud_Rate )
{
     ff2:	10 92 6f 03 	sts	0x036F, r1
     ff6:	20 91 6f 03 	lds	r18, 0x036F
     ffa:	20 93 27 03 	sts	0x0327, r18
     ffe:	20 91 27 03 	lds	r18, 0x0327
    1002:	20 93 6d 03 	sts	0x036D, r18
	//
	// Init Rx FIFO
	//    
	UART0_RxSize=UART0_RxHead=UART0_RxTail=0;
    UART0_Ready = ((U8)0x1);
    1006:	21 e0       	ldi	r18, 0x01	; 1
    1008:	20 93 6e 03 	sts	0x036E, r18
//    pUART0_Buffer = ((U8*)0x0);
//    UART0_PgmMem = ((U8)0x0);
//    UART0_CRLF = ((U8)0x0);

    /* enable RxD/TxD and interrupts */
	UCSR0B=(BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
    100c:	28 ed       	ldi	r18, 0xD8	; 216
    100e:	2a b9       	out	0x0a, r18	; 10
    //outp( (BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN)), UCSR0B );

    /* set baud rate */
    UBRR0L=Baud_Rate;						//outp( Baud_Rate, UBRR0L ); 
    1010:	89 b9       	out	0x09, r24	; 9
	
	UBRR0H=Baud_Rate>>8;					//outp( Baud_Rate >> 8, UBRR0H);
    1012:	89 2f       	mov	r24, r25
    1014:	99 27       	eor	r25, r25
    1016:	80 93 90 00 	sts	0x0090, r24
	
    
    /* Set Request to send on */ 
    /* Data Set Ready on */
    CTS0_ON();
    101a:	1a 98       	cbi	0x03, 2	; 3
//	DTRI_ON();
    DSR0_ON();
    101c:	1b 98       	cbi	0x03, 3	; 3
	pushch=0;
    101e:	10 92 ac 02 	sts	0x02AC, r1
    1022:	10 92 ab 02 	sts	0x02AB, r1
    1026:	08 95       	ret

00001028 <wait>:
#ifdef DEBUG_LV3
	CONSOLE_puts("console baud rate ");
	printShort(Baud_Rate);
	CONSOLE_puts(CRLF);
#endif
}


wait()
{
    1028:	08 95       	ret

0000102a <getch>:
//static d;

//	if(!RTS0())
//		DCDI_OFF();
//	else
//		DCDI_ON();

//	if(!DTR0())
//		DTRI_OFF();	
//	else
//		DTRI_ON();	


	//putch(".");

/*	if(d++ & 0x8)
	{
		//CTS_ON();
		DCDI_ON();
`		}
	else
	{
		//CTS_OFF();
		DCDI_OFF();
	}	
*/
}


char 
getch( void ) 
{   
    102a:	80 91 6d 03 	lds	r24, 0x036D
    102e:	88 23       	and	r24, r24
    1030:	e1 f3       	breq	.-8      	; 0x102a <getch>
U8	c;
	    /* wait for UART to indicate that a character has been received */
    	while( !UART0_RxSize);
    
	    /* get byte from fifo */
		c=UART0_RxBuffer[UART0_RxHead++];
    1032:	80 91 27 03 	lds	r24, 0x0327
    1036:	e8 2f       	mov	r30, r24
    1038:	ff 27       	eor	r31, r31
    103a:	e8 5d       	subi	r30, 0xD8	; 216
    103c:	fc 4f       	sbci	r31, 0xFC	; 252
    103e:	e0 81       	ld	r30, Z
    1040:	8f 5f       	subi	r24, 0xFF	; 255
    1042:	80 93 27 03 	sts	0x0327, r24
		if(UART0_RxHead >= UART0_RX_BUFFER_SIZE)
    1046:	80 91 27 03 	lds	r24, 0x0327
    104a:	85 34       	cpi	r24, 0x45	; 69
    104c:	10 f0       	brcs	.+4      	; 0x1052 <getch+0x28>
			UART0_RxHead=0;
    104e:	10 92 27 03 	sts	0x0327, r1
	
		/* Decerment number of bytes in fifo, if we are under flow size make sure flow control is off   */
		/* this is a critical section, we don't want off flow control after the interrupt has turned    */
		/* it on after we've updated the UART_RxSize, so protect this section 							*/

		cli(); 
    1052:	f8 94       	cli
		UART0_RxSize--;
    1054:	80 91 6d 03 	lds	r24, 0x036D
    1058:	81 50       	subi	r24, 0x01	; 1
    105a:	80 93 6d 03 	sts	0x036D, r24
		if(UART0_RxSize < UART0_RX_FLOW_SIZE)
    105e:	80 91 6d 03 	lds	r24, 0x036D
    1062:	81 34       	cpi	r24, 0x41	; 65
    1064:	08 f4       	brcc	.+2      	; 0x1068 <getch+0x3e>
		{
			// Turn Request to Send on.
	        CTS0_ON();	
    1066:	1a 98       	cbi	0x03, 2	; 3
			//DTRI_ON();
		}    
	    // End critical section
		sei();
    1068:	78 94       	sei
	//
	// Return char
	return c;
}
    106a:	8e 2f       	mov	r24, r30
    106c:	99 27       	eor	r25, r25
    106e:	08 95       	ret

00001070 <putch>:


/* putch(char c) - putchar for UART0 */
char 
putch( char c )
/* blocks */
{
    1070:	98 2f       	mov	r25, r24
    /* wait for UART to become available and we are not throttled by flow control */

	TXI0_ON();
    1072:	c4 9a       	sbi	0x18, 4	; 24

	if(mm.SerialConfig & CONSOLE_RTS)
    1074:	80 91 7b 03 	lds	r24, 0x037B
    1078:	82 ff       	sbrs	r24, 2
    107a:	07 c0       	rjmp	.+14     	; 0x108a <putch+0x1a>
		while((!UART0_Ready) || !RTS0()) wait();		/* RTS not working on hyperterm? */
    107c:	80 91 6e 03 	lds	r24, 0x036E
    1080:	88 23       	and	r24, r24
    1082:	e1 f3       	breq	.-8      	; 0x107c <putch+0xc>
    1084:	0e 99       	sbic	0x01, 6	; 1
    1086:	fa cf       	rjmp	.-12     	; 0x107c <putch+0xc>
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <putch+0x22>
	else
		while( !UART0_Ready ) wait();
    108a:	80 91 6e 03 	lds	r24, 0x036E
    108e:	88 23       	and	r24, r24
    1090:	e1 f3       	breq	.-8      	; 0x108a <putch+0x1a>

    UART0_Ready = 0;
    1092:	10 92 6e 03 	sts	0x036E, r1
	
    /* Send character */
    UDR0=c;						//outp( c, UDR0 );
    1096:	9c b9       	out	0x0c, r25	; 12

    return c;
}
    1098:	89 2f       	mov	r24, r25
    109a:	99 27       	eor	r25, r25
    109c:	08 95       	ret

0000109e <CONSOLE_init>:
#endif

#ifdef WINDOWS
int
print_log_char(char c)
{
        static FILE *fp;
 
        if(!fp)
			if(NULL == (fp = fopen("unetserlog.txt", "a")) )
				return -1;
			else
				fprintf(fp,"\n\n--Log Started---\n");
  
        fprintf(fp, "%c", c);

        return 0;
}
#endif



void CONSOLE_init(U16 baud_rate)
{
    109e:	0e 94 f9 07 	call	0xff2	; 0xff2 <UART0_Init>
    10a2:	08 95       	ret

000010a4 <CONSOLE_putch>:
#ifdef __AVR__
	UART0_Init(baud_rate);
#endif
}

void
CONSOLE_putch(char c)
{
    10a4:	0e 94 38 08 	call	0x1070	; 0x1070 <putch>
    10a8:	08 95       	ret

000010aa <CONSOLE_getch>:
#ifdef WINDOWS
		print_log_char(c);
#endif
	putch(c);
}	

char
CONSOLE_getch()
{
    10aa:	80 91 ab 02 	lds	r24, 0x02AB
    10ae:	90 91 ac 02 	lds	r25, 0x02AC
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <CONSOLE_getch+0x16>
U8	ret;
	//
	// If a char has been pushed back return it, else return one from the serial port
	//
	if(pushch)
	{
		ret=pushch & 0xff;
		pushch=0;
    10b6:	10 92 ac 02 	sts	0x02AC, r1
    10ba:	10 92 ab 02 	sts	0x02AB, r1
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <CONSOLE_getch+0x1a>
	}
	else
	{
		ret=getch();
    10c0:	0e 94 15 08 	call	0x102a	; 0x102a <getch>
	}
	return(ret);
}
    10c4:	99 27       	eor	r25, r25
    10c6:	08 95       	ret

000010c8 <CONSOLE_kbhit>:

char
CONSOLE_kbhit()
{
    10c8:	80 91 ab 02 	lds	r24, 0x02AB
    10cc:	90 91 ac 02 	lds	r25, 0x02AC
    10d0:	89 2b       	or	r24, r25
    10d2:	19 f0       	breq	.+6      	; 0x10da <CONSOLE_kbhit+0x12>
	if((pushch) || kbhit())
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	08 95       	ret
    10da:	80 91 6d 03 	lds	r24, 0x036D
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	88 23       	and	r24, r24
    10e4:	11 f0       	breq	.+4      	; 0x10ea <CONSOLE_kbhit+0x22>
    10e6:	21 e0       	ldi	r18, 0x01	; 1
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	c9 01       	movw	r24, r18
		return(1);
	return(0);
}
    10ec:	08 95       	ret

000010ee <CONSOLE_pushch>:


void
CONSOLE_pushch(U8 c)
{
    10ee:	99 27       	eor	r25, r25
    10f0:	91 60       	ori	r25, 0x01	; 1
    10f2:	90 93 ac 02 	sts	0x02AC, r25
    10f6:	80 93 ab 02 	sts	0x02AB, r24
    10fa:	08 95       	ret

000010fc <CONSOLE_cputs>:
	// push the char back into the serial buffer, flag the buffer is full even if the
	// char is null.  We only handle one pushed back char (all we need to)
	pushch=c | 0x100;
}


//
// CONSOLE_cputs(buf) - this function prints out FLASH based memory strings
//
void
CONSOLE_cputs(char *buf)
{
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	ec 01       	movw	r28, r24
    1102:	05 c0       	rjmp	.+10     	; 0x110e <__stack+0xf>
#ifdef __AVR__
	//while(PRG_RDB(buf))
	while(pgm_read_byte(buf))
	{
		//CONSOLE_putch(PRG_RDB(buf++));
		CONSOLE_putch(pgm_read_byte(buf++) );
    1104:	21 96       	adiw	r28, 0x01	; 1
    1106:	f9 01       	movw	r30, r18
    1108:	84 91       	lpm	r24, Z
    110a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
    110e:	9e 01       	movw	r18, r28
    1110:	fe 01       	movw	r30, r28
    1112:	84 91       	lpm	r24, Z
    1114:	88 23       	and	r24, r24
    1116:	b1 f7       	brne	.-20     	; 0x1104 <__stack+0x5>
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <CONSOLE_puts>:
	}
#else
	CONSOLE_puts(buf);
#endif
}

void
CONSOLE_puts(char *buf)
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	ec 01       	movw	r28, r24
	if(buf!=0)
    1124:	89 2b       	or	r24, r25
    1126:	21 f4       	brne	.+8      	; 0x1130 <CONSOLE_puts+0x12>
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <CONSOLE_puts+0x18>
	{
		while(*buf)
			CONSOLE_putch(*buf++);
    112a:	21 96       	adiw	r28, 0x01	; 1
    112c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
    1130:	88 81       	ld	r24, Y
    1132:	88 23       	and	r24, r24
    1134:	d1 f7       	brne	.-12     	; 0x112a <CONSOLE_puts+0xc>
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

0000113c <__vector_16>:
volatile U8	 TIMER_wdt;

/* AVR Timer 0 overflow Signal */
SIGNAL(SIG_OVERFLOW0)
{   
    113c:	1f 92       	push	r1
    113e:	0f 92       	push	r0
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	8f 93       	push	r24
    1148:	9f 93       	push	r25
	/* incerment timer */
	TIMER_Counter++;
    114a:	80 91 74 03 	lds	r24, 0x0374
    114e:	8f 5f       	subi	r24, 0xFF	; 255
    1150:	80 93 74 03 	sts	0x0374, r24
	TIMER_Tick++;
    1154:	80 91 71 03 	lds	r24, 0x0371
    1158:	90 91 72 03 	lds	r25, 0x0372
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	90 93 72 03 	sts	0x0372, r25
    1162:	80 93 71 03 	sts	0x0371, r24

	/* seconds need to be updated? */
	if(TIMER_Counter>TICKS_PER_SECOND)
    1166:	80 91 74 03 	lds	r24, 0x0374
    116a:	89 34       	cpi	r24, 0x49	; 73
    116c:	b0 f0       	brcs	.+44     	; 0x119a <__vector_16+0x5e>
	{
		TIMER_Second++;
    116e:	80 91 70 03 	lds	r24, 0x0370
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	80 93 70 03 	sts	0x0370, r24
		TIMER_Counter=0;
    1178:	10 92 74 03 	sts	0x0374, r1
		if(TIMER_wdt)
    117c:	80 91 73 03 	lds	r24, 0x0373
    1180:	88 23       	and	r24, r24
    1182:	59 f0       	breq	.+22     	; 0x119a <__vector_16+0x5e>
		{
			TIMER_wdt--;
    1184:	80 91 73 03 	lds	r24, 0x0373
    1188:	81 50       	subi	r24, 0x01	; 1
    118a:	80 93 73 03 	sts	0x0373, r24
			if(0==TIMER_wdt)
    118e:	80 91 73 03 	lds	r24, 0x0373
    1192:	88 23       	and	r24, r24
    1194:	11 f4       	brne	.+4      	; 0x119a <__vector_16+0x5e>
				asm volatile ("jmp 0x0000");
    1196:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
		}
	}
	
	/* Reset Timer */
	TCNT0= 190;							//outp((U8)(190/*-TICKS_PER_SECOND*/)/*TIMER_SELECT*/,TCNT0);
    119a:	8e eb       	ldi	r24, 0xBE	; 190
    119c:	82 bf       	out	0x32, r24	; 50
	//outp((U8)TIMER_SELECT,TCNT0);

	/* turn off indicators */
	TXI0_OFF();
    119e:	c4 98       	cbi	0x18, 4	; 24
	RXI0_OFF();
    11a0:	c5 98       	cbi	0x18, 5	; 24
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <timer_expire>:

}

#endif






void
timer_set(void)
{
	//printf("set timer\n");
	time_start=TIMER_Get_Second();
	if(0==time_start)
		time_start++;
}

U8
timer_timeout(U16 timeout_val)
{
	if(0==time_start)
	{
		//DEBUG1("timerturned off\n");
		return 1;
	}
	if(timeout_val < (TIMER_Get_Second()-time_start))
	{
		//printf("timeout %d  --  %d \n",timeout_val, TIMER_Get_Second()-time_start);
		if(mm.IMMConfig & DEBUG_MODE)
		{
			DEBUG1("timer timeout"CRLF);
		}
		return 1;
	}
	else
	{
		//printf("notimeout %d  --  %d \n",timeout_val, TIMER_Get_Second()-time_start);
		return 0;
	}
}

U8
timer_expire(void)
{
    11b0:	10 92 ae 02 	sts	0x02AE, r1
    11b4:	10 92 ad 02 	sts	0x02AD, r1
	///DEBUG1("turn off\n");
	time_start=0;
	return(0);
}
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	08 95       	ret

000011be <TIMER_Init>:


//#define TICKS_PER_SECOND    100
//U16 TIMER_Counter;
//U8  TIMER_Tick;
//U8  TIMER_Second;

//
// This function initilizes timer 0 on the Mega128/64 (and possibly other avr chips)
//
//
void 
TIMER_Init(void)
{
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	87 bf       	out	0x37, r24	; 55
#ifdef __AVR__
	    /* enable TCNT0 overflow */
    TIMSK=1<<TOIE0;							//outp((1<<TOIE0),TIMSK);

    /* count with cpu clock/1024 */
    TCCR0=0x07;								//outp(0x07,TCCR0);
    11c2:	87 e0       	ldi	r24, 0x07	; 7
    11c4:	83 bf       	out	0x33, r24	; 51

    /* reset TCNT0 */
    TCNT0=(255-TICKS_PER_SECOND);				//outp((U8)(255-TICKS_PER_SECOND)/*TIMER_SELECT*/,TCNT0);
    11c6:	87 eb       	ldi	r24, 0xB7	; 183
    11c8:	82 bf       	out	0x32, r24	; 50
    11ca:	08 95       	ret

000011cc <TIMER_Get_Tick>:
#endif
}


//void
//TIMER_WDT(U8 Timeout)
//{
//	TIMER_wdt=Timeout;
//}


U16
TIMER_Get_Tick()
{
    11cc:	80 91 71 03 	lds	r24, 0x0371
    11d0:	90 91 72 03 	lds	r25, 0x0372
    11d4:	08 95       	ret

000011d6 <TIMER_Get_Second>:
#ifdef WINDOWS
	struct _timeb timebuffer;
	time_t			t;
	U16		ticks;
  
	_ftime( &timebuffer );
	time(&t);

	// Need to explain this calculation, this can be done better (right now it is (seconds * 64) + (millisec / 4))
//	ticks=0;
	ticks=(U16)(t<<6);
	ticks=ticks + ((timebuffer.millitm  & 0xff)>>2);
//	ticks=timebuffer.millitm;

	//printf("%d\n",ticks);

	return(ticks);
#else
	// AVR
	return(TIMER_Tick);
#endif   
}

U16
TIMER_Get_Second()
{
    11d6:	80 91 70 03 	lds	r24, 0x0370
#ifdef WINDOWS
	return(get_seconds());
#else
	// AVR
	return(TIMER_Second);
#endif
} 
    11da:	99 27       	eor	r25, r25
    11dc:	08 95       	ret

000011de <delay_us>:


// How long does this wait?
void
TIMER_Wait_Tick(U16 wait_ticks)
{     
U16	tick_start;

	tick_start=TIMER_Get_Tick(); 
    while(1)	
    {   
		//poll_serial();
	   	if(abs(TIMER_Get_Tick()-tick_start) > wait_ticks )	
			break;
	}
}      


void
delay_us(U16 us)
{
    11de:	08 95       	ret

000011e0 <timer_set>:
    11e0:	20 91 70 03 	lds	r18, 0x0370
    11e4:	82 2f       	mov	r24, r18
    11e6:	99 27       	eor	r25, r25
    11e8:	90 93 ae 02 	sts	0x02AE, r25
    11ec:	80 93 ad 02 	sts	0x02AD, r24
    11f0:	22 23       	and	r18, r18
    11f2:	31 f4       	brne	.+12     	; 0x1200 <timer_set+0x20>
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	90 93 ae 02 	sts	0x02AE, r25
    11fc:	80 93 ad 02 	sts	0x02AD, r24
    1200:	08 95       	ret

00001202 <TIMER_Wait_Tick>:
    1202:	40 91 71 03 	lds	r20, 0x0371
    1206:	50 91 72 03 	lds	r21, 0x0372
    120a:	20 91 71 03 	lds	r18, 0x0371
    120e:	30 91 72 03 	lds	r19, 0x0372
    1212:	24 1b       	sub	r18, r20
    1214:	35 0b       	sbc	r19, r21
    1216:	37 ff       	sbrs	r19, 7
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <TIMER_Wait_Tick+0x1e>
    121a:	30 95       	com	r19
    121c:	21 95       	neg	r18
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	82 17       	cp	r24, r18
    1222:	93 07       	cpc	r25, r19
    1224:	90 f7       	brcc	.-28     	; 0x120a <TIMER_Wait_Tick+0x8>
    1226:	08 95       	ret

00001228 <timer_timeout>:
    1228:	ac 01       	movw	r20, r24
    122a:	20 91 ad 02 	lds	r18, 0x02AD
    122e:	30 91 ae 02 	lds	r19, 0x02AE
    1232:	21 15       	cp	r18, r1
    1234:	31 05       	cpc	r19, r1
    1236:	19 f4       	brne	.+6      	; 0x123e <timer_timeout+0x16>
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	08 95       	ret
    123e:	80 91 70 03 	lds	r24, 0x0370
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	99 27       	eor	r25, r25
    1248:	82 1b       	sub	r24, r18
    124a:	93 0b       	sbc	r25, r19
    124c:	48 17       	cp	r20, r24
    124e:	59 07       	cpc	r21, r25
    1250:	10 f4       	brcc	.+4      	; 0x1256 <timer_timeout+0x2e>
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	cb 01       	movw	r24, r22
    1258:	08 95       	ret

0000125a <global_init>:
    \param cmd	0=load default	1=load eeprom
*/
U8
global_init(U8 cmd)
{
    125a:	48 2f       	mov	r20, r24
U8	count,*ptr=(U8 *)&mm;

#ifdef WIN32
U8		flag=0;
#endif


#ifdef __AVR__
	if(1==cmd)
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	99 f5       	brne	.+102    	; 0x12c6 <global_init+0x6c>
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    1260:	a0 e0       	ldi	r26, 0x00	; 0
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	0e 94 b5 24 	call	0x496a	; 0x496a <__eeprom_read_byte_1C1D1E>
    1268:	80 2d       	mov	r24, r0
	{
		// Try to load eeprom, 0xa5 is the flag that means eeprom is good.
		// uint8_t 	eeprom_read_byte (const uint8_t *addr)
		if((cmd) && (0xa5==eeprom_read_byte(0)))
    126a:	85 3a       	cpi	r24, 0xA5	; 165
    126c:	11 f0       	breq	.+4      	; 0x1272 <global_init+0x18>
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	0e c0       	rjmp	.+28     	; 0x128e <global_init+0x34>
    1272:	e5 e7       	ldi	r30, 0x75	; 117
    1274:	f3 e0       	ldi	r31, 0x03	; 3
    1276:	2a e0       	ldi	r18, 0x0A	; 10
    1278:	30 e0       	ldi	r19, 0x00	; 0
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    127a:	d9 01       	movw	r26, r18
    127c:	0e 94 b5 24 	call	0x496a	; 0x496a <__eeprom_read_byte_1C1D1E>
    1280:	80 2d       	mov	r24, r0
		{
			//DEBUG1("Load EEPROM"CRLF);
			// Load the config from the eeprom
			for(count=0;count<sizeof(MEMMAP)-1;count++)
				ptr[count]=eeprom_read_byte((U8 *)(count+0xa));
    1282:	81 93       	st	Z+, r24
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	23 33       	cpi	r18, 0x33	; 51
    128a:	31 05       	cpc	r19, r1
    128c:	b1 f7       	brne	.-20     	; 0x127a <global_init+0x20>
		}
		else
		{
			//DEBUG1("EEPROM not valid ");
			// eeprom is not valid, load defaults
			cmd=0;
		}
		// Load MAC address no matter what
		mm.our_mac_addr[0]				= 0;
    128e:	10 92 84 03 	sts	0x0384, r1
		mm.our_mac_addr[1]				= 0;
    1292:	10 92 85 03 	sts	0x0385, r1
		mm.our_mac_addr[2]				= 0x14;
    1296:	84 e1       	ldi	r24, 0x14	; 20
    1298:	80 93 86 03 	sts	0x0386, r24
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    129c:	a1 e0       	ldi	r26, 0x01	; 1
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	0e 94 b5 24 	call	0x496a	; 0x496a <__eeprom_read_byte_1C1D1E>
    12a4:	80 2d       	mov	r24, r0
		mm.our_mac_addr[3]				= eeprom_read_byte(1);
    12a6:	80 93 87 03 	sts	0x0387, r24
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    12aa:	a2 e0       	ldi	r26, 0x02	; 2
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	0e 94 b5 24 	call	0x496a	; 0x496a <__eeprom_read_byte_1C1D1E>
    12b2:	80 2d       	mov	r24, r0
		mm.our_mac_addr[4]				= eeprom_read_byte(2);
    12b4:	80 93 88 03 	sts	0x0388, r24
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    12b8:	a3 e0       	ldi	r26, 0x03	; 3
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	0e 94 b5 24 	call	0x496a	; 0x496a <__eeprom_read_byte_1C1D1E>
    12c0:	80 2d       	mov	r24, r0
		mm.our_mac_addr[5]				= eeprom_read_byte(3);
    12c2:	80 93 89 03 	sts	0x0389, r24
	}
	if(2==cmd)
    12c6:	42 30       	cpi	r20, 0x02	; 2
    12c8:	b1 f4       	brne	.+44     	; 0x12f6 <global_init+0x9c>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    12ca:	85 ea       	ldi	r24, 0xA5	; 165
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	08 2e       	mov	r0, r24
    12d2:	0e 94 bd 24 	call	0x497a	; 0x497a <__eeprom_write_byte_1C1D1E>
    12d6:	e5 e7       	ldi	r30, 0x75	; 117
    12d8:	f3 e0       	ldi	r31, 0x03	; 3
    12da:	2a e0       	ldi	r18, 0x0A	; 10
    12dc:	30 e0       	ldi	r19, 0x00	; 0
	{
		// Validate the eeprom
		eeprom_write_byte (0,0xa5);
		//
		for(count=0;count<sizeof(MEMMAP)-1;count++)
    12de:	81 91       	ld	r24, Z+
    12e0:	d9 01       	movw	r26, r18
    12e2:	08 2e       	mov	r0, r24
    12e4:	0e 94 bd 24 	call	0x497a	; 0x497a <__eeprom_write_byte_1C1D1E>
    12e8:	2f 5f       	subi	r18, 0xFF	; 255
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	23 33       	cpi	r18, 0x33	; 51
    12ee:	31 05       	cpc	r19, r1
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <global_init+0x9a>
    12f2:	4b c0       	rjmp	.+150    	; 0x138a <global_init+0x130>
    12f4:	f4 cf       	rjmp	.-24     	; 0x12de <global_init+0x84>
			eeprom_write_byte((count+0xa),ptr[count]);

	}
#else
	if(1==cmd)
	{
#define MAX_LINE_SIZE	128


		FILE	*fp;
		U8		line[MAX_LINE_SIZE];
		U8		*subst;

DEBUG1("read from file"CRLF);
		mm.our_mac_addr[0]				= 0;
		mm.our_mac_addr[1]				= 0;
		mm.our_mac_addr[2]				= 0x14;

		// Read from file
		if(NULL == (fp = fopen("unetconfig.txt", "r")) )
			cmd=0;
		else
		{	
			while(readln_from_a_file(fp, line, MAX_LINE_SIZE))
			{
				subst=strtok(line," \n");
				if(0==strcmp(subst,"iface"))
				{
					subst=strtok(NULL," \n");
					pcap_iface=d2s(subst);
				}
				if(0==strcmp(subst,"dhcp"))
				{
					subst=strtok(NULL," \n");
					if(1==d2s( subst))
					{
						// should we memset the IP addresses?
						mm.network_config=DHCP_ENABLE;
						break;
					}
				}
				else if(0==strcmp(subst,"ip"))
				{
					// Parse IP address
					subst=strtok(NULL," \n");
					s2ip( subst, &mm.our_ipaddr );
				}
				else if(0==strcmp(subst,"mask"))
				{
					// Parse IP address
					subst=strtok(NULL," \n");
					s2ip( subst, &mm.netmask );
				}
				else if(0==strcmp(subst,"gateway"))
				{
					// Parse IP address
					subst=strtok(NULL," \n");
					s2ip( subst, &mm.gatewayip);
				}
				else if(0==strcmp(subst,"pridns"))
				{
					// Parse IP address
					subst=strtok(NULL," \n");
					s2ip( subst, &mm.pri_dns_addr);
				}
				else if(0==strcmp(subst,"secdns"))
				{
					// Parse IP address
					subst=strtok(NULL," \n");
					s2ip( subst, &mm.sec_dns_addr);
				}
			}
			cmd=0;
			flag=1;
		}
	}
#endif
	if(0==cmd)
    12f6:	44 23       	and	r20, r20
    12f8:	09 f0       	breq	.+2      	; 0x12fc <global_init+0xa2>
    12fa:	47 c0       	rjmp	.+142    	; 0x138a <global_init+0x130>
	{
		// 
		// Set defaults 
		//
		//DEBUG1("Load Defaults"CRLF);
#ifdef __AVR__
		mm.IMMConfig					= BOOT_BANNER | ECHO_CMD | ECHO_STREAM | RESULT ;
    12fc:	87 e2       	ldi	r24, 0x27	; 39
    12fe:	80 93 75 03 	sts	0x0375, r24
#else
		mm.IMMConfig					= BOOT_BANNER | DEBUG_MODE | ECHO_CMD | ECHO_STREAM | RESULT ;		
#endif
		mm.escapeChar					= '+';
    1302:	8b e2       	ldi	r24, 0x2B	; 43
    1304:	80 93 76 03 	sts	0x0376, r24
		mm.escape_timeout				= ESCAPE_TIMEOUT;
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	80 93 77 03 	sts	0x0377, r24
		mm.TCPStreamTickTime			= 200;		
    130e:	88 ec       	ldi	r24, 0xC8	; 200
    1310:	80 93 78 03 	sts	0x0378, r24
		mm.UDPStreamTickTime			= 200;
    1314:	80 93 79 03 	sts	0x0379, r24
		mm.SerialConfig					= 0;							// serial config
    1318:	10 92 7b 03 	sts	0x037B, r1
		mm.ConsoleBaud					= CONSOLE_BAUD_STATIC;			// ConsoleBaudRate
    131c:	87 e1       	ldi	r24, 0x17	; 23
    131e:	80 93 7c 03 	sts	0x037C, r24
		
		mm.ip_ttl						= IP_TTL_DEFAULT; 
    1322:	84 e6       	ldi	r24, 0x64	; 100
    1324:	80 93 81 03 	sts	0x0381, r24
		mm.ip_tos						= IP_TOS_DEFAULT;
    1328:	10 92 82 03 	sts	0x0382, r1
		
		mm.tcp_connect_timeout			= TCP_CONNECT_TIMEOUT;
    132c:	85 e0       	ldi	r24, 0x05	; 5
    132e:	80 93 7e 03 	sts	0x037E, r24
		mm.tcp_retransmit_timeout		= TCP_TIMETOUT;
    1332:	8a ef       	ldi	r24, 0xFA	; 250
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	90 93 80 03 	sts	0x0380, r25
    133a:	80 93 7f 03 	sts	0x037F, r24
		mm.dns_timeout					= DNS_REPLY_WAIT_TIME;	
    133e:	84 e0       	ldi	r24, 0x04	; 4
    1340:	80 93 7a 03 	sts	0x037A, r24

		//
		// Changing info depending on product.
		//
#ifdef WIN32
		if(0==flag)
		{
#endif
/*
		mm.pri_dns_addr.ip32			= 0x0aa02840;
		// Default ip address
		mm.our_ipaddr.ip32	=0x0a0b0a0a;		// IP is backwards  10.10.11.10 = 0a00A8C0
		//mm.our_ipaddr.ip32	=0x0a00a8C0;		// IP is backwards  192.168.0.10 = 0a00A8C0
		mm.netmask.ip32		=0x00ffffff;
		mm.gatewayip.ip32	=0x010b0a0a;
*/
		mm.network_config		= DHCP_ENABLE;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	80 93 83 03 	sts	0x0383, r24

		mm.pri_dns_addr.ip32	= 0x0;
    134a:	10 92 96 03 	sts	0x0396, r1
    134e:	10 92 97 03 	sts	0x0397, r1
    1352:	10 92 98 03 	sts	0x0398, r1
    1356:	10 92 99 03 	sts	0x0399, r1
		// Default ip address
		mm.our_ipaddr.ip32		=	0;				// IP is backwards  10.10.11.10 = 0a00A8C0
    135a:	10 92 8a 03 	sts	0x038A, r1
    135e:	10 92 8b 03 	sts	0x038B, r1
    1362:	10 92 8c 03 	sts	0x038C, r1
    1366:	10 92 8d 03 	sts	0x038D, r1
		//mm.our_ipaddr.ip32	=0x0a00a8C0;		// IP is backwards  192.168.0.10 = 0a00A8C0
		mm.netmask.ip32			=0x0;
    136a:	10 92 8e 03 	sts	0x038E, r1
    136e:	10 92 8f 03 	sts	0x038F, r1
    1372:	10 92 90 03 	sts	0x0390, r1
    1376:	10 92 91 03 	sts	0x0391, r1
		mm.gatewayip.ip32		=0x0;	
    137a:	10 92 92 03 	sts	0x0392, r1
    137e:	10 92 93 03 	sts	0x0393, r1
    1382:	10 92 94 03 	sts	0x0394, r1
    1386:	10 92 95 03 	sts	0x0395, r1
		//mm.gatewayip.ip32	=0x0100a8c0;
#ifdef WIN32		
		}
#endif
	}
	return(cmd);
}
    138a:	84 2f       	mov	r24, r20
    138c:	99 27       	eor	r25, r25
    138e:	08 95       	ret

00001390 <arpInit>:

#endif

void arpInit(void)
{
    1390:	ef e5       	ldi	r30, 0x5F	; 95
    1392:	f6 e0       	ldi	r31, 0x06	; 6
	U8 i;
	// Init ARP cache
	for(i=0; i<ARP_CACHE_SIZE; i++)
	{
		ArpCache[i].ipaddr.ip32 = 0;
    1394:	10 82       	st	Z, r1
    1396:	11 82       	std	Z+1, r1	; 0x01
    1398:	12 82       	std	Z+2, r1	; 0x02
    139a:	13 82       	std	Z+3, r1	; 0x03
		ArpCache[i].time = 0;
    139c:	13 86       	std	Z+11, r1	; 0x0b
    139e:	12 86       	std	Z+10, r1	; 0x0a
    13a0:	3c 96       	adiw	r30, 0x0c	; 12
    13a2:	86 e0       	ldi	r24, 0x06	; 6
    13a4:	ef 3b       	cpi	r30, 0xBF	; 191
    13a6:	f8 07       	cpc	r31, r24
    13a8:	a9 f7       	brne	.-22     	; 0x1394 <arpInit+0x4>
    13aa:	08 95       	ret

000013ac <arpProcess>:
	}
}


// Combind with above!!
void arpSetAddress(IPADDR ipaddr, U8 *mac_addr)
{
	// Initalize Local IP to MAC translation
	bytecopy(MyAddr.macaddress,mac_addr,6);
	MyAddr.ipaddr.ip32=ipaddr.ip32;
}


// Handel incoming ARP packets
void
arpHandler(U8 *pkt, U16 len)
{
	ARP				*arp;

	arp=(ARP *) pkt;

	// Check if this is an ARP request.
	if(ARP_REQUEST==arp->op)
	{
		// ARP Request

		//DEBUG2("ARP-REQUST My IP ");
		//printIP(&MyAddr.ipaddr);
		//DEBUG2(" requested ip is ");
		//printIP(&arp->d_ip_add);
		//DEBUG2(CRLF);
//		dump(arp,64);

		// Is ARP request for our IP?
		if(arp->d_ip_add.ip32 == MyAddr.ipaddr.ip32)
		{

			DEBUG2(CRLF"add-req - ");

			// Add requesting IP to ARP cache?  Fix this call, corrupts mac-ip addr
			//arpAdd(arp->s_ip_add, arp->s_hw_add);

			//  Then respond by fixing up packet
			bytecopy(arp->dest_hw_add,arp->src_hw_add,6);
			bytecopy(arp->d_hw_add,arp->src_hw_add,6);
			arp->d_ip_add.ip32 = arp->s_ip_add.ip32;
			arp->s_ip_add.ip32 = MyAddr.ipaddr.ip32;
			bytecopy(arp->src_hw_add,MyAddr.macaddress,6);
			bytecopy(arp->s_hw_add,MyAddr.macaddress,6);

			arp->op=ARP_REPLY;
		//	DEBUG2(" Nic Send len");
		//	printShort(len);
			DEBUG2(CRLF);
			nicSend(len-4, pkt);
		}
		else
		{
			// Not for us
		}

	} 
	else if (ARP_REPLY==arp->op)
	{
		// Did we request this?
		// Yes lets add it to the cache.
		arpAdd(arp->s_ip_add, arp->s_hw_add);

	}
}

/*! 
  \brief Adds an ARP address to the ARP cache.
  \param dest_ip - IP address to send arp request to
  \return nothing.
*/
void
arpAdd(IPADDR sip, U8 *mac)
{
	U8		i;
	U8		old;

	// This is an ARP reply, add into cache.
	old=0;
	for(i=0; i<ARP_CACHE_SIZE; i++)
	{
		// Check to see if address matches cache.
		if(sip.ip32 == ArpCache[i].ipaddr.ip32)
		{
			DEBUG2("refresh entry"CRLF);
			// We have a match, update time
			ArpCache[i].time = ARP_CACHE_TTL;
			break;
		}
		// else lets keep track of the oldest one.
		if (ArpCache[i].time < ArpCache[old].time)
			old=i;
	}
	// If not found replace oldest
	if(i == ARP_CACHE_SIZE)
	{
		DEBUG2("Overwrite oldest"CRLF);
		// Replace oldest
		ArpCache[old].ipaddr.ip32 = sip.ip32;
		bytecopy(ArpCache[old].macaddress, mac, 6);
		ArpCache[old].time = ARP_CACHE_TTL;
	}
}

// send an arp request (uses lots of stack, can change later)
/*! 
  \brief Sends and ARP reqest packet out the interface.
  \param dest_ip - IP address to send arp request to
  \return nothing.
*/
void 
arpRequest(IPADDR *destIp)
{
	ARP	pkt;

	// build an arp request for the IP address requested.
	bytecopy(pkt.src_hw_add,MyAddr.macaddress,6);
	bytecopy(pkt.s_hw_add,MyAddr.macaddress,6);
	// broadcast
	pkt.dest_hw_add[0]=pkt.dest_hw_add[1]=pkt.dest_hw_add[2]=pkt.dest_hw_add[3]=pkt.dest_hw_add[4]=pkt.dest_hw_add[5]=0xff;

	pkt.ether_type		=ARP_TYPE;
	pkt.hard_type		=ARPHRD_ETHER;
	pkt.prot_type		=ETHERTYPE_IP;
	pkt.hard_size		=6;
	pkt.prot_size		=4;
	pkt.op				=ARP_REQUEST;
	pkt.s_ip_add.ip32	= MyAddr.ipaddr.ip32;
	pkt.d_ip_add.ip32	= destIp->ip32;

	nicSend(sizeof(ARP), &pkt);

}


//-----------------------------------------------------------------------------
// arp_process() - 
//
//	This should be called every 10 seconds or so.  
// 
//-----------------------------------------------------------------------------
void
arpProcess(void)
{
    13ac:	e9 e6       	ldi	r30, 0x69	; 105
    13ae:	f6 e0       	ldi	r31, 0x06	; 6
	U8 i;

	// decrement TTL for all non zero entries
	for(i=0; i<ARP_CACHE_SIZE; i++)
	{
		if(ArpCache[i].time)
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	19 f0       	breq	.+6      	; 0x13be <arpProcess+0x12>
			ArpCache[i].time--;
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	91 83       	std	Z+1, r25	; 0x01
    13bc:	80 83       	st	Z, r24
    13be:	3c 96       	adiw	r30, 0x0c	; 12
    13c0:	86 e0       	ldi	r24, 0x06	; 6
    13c2:	e9 3c       	cpi	r30, 0xC9	; 201
    13c4:	f8 07       	cpc	r31, r24
    13c6:	a1 f7       	brne	.-24     	; 0x13b0 <arpProcess+0x4>
    13c8:	08 95       	ret

000013ca <arpMatchIp>:
	}
}

/*! 
  \brief ARP matching function.
  \param dest_ip - pointer to the IP address to match in ARP table.
  \return Returns a pointer to the cache entry.
*/
U8 
*arpMatchIp(IPADDR *ip)
{
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	fc 01       	movw	r30, r24
	U8	i;
	
	// Search through the arp cache and try to find a match
	for(i=0; i<ARP_CACHE_SIZE; i++)
	{
		if(ArpCache[i].ipaddr.ip32 == ip->ip32)
    13d4:	e0 80       	ld	r14, Z
    13d6:	f1 80       	ldd	r15, Z+1	; 0x01
    13d8:	02 81       	ldd	r16, Z+2	; 0x02
    13da:	13 81       	ldd	r17, Z+3	; 0x03
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	ef e5       	ldi	r30, 0x5F	; 95
    13e2:	f6 e0       	ldi	r31, 0x06	; 6
    13e4:	9f 01       	movw	r18, r30
    13e6:	2c 5f       	subi	r18, 0xFC	; 252
    13e8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
    13ee:	a2 81       	ldd	r26, Z+2	; 0x02
    13f0:	b3 81       	ldd	r27, Z+3	; 0x03
    13f2:	8e 15       	cp	r24, r14
    13f4:	9f 05       	cpc	r25, r15
    13f6:	a0 07       	cpc	r26, r16
    13f8:	b1 07       	cpc	r27, r17
    13fa:	11 f4       	brne	.+4      	; 0x1400 <arpMatchIp+0x36>
		{
			DEBUG2("found entry"CRLF);
			// Found, return pointer to MAC address
			return(ArpCache[i].macaddress);
    13fc:	c9 01       	movw	r24, r18
    13fe:	0a c0       	rjmp	.+20     	; 0x1414 <arpMatchIp+0x4a>
    1400:	4f 5f       	subi	r20, 0xFF	; 255
    1402:	5f 4f       	sbci	r21, 0xFF	; 255
    1404:	24 5f       	subi	r18, 0xF4	; 244
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	3c 96       	adiw	r30, 0x0c	; 12
    140a:	48 30       	cpi	r20, 0x08	; 8
    140c:	51 05       	cpc	r21, r1
    140e:	69 f7       	brne	.-38     	; 0x13ea <arpMatchIp+0x20>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	08 95       	ret

0000141e <arpAdd>:
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	6b 01       	movw	r12, r22
    1434:	7c 01       	movw	r14, r24
    1436:	5a 01       	movw	r10, r20
    1438:	00 e0       	ldi	r16, 0x00	; 0
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	cf e5       	ldi	r28, 0x5F	; 95
    1440:	d6 e0       	ldi	r29, 0x06	; 6
    1442:	be 01       	movw	r22, r28
    1444:	66 5f       	subi	r22, 0xF6	; 246
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	14 2f       	mov	r17, r20
    144a:	88 81       	ld	r24, Y
    144c:	99 81       	ldd	r25, Y+1	; 0x01
    144e:	aa 81       	ldd	r26, Y+2	; 0x02
    1450:	bb 81       	ldd	r27, Y+3	; 0x03
    1452:	c8 16       	cp	r12, r24
    1454:	d9 06       	cpc	r13, r25
    1456:	ea 06       	cpc	r14, r26
    1458:	fb 06       	cpc	r15, r27
    145a:	31 f4       	brne	.+12     	; 0x1468 <arpAdd+0x4a>
    145c:	88 ec       	ldi	r24, 0xC8	; 200
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	fb 01       	movw	r30, r22
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	80 83       	st	Z, r24
    1466:	40 c0       	rjmp	.+128    	; 0x14e8 <arpAdd+0xca>
    1468:	80 2f       	mov	r24, r16
    146a:	99 27       	eor	r25, r25
    146c:	fc 01       	movw	r30, r24
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	e8 0f       	add	r30, r24
    1474:	f9 1f       	adc	r31, r25
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	e1 5a       	subi	r30, 0xA1	; 161
    1480:	f9 4f       	sbci	r31, 0xF9	; 249
    1482:	2a 85       	ldd	r18, Y+10	; 0x0a
    1484:	3b 85       	ldd	r19, Y+11	; 0x0b
    1486:	82 85       	ldd	r24, Z+10	; 0x0a
    1488:	93 85       	ldd	r25, Z+11	; 0x0b
    148a:	28 17       	cp	r18, r24
    148c:	39 07       	cpc	r19, r25
    148e:	08 f4       	brcc	.+2      	; 0x1492 <arpAdd+0x74>
    1490:	04 2f       	mov	r16, r20
    1492:	81 2f       	mov	r24, r17
    1494:	8f 5f       	subi	r24, 0xFF	; 255
    1496:	4f 5f       	subi	r20, 0xFF	; 255
    1498:	5f 4f       	sbci	r21, 0xFF	; 255
    149a:	64 5f       	subi	r22, 0xF4	; 244
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	2c 96       	adiw	r28, 0x0c	; 12
    14a0:	48 30       	cpi	r20, 0x08	; 8
    14a2:	51 05       	cpc	r21, r1
    14a4:	89 f6       	brne	.-94     	; 0x1448 <arpAdd+0x2a>
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	f9 f4       	brne	.+62     	; 0x14e8 <arpAdd+0xca>
    14aa:	20 2f       	mov	r18, r16
    14ac:	33 27       	eor	r19, r19
    14ae:	c9 01       	movw	r24, r18
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	82 0f       	add	r24, r18
    14b6:	93 1f       	adc	r25, r19
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	8c 01       	movw	r16, r24
    14c2:	01 5a       	subi	r16, 0xA1	; 161
    14c4:	19 4f       	sbci	r17, 0xF9	; 249
    14c6:	f8 01       	movw	r30, r16
    14c8:	c0 82       	st	Z, r12
    14ca:	d1 82       	std	Z+1, r13	; 0x01
    14cc:	e2 82       	std	Z+2, r14	; 0x02
    14ce:	f3 82       	std	Z+3, r15	; 0x03
    14d0:	46 e0       	ldi	r20, 0x06	; 6
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	b5 01       	movw	r22, r10
    14d6:	8d 59       	subi	r24, 0x9D	; 157
    14d8:	99 4f       	sbci	r25, 0xF9	; 249
    14da:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    14de:	88 ec       	ldi	r24, 0xC8	; 200
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	f8 01       	movw	r30, r16
    14e4:	93 87       	std	Z+11, r25	; 0x0b
    14e6:	82 87       	std	Z+10, r24	; 0x0a
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	df 90       	pop	r13
    14f6:	cf 90       	pop	r12
    14f8:	bf 90       	pop	r11
    14fa:	af 90       	pop	r10
    14fc:	08 95       	ret

000014fe <arpSetAddress>:
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	7b 01       	movw	r14, r22
    1508:	8c 01       	movw	r16, r24
    150a:	ba 01       	movw	r22, r20
    150c:	46 e0       	ldi	r20, 0x06	; 6
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	83 ec       	ldi	r24, 0xC3	; 195
    1512:	96 e0       	ldi	r25, 0x06	; 6
    1514:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    1518:	e0 92 bf 06 	sts	0x06BF, r14
    151c:	f0 92 c0 06 	sts	0x06C0, r15
    1520:	00 93 c1 06 	sts	0x06C1, r16
    1524:	10 93 c2 06 	sts	0x06C2, r17
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	08 95       	ret

00001532 <arpRequest>:
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	aa 97       	sbiw	r28, 0x2a	; 42
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	7c 01       	movw	r14, r24
    1550:	03 ec       	ldi	r16, 0xC3	; 195
    1552:	16 e0       	ldi	r17, 0x06	; 6
    1554:	46 e0       	ldi	r20, 0x06	; 6
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	b8 01       	movw	r22, r16
    155a:	ce 01       	movw	r24, r28
    155c:	07 96       	adiw	r24, 0x07	; 7
    155e:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    1562:	46 e0       	ldi	r20, 0x06	; 6
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	b8 01       	movw	r22, r16
    1568:	ce 01       	movw	r24, r28
    156a:	47 96       	adiw	r24, 0x17	; 23
    156c:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	8e 83       	std	Y+6, r24	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
    1576:	8c 83       	std	Y+4, r24	; 0x04
    1578:	8b 83       	std	Y+3, r24	; 0x03
    157a:	8a 83       	std	Y+2, r24	; 0x02
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	88 e0       	ldi	r24, 0x08	; 8
    1580:	96 e0       	ldi	r25, 0x06	; 6
    1582:	9e 87       	std	Y+14, r25	; 0x0e
    1584:	8d 87       	std	Y+13, r24	; 0x0d
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	31 e0       	ldi	r19, 0x01	; 1
    158a:	38 8b       	std	Y+16, r19	; 0x10
    158c:	2f 87       	std	Y+15, r18	; 0x0f
    158e:	88 e0       	ldi	r24, 0x08	; 8
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	9a 8b       	std	Y+18, r25	; 0x12
    1594:	89 8b       	std	Y+17, r24	; 0x11
    1596:	86 e0       	ldi	r24, 0x06	; 6
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	84 e0       	ldi	r24, 0x04	; 4
    159c:	8c 8b       	std	Y+20, r24	; 0x14
    159e:	3e 8b       	std	Y+22, r19	; 0x16
    15a0:	2d 8b       	std	Y+21, r18	; 0x15
    15a2:	80 91 bf 06 	lds	r24, 0x06BF
    15a6:	90 91 c0 06 	lds	r25, 0x06C0
    15aa:	a0 91 c1 06 	lds	r26, 0x06C1
    15ae:	b0 91 c2 06 	lds	r27, 0x06C2
    15b2:	8d 8f       	std	Y+29, r24	; 0x1d
    15b4:	9e 8f       	std	Y+30, r25	; 0x1e
    15b6:	af 8f       	std	Y+31, r26	; 0x1f
    15b8:	b8 a3       	std	Y+32, r27	; 0x20
    15ba:	f7 01       	movw	r30, r14
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	a2 81       	ldd	r26, Z+2	; 0x02
    15c2:	b3 81       	ldd	r27, Z+3	; 0x03
    15c4:	8f a3       	std	Y+39, r24	; 0x27
    15c6:	98 a7       	std	Y+40, r25	; 0x28
    15c8:	a9 a7       	std	Y+41, r26	; 0x29
    15ca:	ba a7       	std	Y+42, r27	; 0x2a
    15cc:	be 01       	movw	r22, r28
    15ce:	6f 5f       	subi	r22, 0xFF	; 255
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8a e2       	ldi	r24, 0x2A	; 42
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 16 02 	call	0x42c	; 0x42c <nicSend>
    15da:	aa 96       	adiw	r28, 0x2a	; 42
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	08 95       	ret

000015f4 <arpHandler>:
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ec 01       	movw	r28, r24
    1602:	7b 01       	movw	r14, r22
    1604:	8c 89       	ldd	r24, Y+20	; 0x14
    1606:	9d 89       	ldd	r25, Y+21	; 0x15
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	80 30       	cpi	r24, 0x00	; 0
    160c:	92 07       	cpc	r25, r18
    160e:	09 f0       	breq	.+2      	; 0x1612 <arpHandler+0x1e>
    1610:	4f c0       	rjmp	.+158    	; 0x16b0 <arpHandler+0xbc>
    1612:	2e a1       	ldd	r18, Y+38	; 0x26
    1614:	3f a1       	ldd	r19, Y+39	; 0x27
    1616:	48 a5       	ldd	r20, Y+40	; 0x28
    1618:	59 a5       	ldd	r21, Y+41	; 0x29
    161a:	80 91 bf 06 	lds	r24, 0x06BF
    161e:	90 91 c0 06 	lds	r25, 0x06C0
    1622:	a0 91 c1 06 	lds	r26, 0x06C1
    1626:	b0 91 c2 06 	lds	r27, 0x06C2
    162a:	28 17       	cp	r18, r24
    162c:	39 07       	cpc	r19, r25
    162e:	4a 07       	cpc	r20, r26
    1630:	5b 07       	cpc	r21, r27
    1632:	09 f0       	breq	.+2      	; 0x1636 <arpHandler+0x42>
    1634:	48 c0       	rjmp	.+144    	; 0x16c6 <arpHandler+0xd2>
    1636:	8e 01       	movw	r16, r28
    1638:	0a 5f       	subi	r16, 0xFA	; 250
    163a:	1f 4f       	sbci	r17, 0xFF	; 255
    163c:	46 e0       	ldi	r20, 0x06	; 6
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	b8 01       	movw	r22, r16
    1642:	ce 01       	movw	r24, r28
    1644:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    1648:	46 e0       	ldi	r20, 0x06	; 6
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	b8 01       	movw	r22, r16
    164e:	ce 01       	movw	r24, r28
    1650:	80 96       	adiw	r24, 0x20	; 32
    1652:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    1656:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1658:	9d 8d       	ldd	r25, Y+29	; 0x1d
    165a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    165c:	bf 8d       	ldd	r27, Y+31	; 0x1f
    165e:	8e a3       	std	Y+38, r24	; 0x26
    1660:	9f a3       	std	Y+39, r25	; 0x27
    1662:	a8 a7       	std	Y+40, r26	; 0x28
    1664:	b9 a7       	std	Y+41, r27	; 0x29
    1666:	80 91 bf 06 	lds	r24, 0x06BF
    166a:	90 91 c0 06 	lds	r25, 0x06C0
    166e:	a0 91 c1 06 	lds	r26, 0x06C1
    1672:	b0 91 c2 06 	lds	r27, 0x06C2
    1676:	8c 8f       	std	Y+28, r24	; 0x1c
    1678:	9d 8f       	std	Y+29, r25	; 0x1d
    167a:	ae 8f       	std	Y+30, r26	; 0x1e
    167c:	bf 8f       	std	Y+31, r27	; 0x1f
    167e:	46 e0       	ldi	r20, 0x06	; 6
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	63 ec       	ldi	r22, 0xC3	; 195
    1684:	76 e0       	ldi	r23, 0x06	; 6
    1686:	c8 01       	movw	r24, r16
    1688:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    168c:	46 e0       	ldi	r20, 0x06	; 6
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	63 ec       	ldi	r22, 0xC3	; 195
    1692:	76 e0       	ldi	r23, 0x06	; 6
    1694:	ce 01       	movw	r24, r28
    1696:	46 96       	adiw	r24, 0x16	; 22
    1698:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	92 e0       	ldi	r25, 0x02	; 2
    16a0:	9d 8b       	std	Y+21, r25	; 0x15
    16a2:	8c 8b       	std	Y+20, r24	; 0x14
    16a4:	be 01       	movw	r22, r28
    16a6:	c7 01       	movw	r24, r14
    16a8:	04 97       	sbiw	r24, 0x04	; 4
    16aa:	0e 94 16 02 	call	0x42c	; 0x42c <nicSend>
    16ae:	0b c0       	rjmp	.+22     	; 0x16c6 <arpHandler+0xd2>
    16b0:	80 50       	subi	r24, 0x00	; 0
    16b2:	92 40       	sbci	r25, 0x02	; 2
    16b4:	41 f4       	brne	.+16     	; 0x16c6 <arpHandler+0xd2>
    16b6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    16b8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    16ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16bc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16be:	66 96       	adiw	r28, 0x16	; 22
    16c0:	ae 01       	movw	r20, r28
    16c2:	0e 94 0f 0a 	call	0x141e	; 0x141e <arpAdd>
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	08 95       	ret

000016d4 <udpcmd>:
// udpcmd - handle UDP commands here, can be (B)ind, (C)lose, (G)et, (P)ut
//
U8
udpcmd(U8 *ptr)
{
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	28 97       	sbiw	r28, 0x08	; 8
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
U8		*tptr;
U16		sp,tp;
IPAddr 	ip;
U8		msg=MSG_ERROR;
	//
	// Dump Spaces
	//
	while(*ptr==' ')
			ptr++ ;
    16f0:	fc 01       	movw	r30, r24
    16f2:	21 91       	ld	r18, Z+
    16f4:	cf 01       	movw	r24, r30
    16f6:	20 32       	cpi	r18, 0x20	; 32
    16f8:	d9 f3       	breq	.-10     	; 0x16f0 <udpcmd+0x1c>

	switch(toupper(*ptr++))
    16fa:	8f 01       	movw	r16, r30
    16fc:	82 2f       	mov	r24, r18
    16fe:	99 27       	eor	r25, r25
    1700:	0e 94 af 24 	call	0x495e	; 0x495e <toupper>
    1704:	83 34       	cpi	r24, 0x43	; 67
    1706:	91 05       	cpc	r25, r1
    1708:	91 f1       	breq	.+100    	; 0x176e <udpcmd+0x9a>
    170a:	84 34       	cpi	r24, 0x44	; 68
    170c:	91 05       	cpc	r25, r1
    170e:	2c f4       	brge	.+10     	; 0x171a <udpcmd+0x46>
    1710:	82 34       	cpi	r24, 0x42	; 66
    1712:	91 05       	cpc	r25, r1
    1714:	09 f0       	breq	.+2      	; 0x1718 <udpcmd+0x44>
    1716:	2d c1       	rjmp	.+602    	; 0x1972 <udpcmd+0x29e>
    1718:	0a c0       	rjmp	.+20     	; 0x172e <udpcmd+0x5a>
    171a:	87 34       	cpi	r24, 0x47	; 71
    171c:	91 05       	cpc	r25, r1
    171e:	79 f1       	breq	.+94     	; 0x177e <udpcmd+0xaa>
    1720:	80 35       	cpi	r24, 0x50	; 80
    1722:	91 05       	cpc	r25, r1
    1724:	09 f0       	breq	.+2      	; 0x1728 <udpcmd+0x54>
    1726:	25 c1       	rjmp	.+586    	; 0x1972 <udpcmd+0x29e>
    1728:	86 c0       	rjmp	.+268    	; 0x1836 <udpcmd+0x162>
	{
	case	UDP_BIND:		// 'B'     
		while(*ptr==' ')
		ptr++ ;
    172a:	0f 5f       	subi	r16, 0xFF	; 255
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	f8 01       	movw	r30, r16
    1730:	80 81       	ld	r24, Z
    1732:	80 32       	cpi	r24, 0x20	; 32
    1734:	d1 f3       	breq	.-12     	; 0x172a <udpcmd+0x56>
		//
		// Parse port #
		//   
		tptr=ptr;
		if(tptr!=(U8 *)s2p(ptr,&tp))
    1736:	be 01       	movw	r22, r28
    1738:	6f 5f       	subi	r22, 0xFF	; 255
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	c8 01       	movw	r24, r16
    173e:	0e 94 35 06 	call	0xc6a	; 0xc6a <s2p>
    1742:	08 17       	cp	r16, r24
    1744:	19 07       	cpc	r17, r25
    1746:	09 f4       	brne	.+2      	; 0x174a <udpcmd+0x76>
    1748:	14 c1       	rjmp	.+552    	; 0x1972 <udpcmd+0x29e>
		{
			//
			// If udp_active exists close it first
			//
			if(udp_active)
    174a:	80 91 cd 06 	lds	r24, 0x06CD
    174e:	88 23       	and	r24, r24
    1750:	11 f0       	breq	.+4      	; 0x1756 <udpcmd+0x82>
				udp_close(udp_active);
    1752:	0e 94 03 1c 	call	0x3806	; 0x3806 <udp_close>
			//
			// Set socket to UDP mode and port number
			//  
			udp_active=udp_bind(tp, (void *)&udp_socket_rx);
    1756:	68 ec       	ldi	r22, 0xC8	; 200
    1758:	7c e0       	ldi	r23, 0x0C	; 12
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	0e 94 cf 1b 	call	0x379e	; 0x379e <udp_bind>
    1762:	80 93 cd 06 	sts	0x06CD, r24
			if(udp_active)
    1766:	88 23       	and	r24, r24
    1768:	41 f4       	brne	.+16     	; 0x177a <udpcmd+0xa6>
    176a:	8d e8       	ldi	r24, 0x8D	; 141
    176c:	03 c1       	rjmp	.+518    	; 0x1974 <udpcmd+0x2a0>
				msg=MSG_OK;
			else
				msg=MSG_SOCDOWN;
		}				            
		break;
	case	UDP_CLOSE:
		udp_close(udp_active);
    176e:	80 91 cd 06 	lds	r24, 0x06CD
    1772:	0e 94 03 1c 	call	0x3806	; 0x3806 <udp_close>
		udp_active=0;
    1776:	10 92 cd 06 	sts	0x06CD, r1
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	fb c0       	rjmp	.+502    	; 0x1974 <udpcmd+0x2a0>
		msg=MSG_OK;
		break;
	case	UDP_GET:
		//
		// If data dump it.
		//
		if(udp_ptr!=0)
    177e:	80 91 d4 06 	lds	r24, 0x06D4
    1782:	90 91 d5 06 	lds	r25, 0x06D5
    1786:	89 2b       	or	r24, r25
    1788:	11 f4       	brne	.+4      	; 0x178e <udpcmd+0xba>
    178a:	85 e8       	ldi	r24, 0x85	; 133
    178c:	f3 c0       	rjmp	.+486    	; 0x1974 <udpcmd+0x2a0>
		{
			msg=MSG_OK;
			displayMessage(msg);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <displayMessage>
			printIP(&udp_ip);
    1794:	8e ec       	ldi	r24, 0xCE	; 206
    1796:	96 e0       	ldi	r25, 0x06	; 6
    1798:	0e 94 f6 06 	call	0xdec	; 0xdec <printIP>
			CONSOLE_puts(CRLF);
    179c:	8c e1       	ldi	r24, 0x1C	; 28
    179e:	92 e0       	ldi	r25, 0x02	; 2
    17a0:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
			printShort(udp_sp);
    17a4:	80 91 d2 06 	lds	r24, 0x06D2
    17a8:	90 91 d3 06 	lds	r25, 0x06D3
    17ac:	0e 94 a7 07 	call	0xf4e	; 0xf4e <printShort>
			CONSOLE_puts(CRLF);
    17b0:	8c e1       	ldi	r24, 0x1C	; 28
    17b2:	92 e0       	ldi	r25, 0x02	; 2
    17b4:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
			printShort(udp_len);
    17b8:	80 91 cb 06 	lds	r24, 0x06CB
    17bc:	90 91 cc 06 	lds	r25, 0x06CC
    17c0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <printShort>
			CONSOLE_puts(CRLF);				
    17c4:	8c e1       	ldi	r24, 0x1C	; 28
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
			for(tp=0;tp<udp_len;tp++)
    17cc:	1a 82       	std	Y+2, r1	; 0x02
    17ce:	19 82       	std	Y+1, r1	; 0x01
    17d0:	0e c0       	rjmp	.+28     	; 0x17ee <udpcmd+0x11a>
				CONSOLE_putch(udp_ptr->data[tp]);
    17d2:	80 91 d4 06 	lds	r24, 0x06D4
    17d6:	90 91 d5 06 	lds	r25, 0x06D5
    17da:	e8 0f       	add	r30, r24
    17dc:	f9 1f       	adc	r31, r25
    17de:	82 85       	ldd	r24, Z+10	; 0x0a
    17e0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	80 91 cb 06 	lds	r24, 0x06CB
    17f6:	90 91 cc 06 	lds	r25, 0x06CC
    17fa:	e8 17       	cp	r30, r24
    17fc:	f9 07       	cpc	r31, r25
    17fe:	48 f3       	brcs	.-46     	; 0x17d2 <udpcmd+0xfe>
			CONSOLE_puts(CRLF);
    1800:	8c e1       	ldi	r24, 0x1C	; 28
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
			MEM_FreeBlock(udp_ptr);
    1808:	80 91 d4 06 	lds	r24, 0x06D4
    180c:	90 91 d5 06 	lds	r25, 0x06D5
    1810:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <MEM_FreeBlock>
			udp_ptr=0;
    1814:	10 92 d5 06 	sts	0x06D5, r1
    1818:	10 92 d4 06 	sts	0x06D4, r1
			udp_len=0;
    181c:	10 92 cc 06 	sts	0x06CC, r1
    1820:	10 92 cb 06 	sts	0x06CB, r1
			RI0_OFF();
    1824:	80 91 65 00 	lds	r24, 0x0065
    1828:	88 60       	ori	r24, 0x08	; 8
    182a:	80 93 65 00 	sts	0x0065, r24
    182e:	8e ef       	ldi	r24, 0xFE	; 254
    1830:	a1 c0       	rjmp	.+322    	; 0x1974 <udpcmd+0x2a0>
			msg=MSG_NULL;
		}
		else
			msg=MSG_NODATA;
		break;
	case	UDP_PUT:     
		while(*ptr==' ')
		ptr++ ;
    1832:	0f 5f       	subi	r16, 0xFF	; 255
    1834:	1f 4f       	sbci	r17, 0xFF	; 255
    1836:	f8 01       	movw	r30, r16
    1838:	80 81       	ld	r24, Z
    183a:	80 32       	cpi	r24, 0x20	; 32
    183c:	d1 f3       	breq	.-12     	; 0x1832 <udpcmd+0x15e>
		//
		// send a udp packet IRP server:dport:sport
		//
		if(0==isalnum(*ptr))
    183e:	99 27       	eor	r25, r25
    1840:	0e 94 93 24 	call	0x4926	; 0x4926 <isalnum>
    1844:	89 2b       	or	r24, r25
    1846:	09 f4       	brne	.+2      	; 0x184a <udpcmd+0x176>
    1848:	94 c0       	rjmp	.+296    	; 0x1972 <udpcmd+0x29e>
		{
			msg=MSG_ERROR;
		}
		else if(Get_IP(ptr,&ip))
    184a:	be 01       	movw	r22, r28
    184c:	6b 5f       	subi	r22, 0xFB	; 251
    184e:	7f 4f       	sbci	r23, 0xFF	; 255
    1850:	c8 01       	movw	r24, r16
    1852:	0e 94 81 11 	call	0x2302	; 0x2302 <Get_IP>
    1856:	88 23       	and	r24, r24
    1858:	21 f4       	brne	.+8      	; 0x1862 <udpcmd+0x18e>
    185a:	86 e9       	ldi	r24, 0x96	; 150
    185c:	8b c0       	rjmp	.+278    	; 0x1974 <udpcmd+0x2a0>
		{
			//
			// Advance pointer over name and extract port
			//
			while((*ptr!=':') && (*ptr!=0))
				ptr++;  
    185e:	0f 5f       	subi	r16, 0xFF	; 255
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	f8 01       	movw	r30, r16
    1864:	80 81       	ld	r24, Z
    1866:	8a 33       	cpi	r24, 0x3A	; 58
    1868:	11 f0       	breq	.+4      	; 0x186e <udpcmd+0x19a>
    186a:	88 23       	and	r24, r24
    186c:	c1 f7       	brne	.-16     	; 0x185e <udpcmd+0x18a>
			ptr++;
			//
			// Get Dest Port
			//
			ptr=s2p(ptr,&tp);
    186e:	be 01       	movw	r22, r28
    1870:	6f 5f       	subi	r22, 0xFF	; 255
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	c8 01       	movw	r24, r16
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	0e 94 35 06 	call	0xc6a	; 0xc6a <s2p>
    187c:	fc 01       	movw	r30, r24
			if(tp>1)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	02 97       	sbiw	r24, 0x02	; 2
    1884:	08 f4       	brcc	.+2      	; 0x1888 <udpcmd+0x1b4>
    1886:	75 c0       	rjmp	.+234    	; 0x1972 <udpcmd+0x29e>
			{           
				//
				// Get Source Port or use current allocaed or zero
				//
				if(':'==*ptr)
    1888:	80 81       	ld	r24, Z
    188a:	8a 33       	cpi	r24, 0x3A	; 58
    188c:	41 f4       	brne	.+16     	; 0x189e <udpcmd+0x1ca>
				{
					ptr++;
					// Get Source Port
                   	ptr=s2p(ptr,&sp);
    188e:	be 01       	movw	r22, r28
    1890:	6d 5f       	subi	r22, 0xFD	; 253
    1892:	7f 4f       	sbci	r23, 0xFF	; 255
    1894:	cf 01       	movw	r24, r30
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	0e 94 35 06 	call	0xc6a	; 0xc6a <s2p>
    189c:	06 c0       	rjmp	.+12     	; 0x18aa <udpcmd+0x1d6>
				}
				else
				{
					// use current socket or zero
					sp=udp_port(udp_active);
    189e:	80 91 cd 06 	lds	r24, 0x06CD
    18a2:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <udp_port>
    18a6:	9c 83       	std	Y+4, r25	; 0x04
    18a8:	8b 83       	std	Y+3, r24	; 0x03
				}
				//
				// Get Ready to Send
				//
				msg=MSG_OK;
				displayMessage(msg);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <displayMessage>
				//
				// collect byte to send
				//
				snd_count=0;
    18b0:	10 92 ec 06 	sts	0x06EC, r1
    18b4:	10 92 eb 06 	sts	0x06EB, r1
				TCPSendTime=TIMER_Get_Tick();  
    18b8:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    18bc:	90 93 e9 06 	sts	0x06E9, r25
    18c0:	80 93 e8 06 	sts	0x06E8, r24
				while(1)
				{
					poll_serial();
    18c4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <poll_serial>
					//
					// Check for full snd buffer
					//
					if(snd_count >= MAX_SND_SIZE)
    18c8:	80 91 eb 06 	lds	r24, 0x06EB
    18cc:	90 91 ec 06 	lds	r25, 0x06EC
    18d0:	80 38       	cpi	r24, 0x80	; 128
    18d2:	91 05       	cpc	r25, r1
    18d4:	80 f5       	brcc	.+96     	; 0x1936 <udpcmd+0x262>
						break;
					//
					// Check for timeout
					//
					if(abs(TIMER_Get_Tick()-TCPSendTime) > mm.UDPStreamTickTime)
    18d6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    18da:	20 91 e8 06 	lds	r18, 0x06E8
    18de:	30 91 e9 06 	lds	r19, 0x06E9
    18e2:	82 1b       	sub	r24, r18
    18e4:	93 0b       	sbc	r25, r19
    18e6:	9c 01       	movw	r18, r24
    18e8:	97 ff       	sbrs	r25, 7
    18ea:	03 c0       	rjmp	.+6      	; 0x18f2 <udpcmd+0x21e>
    18ec:	30 95       	com	r19
    18ee:	21 95       	neg	r18
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	80 91 79 03 	lds	r24, 0x0379
    18f6:	99 27       	eor	r25, r25
    18f8:	82 17       	cp	r24, r18
    18fa:	93 07       	cpc	r25, r19
    18fc:	e4 f0       	brlt	.+56     	; 0x1936 <udpcmd+0x262>
						break;
					if(CONSOLE_kbhit())
    18fe:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CONSOLE_kbhit>
    1902:	88 23       	and	r24, r24
    1904:	f9 f2       	breq	.-66     	; 0x18c4 <udpcmd+0x1f0>
					{
						DEBUG3("kbhit"CRLF);
						// get the char from the USER		
						msg=CONSOLE_getch();
    1906:	0e 94 55 08 	call	0x10aa	; 0x10aa <CONSOLE_getch>
    190a:	18 2f       	mov	r17, r24

						if(mm.IMMConfig & ECHO_STREAM)
    190c:	80 91 75 03 	lds	r24, 0x0375
    1910:	81 ff       	sbrs	r24, 1
    1912:	03 c0       	rjmp	.+6      	; 0x191a <udpcmd+0x246>
							CONSOLE_putch(msg);
    1914:	81 2f       	mov	r24, r17
    1916:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>

						// Store char in buffer
						snd_buff[snd_count++]=msg;
    191a:	80 91 eb 06 	lds	r24, 0x06EB
    191e:	90 91 ec 06 	lds	r25, 0x06EC
    1922:	fc 01       	movw	r30, r24
    1924:	ed 50       	subi	r30, 0x0D	; 13
    1926:	f9 4f       	sbci	r31, 0xF9	; 249
    1928:	10 83       	st	Z, r17
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	90 93 ec 06 	sts	0x06EC, r25
    1930:	80 93 eb 06 	sts	0x06EB, r24
    1934:	c1 cf       	rjmp	.-126    	; 0x18b8 <udpcmd+0x1e4>
						// Reset the time
						TCPSendTime=TIMER_Get_Tick();  
					}
				}
								
				if(udp_tx(ip, tp, sp, snd_buff, snd_count))
    1936:	e0 90 eb 06 	lds	r14, 0x06EB
    193a:	f0 90 ec 06 	lds	r15, 0x06EC
    193e:	2b 81       	ldd	r18, Y+3	; 0x03
    1940:	3c 81       	ldd	r19, Y+4	; 0x04
    1942:	49 81       	ldd	r20, Y+1	; 0x01
    1944:	5a 81       	ldd	r21, Y+2	; 0x02
    1946:	6d 81       	ldd	r22, Y+5	; 0x05
    1948:	7e 81       	ldd	r23, Y+6	; 0x06
    194a:	8f 81       	ldd	r24, Y+7	; 0x07
    194c:	98 85       	ldd	r25, Y+8	; 0x08
    194e:	03 ef       	ldi	r16, 0xF3	; 243
    1950:	16 e0       	ldi	r17, 0x06	; 6
    1952:	0e 94 86 1c 	call	0x390c	; 0x390c <udp_tx>
    1956:	89 2b       	or	r24, r25
    1958:	11 f4       	brne	.+4      	; 0x195e <udpcmd+0x28a>
    195a:	86 e0       	ldi	r24, 0x06	; 6
    195c:	05 c0       	rjmp	.+10     	; 0x1968 <udpcmd+0x294>
				{
					msg=MSG_OK;
					CONSOLE_puts(CRLF);
    195e:	8c e1       	ldi	r24, 0x1C	; 28
    1960:	92 e0       	ldi	r25, 0x02	; 2
    1962:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
    1966:	80 e0       	ldi	r24, 0x00	; 0
				}
				else
					msg=MSG_FAIL;
						
				snd_count=0;
    1968:	10 92 ec 06 	sts	0x06EC, r1
    196c:	10 92 eb 06 	sts	0x06EB, r1
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <udpcmd+0x2a0>
    1972:	84 e0       	ldi	r24, 0x04	; 4
			}
			else
				msg=MSG_ERROR;
		}
		else
		{
			msg=MSG_DNSFAIL;
		}		
		break;
	} // endcase
	return(msg);
}
    1974:	99 27       	eor	r25, r25
    1976:	28 96       	adiw	r28, 0x08	; 8
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	ff 90       	pop	r15
    198c:	ef 90       	pop	r14
    198e:	08 95       	ret

00001990 <udp_socket_rx>:
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	8c 01       	movw	r16, r24
    199e:	eb 01       	movw	r28, r22
    19a0:	80 91 d4 06 	lds	r24, 0x06D4
    19a4:	90 91 d5 06 	lds	r25, 0x06D5
    19a8:	89 2b       	or	r24, r25
    19aa:	09 f0       	breq	.+2      	; 0x19ae <udp_socket_rx+0x1e>
    19ac:	49 c0       	rjmp	.+146    	; 0x1a40 <udp_socket_rx+0xb0>
    19ae:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <MEM_GetBlock>
    19b2:	7c 01       	movw	r14, r24
    19b4:	90 93 d5 06 	sts	0x06D5, r25
    19b8:	80 93 d4 06 	sts	0x06D4, r24
    19bc:	89 2b       	or	r24, r25
    19be:	09 f4       	brne	.+2      	; 0x19c2 <udp_socket_rx+0x32>
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <udp_socket_rx+0xb0>
    19c2:	88 81       	ld	r24, Y
    19c4:	99 81       	ldd	r25, Y+1	; 0x01
    19c6:	29 2f       	mov	r18, r25
    19c8:	33 27       	eor	r19, r19
    19ca:	98 2f       	mov	r25, r24
    19cc:	88 27       	eor	r24, r24
    19ce:	28 2b       	or	r18, r24
    19d0:	39 2b       	or	r19, r25
    19d2:	30 93 d3 06 	sts	0x06D3, r19
    19d6:	20 93 d2 06 	sts	0x06D2, r18
    19da:	f8 01       	movw	r30, r16
    19dc:	84 85       	ldd	r24, Z+12	; 0x0c
    19de:	95 85       	ldd	r25, Z+13	; 0x0d
    19e0:	a6 85       	ldd	r26, Z+14	; 0x0e
    19e2:	b7 85       	ldd	r27, Z+15	; 0x0f
    19e4:	80 93 ce 06 	sts	0x06CE, r24
    19e8:	90 93 cf 06 	sts	0x06CF, r25
    19ec:	a0 93 d0 06 	sts	0x06D0, r26
    19f0:	b0 93 d1 06 	sts	0x06D1, r27
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	29 2f       	mov	r18, r25
    19fa:	33 27       	eor	r19, r19
    19fc:	98 2f       	mov	r25, r24
    19fe:	88 27       	eor	r24, r24
    1a00:	28 2b       	or	r18, r24
    1a02:	39 2b       	or	r19, r25
    1a04:	28 50       	subi	r18, 0x08	; 8
    1a06:	30 40       	sbci	r19, 0x00	; 0
    1a08:	30 93 cc 06 	sts	0x06CC, r19
    1a0c:	20 93 cb 06 	sts	0x06CB, r18
    1a10:	21 38       	cpi	r18, 0x81	; 129
    1a12:	31 05       	cpc	r19, r1
    1a14:	30 f0       	brcs	.+12     	; 0x1a22 <udp_socket_rx+0x92>
    1a16:	80 e8       	ldi	r24, 0x80	; 128
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	90 93 cc 06 	sts	0x06CC, r25
    1a1e:	80 93 cb 06 	sts	0x06CB, r24
    1a22:	40 91 cb 06 	lds	r20, 0x06CB
    1a26:	50 91 cc 06 	lds	r21, 0x06CC
    1a2a:	28 96       	adiw	r28, 0x08	; 8
    1a2c:	be 01       	movw	r22, r28
    1a2e:	c7 01       	movw	r24, r14
    1a30:	0a 96       	adiw	r24, 0x0a	; 10
    1a32:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    1a36:	80 91 65 00 	lds	r24, 0x0065
    1a3a:	87 7f       	andi	r24, 0xF7	; 247
    1a3c:	80 93 65 00 	sts	0x0065, r24
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	08 95       	ret

00001a4e <Checksum_16>:
//  
//*******************************************************************************
U16
Checksum_16(U16 start,U16 *data, U16 len)
{
    1a4e:	fb 01       	movw	r30, r22
U16				sum=~start;
    1a50:	9c 01       	movw	r18, r24
    1a52:	20 95       	com	r18
    1a54:	30 95       	com	r19
    1a56:	0c c0       	rjmp	.+24     	; 0x1a70 <Checksum_16+0x22>

	// Main Checksum Loop
	while(len > 1)
	{
		len-=2;
		sum += *data;
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	28 0f       	add	r18, r24
    1a5e:	39 1f       	adc	r19, r25
		if(sum < *data)
    1a60:	28 17       	cp	r18, r24
    1a62:	39 07       	cpc	r19, r25
    1a64:	10 f4       	brcc	.+4      	; 0x1a6a <Checksum_16+0x1c>
			sum++;		// Add in carry
    1a66:	2f 5f       	subi	r18, 0xFF	; 255
    1a68:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6a:	42 50       	subi	r20, 0x02	; 2
    1a6c:	50 40       	sbci	r21, 0x00	; 0
 		data++;
    1a6e:	32 96       	adiw	r30, 0x02	; 2
    1a70:	42 30       	cpi	r20, 0x02	; 2
    1a72:	51 05       	cpc	r21, r1
    1a74:	88 f7       	brcc	.-30     	; 0x1a58 <Checksum_16+0xa>
	}
	// Check for odd byte, if there handle it.
	if(len == 1) 
    1a76:	41 30       	cpi	r20, 0x01	; 1
    1a78:	51 05       	cpc	r21, r1
    1a7a:	51 f4       	brne	.+20     	; 0x1a90 <Checksum_16+0x42>
	{
		len=*data & 0xff;
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	90 70       	andi	r25, 0x00	; 0
		sum+=len;
    1a82:	28 0f       	add	r18, r24
    1a84:	39 1f       	adc	r19, r25
		if(sum<len)
    1a86:	28 17       	cp	r18, r24
    1a88:	39 07       	cpc	r19, r25
    1a8a:	10 f4       	brcc	.+4      	; 0x1a90 <Checksum_16+0x42>
			sum++;
    1a8c:	2f 5f       	subi	r18, 0xFF	; 255
    1a8e:	3f 4f       	sbci	r19, 0xFF	; 255
    }
  	// Return the one's complement
	return (~sum);
}
    1a90:	c9 01       	movw	r24, r18
    1a92:	80 95       	com	r24
    1a94:	90 95       	com	r25
    1a96:	08 95       	ret

00001a98 <Checksum>:

U16 Checksum(U16 start,U8 *addr, U16 count)
{
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	eb 01       	movw	r28, r22
    1a9e:	fa 01       	movw	r30, r20
U32				sum=~start;
    1aa0:	80 95       	com	r24
    1aa2:	90 95       	com	r25
    1aa4:	ac 01       	movw	r20, r24
    1aa6:	66 27       	eor	r22, r22
    1aa8:	77 27       	eor	r23, r23
    1aaa:	0e c0       	rjmp	.+28     	; 0x1ac8 <Checksum+0x30>

  // Main summing loop
  while(count > 1)
  {
    sum = sum + (*((U16 *) addr))++;
    1aac:	28 81       	ld	r18, Y
    1aae:	39 81       	ldd	r19, Y+1	; 0x01
    1ab0:	c9 01       	movw	r24, r18
    1ab2:	aa 27       	eor	r26, r26
    1ab4:	bb 27       	eor	r27, r27
    1ab6:	48 0f       	add	r20, r24
    1ab8:	59 1f       	adc	r21, r25
    1aba:	6a 1f       	adc	r22, r26
    1abc:	7b 1f       	adc	r23, r27
    1abe:	2f 5f       	subi	r18, 0xFF	; 255
    1ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac2:	39 83       	std	Y+1, r19	; 0x01
    1ac4:	28 83       	st	Y, r18
    count = count - 2;
    1ac6:	32 97       	sbiw	r30, 0x02	; 2
    1ac8:	e2 30       	cpi	r30, 0x02	; 2
    1aca:	f1 05       	cpc	r31, r1
    1acc:	78 f7       	brcc	.-34     	; 0x1aac <Checksum+0x14>
  }

  // Add left-over byte, if any
  if (count > 0)
    1ace:	ef 2b       	or	r30, r31
    1ad0:	61 f0       	breq	.+24     	; 0x1aea <Checksum+0x52>
    sum = sum + *((U8 *) addr);
    1ad2:	88 81       	ld	r24, Y
    1ad4:	48 0f       	add	r20, r24
    1ad6:	51 1d       	adc	r21, r1
    1ad8:	61 1d       	adc	r22, r1
    1ada:	71 1d       	adc	r23, r1
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <Checksum+0x52>

  // Fold 32-bit sum to 16 bits
  while (sum>>16)
    sum = (sum & 0xFFFF) + (sum >> 16);
    1ade:	60 70       	andi	r22, 0x00	; 0
    1ae0:	70 70       	andi	r23, 0x00	; 0
    1ae2:	48 0f       	add	r20, r24
    1ae4:	59 1f       	adc	r21, r25
    1ae6:	6a 1f       	adc	r22, r26
    1ae8:	7b 1f       	adc	r23, r27
    1aea:	cb 01       	movw	r24, r22
    1aec:	aa 27       	eor	r26, r26
    1aee:	bb 27       	eor	r27, r27
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	a1 05       	cpc	r26, r1
    1af4:	b1 05       	cpc	r27, r1
    1af6:	99 f7       	brne	.-26     	; 0x1ade <Checksum+0x46>
    1af8:	ca 01       	movw	r24, r20
    1afa:	80 95       	com	r24
    1afc:	90 95       	com	r25
    1afe:	df 91       	pop	r29
    1b00:	cf 91       	pop	r28
    1b02:	08 95       	ret

00001b04 <ICMP_Echo_Callback>:

  return(~sum);
}





void
ICMP_Echo_Callback(void (*callback)(struct ip_h *header,ICMP *data, U16 len))
{
    1b04:	90 93 d7 06 	sts	0x06D7, r25
    1b08:	80 93 d6 06 	sts	0x06D6, r24
    1b0c:	08 95       	ret

00001b0e <ICMP_Echo_Terminate>:
	ICMP_Callback=callback;
}

void
ICMP_Echo_Terminate()
{
    1b0e:	10 92 d7 06 	sts	0x06D7, r1
    1b12:	10 92 d6 06 	sts	0x06D6, r1
    1b16:	08 95       	ret

00001b18 <ip_send>:
    1b18:	2f 92       	push	r2
    1b1a:	3f 92       	push	r3
    1b1c:	4f 92       	push	r4
    1b1e:	5f 92       	push	r5
    1b20:	7f 92       	push	r7
    1b22:	8f 92       	push	r8
    1b24:	9f 92       	push	r9
    1b26:	af 92       	push	r10
    1b28:	bf 92       	push	r11
    1b2a:	cf 92       	push	r12
    1b2c:	df 92       	push	r13
    1b2e:	ef 92       	push	r14
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
    1b3e:	27 97       	sbiw	r28, 0x07	; 7
    1b40:	0f b6       	in	r0, 0x3f	; 63
    1b42:	f8 94       	cli
    1b44:	de bf       	out	0x3e, r29	; 62
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	cd bf       	out	0x3d, r28	; 61
    1b4a:	6c 01       	movw	r12, r24
    1b4c:	1b 01       	movw	r2, r22
    1b4e:	4a 01       	movw	r8, r20
    1b50:	29 01       	movw	r4, r18
    1b52:	62 ef       	ldi	r22, 0xF2	; 242
    1b54:	a6 2e       	mov	r10, r22
    1b56:	6f ef       	ldi	r22, 0xFF	; 255
    1b58:	b6 2e       	mov	r11, r22
    1b5a:	a8 0e       	add	r10, r24
    1b5c:	b9 1e       	adc	r11, r25
    1b5e:	88 e0       	ldi	r24, 0x08	; 8
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	f5 01       	movw	r30, r10
    1b64:	95 87       	std	Z+13, r25	; 0x0d
    1b66:	84 87       	std	Z+12, r24	; 0x0c
    1b68:	85 e4       	ldi	r24, 0x45	; 69
    1b6a:	f6 01       	movw	r30, r12
    1b6c:	80 83       	st	Z, r24
    1b6e:	80 91 82 03 	lds	r24, 0x0382
    1b72:	81 83       	std	Z+1, r24	; 0x01
    1b74:	c9 01       	movw	r24, r18
    1b76:	84 0f       	add	r24, r20
    1b78:	95 1f       	adc	r25, r21
    1b7a:	29 2f       	mov	r18, r25
    1b7c:	33 27       	eor	r19, r19
    1b7e:	98 2f       	mov	r25, r24
    1b80:	88 27       	eor	r24, r24
    1b82:	28 2b       	or	r18, r24
    1b84:	39 2b       	or	r19, r25
    1b86:	33 83       	std	Z+3, r19	; 0x03
    1b88:	22 83       	std	Z+2, r18	; 0x02
    1b8a:	80 91 e0 06 	lds	r24, 0x06E0
    1b8e:	90 91 e1 06 	lds	r25, 0x06E1
    1b92:	95 83       	std	Z+5, r25	; 0x05
    1b94:	84 83       	std	Z+4, r24	; 0x04
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	90 93 e1 06 	sts	0x06E1, r25
    1b9c:	80 93 e0 06 	sts	0x06E0, r24
    1ba0:	80 91 81 03 	lds	r24, 0x0381
    1ba4:	80 87       	std	Z+8, r24	; 0x08
    1ba6:	17 82       	std	Z+7, r1	; 0x07
    1ba8:	16 82       	std	Z+6, r1	; 0x06
    1baa:	80 91 8a 03 	lds	r24, 0x038A
    1bae:	90 91 8b 03 	lds	r25, 0x038B
    1bb2:	a0 91 8c 03 	lds	r26, 0x038C
    1bb6:	b0 91 8d 03 	lds	r27, 0x038D
    1bba:	84 87       	std	Z+12, r24	; 0x0c
    1bbc:	95 87       	std	Z+13, r25	; 0x0d
    1bbe:	a6 87       	std	Z+14, r26	; 0x0e
    1bc0:	b7 87       	std	Z+15, r27	; 0x0f
    1bc2:	13 86       	std	Z+11, r1	; 0x0b
    1bc4:	12 86       	std	Z+10, r1	; 0x0a
    1bc6:	44 e1       	ldi	r20, 0x14	; 20
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	b6 01       	movw	r22, r12
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    1bd4:	f6 01       	movw	r30, r12
    1bd6:	93 87       	std	Z+11, r25	; 0x0b
    1bd8:	82 87       	std	Z+10, r24	; 0x0a
    1bda:	77 24       	eor	r7, r7
    1bdc:	1f 82       	std	Y+7, r1	; 0x07
    1bde:	f6 01       	movw	r30, r12
    1be0:	e0 88       	ldd	r14, Z+16	; 0x10
    1be2:	f1 88       	ldd	r15, Z+17	; 0x11
    1be4:	02 89       	ldd	r16, Z+18	; 0x12
    1be6:	13 89       	ldd	r17, Z+19	; 0x13
    1be8:	ff ef       	ldi	r31, 0xFF	; 255
    1bea:	ef 16       	cp	r14, r31
    1bec:	ff ef       	ldi	r31, 0xFF	; 255
    1bee:	ff 06       	cpc	r15, r31
    1bf0:	ff ef       	ldi	r31, 0xFF	; 255
    1bf2:	0f 07       	cpc	r16, r31
    1bf4:	ff ef       	ldi	r31, 0xFF	; 255
    1bf6:	1f 07       	cpc	r17, r31
    1bf8:	59 f4       	brne	.+22     	; 0x1c10 <ip_send+0xf8>
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	8b 83       	std	Y+3, r24	; 0x03
    1c02:	8c 83       	std	Y+4, r24	; 0x04
    1c04:	8d 83       	std	Y+5, r24	; 0x05
    1c06:	8e 83       	std	Y+6, r24	; 0x06
    1c08:	be 01       	movw	r22, r28
    1c0a:	6f 5f       	subi	r22, 0xFF	; 255
    1c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0e:	41 c0       	rjmp	.+130    	; 0x1c92 <ip_send+0x17a>
    1c10:	80 91 8e 03 	lds	r24, 0x038E
    1c14:	90 91 8f 03 	lds	r25, 0x038F
    1c18:	a0 91 90 03 	lds	r26, 0x0390
    1c1c:	b0 91 91 03 	lds	r27, 0x0391
    1c20:	e8 22       	and	r14, r24
    1c22:	f9 22       	and	r15, r25
    1c24:	0a 23       	and	r16, r26
    1c26:	1b 23       	and	r17, r27
    1c28:	20 91 8a 03 	lds	r18, 0x038A
    1c2c:	30 91 8b 03 	lds	r19, 0x038B
    1c30:	40 91 8c 03 	lds	r20, 0x038C
    1c34:	50 91 8d 03 	lds	r21, 0x038D
    1c38:	82 23       	and	r24, r18
    1c3a:	93 23       	and	r25, r19
    1c3c:	a4 23       	and	r26, r20
    1c3e:	b5 23       	and	r27, r21
    1c40:	e8 16       	cp	r14, r24
    1c42:	f9 06       	cpc	r15, r25
    1c44:	0a 07       	cpc	r16, r26
    1c46:	1b 07       	cpc	r17, r27
    1c48:	31 f4       	brne	.+12     	; 0x1c56 <ip_send+0x13e>
    1c4a:	c6 01       	movw	r24, r12
    1c4c:	40 96       	adiw	r24, 0x10	; 16
    1c4e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <arpMatchIp>
    1c52:	bc 01       	movw	r22, r24
    1c54:	07 c0       	rjmp	.+14     	; 0x1c64 <ip_send+0x14c>
    1c56:	82 e9       	ldi	r24, 0x92	; 146
    1c58:	93 e0       	ldi	r25, 0x03	; 3
    1c5a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <arpMatchIp>
    1c5e:	bc 01       	movw	r22, r24
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	8f 83       	std	Y+7, r24	; 0x07
    1c64:	61 15       	cp	r22, r1
    1c66:	71 05       	cpc	r23, r1
    1c68:	a1 f4       	brne	.+40     	; 0x1c92 <ip_send+0x17a>
    1c6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c6c:	91 30       	cpi	r25, 0x01	; 1
    1c6e:	19 f4       	brne	.+6      	; 0x1c76 <ip_send+0x15e>
    1c70:	82 e9       	ldi	r24, 0x92	; 146
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <ip_send+0x162>
    1c76:	c6 01       	movw	r24, r12
    1c78:	40 96       	adiw	r24, 0x10	; 16
    1c7a:	0e 94 99 0a 	call	0x1532	; 0x1532 <arpRequest>
    1c7e:	8e e1       	ldi	r24, 0x1E	; 30
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
    1c86:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <poll_serial>
    1c8a:	ef ef       	ldi	r30, 0xFF	; 255
    1c8c:	7e 16       	cp	r7, r30
    1c8e:	e1 f0       	breq	.+56     	; 0x1cc8 <ip_send+0x1b0>
    1c90:	19 c0       	rjmp	.+50     	; 0x1cc4 <ip_send+0x1ac>
    1c92:	46 e0       	ldi	r20, 0x06	; 6
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	c5 01       	movw	r24, r10
    1c98:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    1c9c:	46 e0       	ldi	r20, 0x06	; 6
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	64 e8       	ldi	r22, 0x84	; 132
    1ca2:	73 e0       	ldi	r23, 0x03	; 3
    1ca4:	c5 01       	movw	r24, r10
    1ca6:	06 96       	adiw	r24, 0x06	; 6
    1ca8:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    1cac:	8e e0       	ldi	r24, 0x0E	; 14
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	88 0e       	add	r8, r24
    1cb2:	99 1e       	adc	r9, r25
    1cb4:	92 01       	movw	r18, r4
    1cb6:	a1 01       	movw	r20, r2
    1cb8:	b4 01       	movw	r22, r8
    1cba:	c5 01       	movw	r24, r10
    1cbc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <nicSendMulti>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	03 c0       	rjmp	.+6      	; 0x1cca <ip_send+0x1b2>
    1cc4:	7a 94       	dec	r7
    1cc6:	8b cf       	rjmp	.-234    	; 0x1bde <ip_send+0xc6>
    1cc8:	8f ef       	ldi	r24, 0xFF	; 255
    1cca:	99 27       	eor	r25, r25
    1ccc:	87 fd       	sbrc	r24, 7
    1cce:	90 95       	com	r25
    1cd0:	27 96       	adiw	r28, 0x07	; 7
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	ff 90       	pop	r15
    1ce6:	ef 90       	pop	r14
    1ce8:	df 90       	pop	r13
    1cea:	cf 90       	pop	r12
    1cec:	bf 90       	pop	r11
    1cee:	af 90       	pop	r10
    1cf0:	9f 90       	pop	r9
    1cf2:	8f 90       	pop	r8
    1cf4:	7f 90       	pop	r7
    1cf6:	5f 90       	pop	r5
    1cf8:	4f 90       	pop	r4
    1cfa:	3f 90       	pop	r3
    1cfc:	2f 90       	pop	r2
    1cfe:	08 95       	ret

00001d00 <icmp_upcall>:
	ICMP_Callback=0;
}


U8
ICMP_Send_Ping(IPAddr *dest_ip, U16 len)
{
MEMBLOCK	*memblock;
IP			*ip;
ICMP		*icmp;
U16			i;

	if(len>64)
		len=64;

	memblock=MEM_GetBlock();
	if(memblock)
	{
		ip=(IP *)(memblock->data+sizeof(MAC));

		ip->protocol=PROT_ICMP;
		ip->source_ip.ip32=mm.our_ipaddr.ip32;
		ip->dest_ip.ip32=dest_ip->ip32;
		ip->checksum=0;

		// Build ECHO Request packet
		icmp=(ICMP *)ip->transport;
		icmp->type=ICMP_ECHO_REQUEST;
		icmp->code=0;
		icmp->checksum=0x0000;
		icmp->id=1;
		icmp->seq=1;

		for(i=0;i<len;i++)
			icmp->data[i]=(i&0xff);

		icmp->checksum=Checksum_16((U16)0, (U16 *)icmp, (U16)(len+sizeof(ICMP)) );
		
		ip_send(ip,(U8 *)0,(U16)(sizeof(IP)+sizeof(ICMP)+len),0);	// IP_Send(header,data,len);

		MEM_FreeBlock(memblock);
		return(1);
	}
	return(0);
}


//-----------------------------------------------------------------------------
// icmp_upcall()
//-----------------------------------------------------------------------------
void
icmp_upcall(IP *ip, ICMP *icmp, U16 len)
{
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	ec 01       	movw	r28, r24
    1d06:	fb 01       	movw	r30, r22
//U8		*m;

	//
	// Check the ICMP checksum (we can omit this if we want)
	//

	switch(icmp->type)
    1d08:	80 81       	ld	r24, Z
    1d0a:	88 23       	and	r24, r24
    1d0c:	19 f0       	breq	.+6      	; 0x1d14 <icmp_upcall+0x14>
    1d0e:	88 30       	cpi	r24, 0x08	; 8
    1d10:	09 f5       	brne	.+66     	; 0x1d54 <icmp_upcall+0x54>
    1d12:	0b c0       	rjmp	.+22     	; 0x1d2a <icmp_upcall+0x2a>
	{
    case	ICMP_ECHO_REPLY:
			// Allow callback here, call it if defined.
			if((void *)ICMP_Callback!=0)
    1d14:	20 91 d6 06 	lds	r18, 0x06D6
    1d18:	30 91 d7 06 	lds	r19, 0x06D7
    1d1c:	21 15       	cp	r18, r1
    1d1e:	31 05       	cpc	r19, r1
    1d20:	c9 f0       	breq	.+50     	; 0x1d54 <icmp_upcall+0x54>
			{
				ICMP_Callback(ip,icmp,len);
    1d22:	ce 01       	movw	r24, r28
    1d24:	f9 01       	movw	r30, r18
    1d26:	09 95       	icall
    1d28:	15 c0       	rjmp	.+42     	; 0x1d54 <icmp_upcall+0x54>
			}
			break;
    case	ICMP_ECHO_REQUEST:
		
			DEBUG2("Build reply"CRLF);
			//
			// Build reply inline
			//
			icmp->type=ICMP_ECHO_REPLY;
    1d2a:	10 82       	st	Z, r1
			icmp->checksum+=0x0008;				// Fixup checksum
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	08 96       	adiw	r24, 0x08	; 8
    1d32:	93 83       	std	Z+3, r25	; 0x03
    1d34:	82 83       	std	Z+2, r24	; 0x02
			//
			// Get dest IP, source will be filled in later
			ip->dest_ip.ip32=ip->source_ip.ip32;
    1d36:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d38:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d3a:	ae 85       	ldd	r26, Y+14	; 0x0e
    1d3c:	bf 85       	ldd	r27, Y+15	; 0x0f
    1d3e:	88 8b       	std	Y+16, r24	; 0x10
    1d40:	99 8b       	std	Y+17, r25	; 0x11
    1d42:	aa 8b       	std	Y+18, r26	; 0x12
    1d44:	bb 8b       	std	Y+19, r27	; 0x13
			//
			//
			//
			//ip_send(&ip->dest_ip, PROT_ICMP, ip, len);			
			//
			// Whole packet is in IP header spot, don't send data spot
			//
			ip_send(ip, NULL, len, 0);
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	ce 01       	movw	r24, r28
    1d50:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <ip_send>
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	08 95       	ret

00001d5a <ICMP_Send_Ping>:
    1d5a:	cf 92       	push	r12
    1d5c:	df 92       	push	r13
    1d5e:	ef 92       	push	r14
    1d60:	ff 92       	push	r15
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	ec 01       	movw	r28, r24
    1d6c:	8b 01       	movw	r16, r22
    1d6e:	61 34       	cpi	r22, 0x41	; 65
    1d70:	71 05       	cpc	r23, r1
    1d72:	10 f0       	brcs	.+4      	; 0x1d78 <ICMP_Send_Ping+0x1e>
    1d74:	00 e4       	ldi	r16, 0x40	; 64
    1d76:	10 e0       	ldi	r17, 0x00	; 0
    1d78:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <MEM_GetBlock>
    1d7c:	6c 01       	movw	r12, r24
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	19 f4       	brne	.+6      	; 0x1d88 <ICMP_Send_Ping+0x2e>
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	4f c0       	rjmp	.+158    	; 0x1e26 <ICMP_Send_Ping+0xcc>
    1d88:	78 e1       	ldi	r23, 0x18	; 24
    1d8a:	e7 2e       	mov	r14, r23
    1d8c:	f1 2c       	mov	r15, r1
    1d8e:	e8 0e       	add	r14, r24
    1d90:	f9 1e       	adc	r15, r25
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	f7 01       	movw	r30, r14
    1d96:	81 87       	std	Z+9, r24	; 0x09
    1d98:	80 91 8a 03 	lds	r24, 0x038A
    1d9c:	90 91 8b 03 	lds	r25, 0x038B
    1da0:	a0 91 8c 03 	lds	r26, 0x038C
    1da4:	b0 91 8d 03 	lds	r27, 0x038D
    1da8:	84 87       	std	Z+12, r24	; 0x0c
    1daa:	95 87       	std	Z+13, r25	; 0x0d
    1dac:	a6 87       	std	Z+14, r26	; 0x0e
    1dae:	b7 87       	std	Z+15, r27	; 0x0f
    1db0:	88 81       	ld	r24, Y
    1db2:	99 81       	ldd	r25, Y+1	; 0x01
    1db4:	aa 81       	ldd	r26, Y+2	; 0x02
    1db6:	bb 81       	ldd	r27, Y+3	; 0x03
    1db8:	80 8b       	std	Z+16, r24	; 0x10
    1dba:	91 8b       	std	Z+17, r25	; 0x11
    1dbc:	a2 8b       	std	Z+18, r26	; 0x12
    1dbe:	b3 8b       	std	Z+19, r27	; 0x13
    1dc0:	13 86       	std	Z+11, r1	; 0x0b
    1dc2:	12 86       	std	Z+10, r1	; 0x0a
    1dc4:	e6 01       	movw	r28, r12
    1dc6:	ac 96       	adiw	r28, 0x2c	; 44
    1dc8:	88 e0       	ldi	r24, 0x08	; 8
    1dca:	f6 01       	movw	r30, r12
    1dcc:	84 a7       	std	Z+44, r24	; 0x2c
    1dce:	19 82       	std	Y+1, r1	; 0x01
    1dd0:	1b 82       	std	Y+3, r1	; 0x03
    1dd2:	1a 82       	std	Y+2, r1	; 0x02
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9d 83       	std	Y+5, r25	; 0x05
    1dda:	8c 83       	std	Y+4, r24	; 0x04
    1ddc:	9f 83       	std	Y+7, r25	; 0x07
    1dde:	8e 83       	std	Y+6, r24	; 0x06
    1de0:	fe 01       	movw	r30, r28
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <ICMP_Send_Ping+0x92>
    1de8:	87 83       	std	Z+7, r24	; 0x07
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	31 96       	adiw	r30, 0x01	; 1
    1dee:	80 17       	cp	r24, r16
    1df0:	91 07       	cpc	r25, r17
    1df2:	d1 f7       	brne	.-12     	; 0x1de8 <ICMP_Send_Ping+0x8e>
    1df4:	08 5f       	subi	r16, 0xF8	; 248
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	a8 01       	movw	r20, r16
    1dfa:	be 01       	movw	r22, r28
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    1e04:	9b 83       	std	Y+3, r25	; 0x03
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    1e08:	0c 5e       	subi	r16, 0xEC	; 236
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	a8 01       	movw	r20, r16
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	70 e0       	ldi	r23, 0x00	; 0
    1e16:	c7 01       	movw	r24, r14
    1e18:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <ip_send>
    1e1c:	c6 01       	movw	r24, r12
    1e1e:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <MEM_FreeBlock>
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	df 90       	pop	r13
    1e34:	cf 90       	pop	r12
    1e36:	08 95       	ret

00001e38 <ip_upcall>:
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	ec 01       	movw	r28, r24
    1e3e:	44 e1       	ldi	r20, 0x14	; 20
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	bc 01       	movw	r22, r24
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    1e4c:	89 2b       	or	r24, r25
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <ip_upcall+0x1a>
    1e50:	61 c0       	rjmp	.+194    	; 0x1f14 <ip_upcall+0xdc>
    1e52:	20 91 8a 03 	lds	r18, 0x038A
    1e56:	30 91 8b 03 	lds	r19, 0x038B
    1e5a:	40 91 8c 03 	lds	r20, 0x038C
    1e5e:	50 91 8d 03 	lds	r21, 0x038D
    1e62:	21 15       	cp	r18, r1
    1e64:	31 05       	cpc	r19, r1
    1e66:	41 05       	cpc	r20, r1
    1e68:	51 05       	cpc	r21, r1
    1e6a:	91 f0       	breq	.+36     	; 0x1e90 <ip_upcall+0x58>
    1e6c:	88 89       	ldd	r24, Y+16	; 0x10
    1e6e:	99 89       	ldd	r25, Y+17	; 0x11
    1e70:	aa 89       	ldd	r26, Y+18	; 0x12
    1e72:	bb 89       	ldd	r27, Y+19	; 0x13
    1e74:	8f 3f       	cpi	r24, 0xFF	; 255
    1e76:	6f ef       	ldi	r22, 0xFF	; 255
    1e78:	96 07       	cpc	r25, r22
    1e7a:	6f ef       	ldi	r22, 0xFF	; 255
    1e7c:	a6 07       	cpc	r26, r22
    1e7e:	6f ef       	ldi	r22, 0xFF	; 255
    1e80:	b6 07       	cpc	r27, r22
    1e82:	31 f0       	breq	.+12     	; 0x1e90 <ip_upcall+0x58>
    1e84:	82 17       	cp	r24, r18
    1e86:	93 07       	cpc	r25, r19
    1e88:	a4 07       	cpc	r26, r20
    1e8a:	b5 07       	cpc	r27, r21
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <ip_upcall+0x58>
    1e8e:	42 c0       	rjmp	.+132    	; 0x1f14 <ip_upcall+0xdc>
    1e90:	8e 81       	ldd	r24, Y+6	; 0x06
    1e92:	9f 81       	ldd	r25, Y+7	; 0x07
    1e94:	98 2f       	mov	r25, r24
    1e96:	88 27       	eor	r24, r24
    1e98:	95 fd       	sbrc	r25, 5
    1e9a:	3c c0       	rjmp	.+120    	; 0x1f14 <ip_upcall+0xdc>
    1e9c:	ae 01       	movw	r20, r28
    1e9e:	48 50       	subi	r20, 0x08	; 8
    1ea0:	50 40       	sbci	r21, 0x00	; 0
    1ea2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ea4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ea6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ea8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eaa:	0e 94 0f 0a 	call	0x141e	; 0x141e <arpAdd>
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	86 30       	cpi	r24, 0x06	; 6
    1eb2:	11 f1       	breq	.+68     	; 0x1ef8 <ip_upcall+0xc0>
    1eb4:	81 31       	cpi	r24, 0x11	; 17
    1eb6:	89 f0       	breq	.+34     	; 0x1eda <ip_upcall+0xa2>
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	61 f5       	brne	.+88     	; 0x1f14 <ip_upcall+0xdc>
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec0:	49 2f       	mov	r20, r25
    1ec2:	55 27       	eor	r21, r21
    1ec4:	98 2f       	mov	r25, r24
    1ec6:	88 27       	eor	r24, r24
    1ec8:	48 2b       	or	r20, r24
    1eca:	59 2b       	or	r21, r25
    1ecc:	be 01       	movw	r22, r28
    1ece:	6c 5e       	subi	r22, 0xEC	; 236
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <icmp_upcall>
    1ed8:	1d c0       	rjmp	.+58     	; 0x1f14 <ip_upcall+0xdc>
    1eda:	8a 81       	ldd	r24, Y+2	; 0x02
    1edc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ede:	49 2f       	mov	r20, r25
    1ee0:	55 27       	eor	r21, r21
    1ee2:	98 2f       	mov	r25, r24
    1ee4:	88 27       	eor	r24, r24
    1ee6:	48 2b       	or	r20, r24
    1ee8:	59 2b       	or	r21, r25
    1eea:	be 01       	movw	r22, r28
    1eec:	6c 5e       	subi	r22, 0xEC	; 236
    1eee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	0e 94 10 1c 	call	0x3820	; 0x3820 <udp_upcall>
    1ef6:	0e c0       	rjmp	.+28     	; 0x1f14 <ip_upcall+0xdc>
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	9b 81       	ldd	r25, Y+3	; 0x03
    1efc:	49 2f       	mov	r20, r25
    1efe:	55 27       	eor	r21, r21
    1f00:	98 2f       	mov	r25, r24
    1f02:	88 27       	eor	r24, r24
    1f04:	48 2b       	or	r20, r24
    1f06:	59 2b       	or	r21, r25
    1f08:	be 01       	movw	r22, r28
    1f0a:	6c 5e       	subi	r22, 0xEC	; 236
    1f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0e:	ce 01       	movw	r24, r28
    1f10:	0e 94 7f 17 	call	0x2efe	; 0x2efe <tcp_upcall>
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <ipConfig>:
    1f1a:	60 91 8a 03 	lds	r22, 0x038A
    1f1e:	70 91 8b 03 	lds	r23, 0x038B
    1f22:	80 91 8c 03 	lds	r24, 0x038C
    1f26:	90 91 8d 03 	lds	r25, 0x038D
    1f2a:	44 e8       	ldi	r20, 0x84	; 132
    1f2c:	53 e0       	ldi	r21, 0x03	; 3
    1f2e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <arpSetAddress>
    1f32:	08 95       	ret

00001f34 <autobaud_start>:
// Note, have to rewrite to co-exist with other interrupt sources.
//
void
autobaud_start() 
{   
    1f34:	10 92 af 02 	sts	0x02AF, r1
#ifdef __AVR__	
	// debug wouldn't allow this DEBUG1("autobaud start"CRLF);
	//
	// Initialize Vars
	//                
	state=0;    
	//
	// Make sure Modem HW flow control says we are ready, these macros control the HW
	// Flow Control Pins
	//                                                  
	DSR0_ON();
    1f38:	1b 98       	cbi	0x03, 3	; 3
	CTS0_ON();	
    1f3a:	1a 98       	cbi	0x03, 2	; 3
	//
	// Initialize the autobaud detector by enabling the Interrupt7 on falling edge to detect
	// UART char start.
	//
	EICRB=0x80;							// outp(0x80,EICRB);					// Set interrupt7 on falling edge
    1f3c:	80 e8       	ldi	r24, 0x80	; 128
    1f3e:	8a bf       	out	0x3a, r24	; 58
	EIMSK=0x80;							// outp(0x80,EIMSK);					// Set interrupt7 enable
    1f40:	89 bf       	out	0x39, r24	; 57
    1f42:	08 95       	ret

00001f44 <autobaud_rate>:
#endif
	//outp(0x08,MCUCR);					// Set interrupt on falling edge  (legacy)
	//outp(0x80,GIMSK);					// X1XXXXXX 1= enable int 0, ;0XXXXXXX 1= enable int 1		
} 


U8
autobaud_rate()
{  
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <autobaud_rate+0x12>
#ifdef __AVR__
U8	t,i=0;

                          
	//while((t=PRG_RDB(&BTime[i]))!=0)
	while((t=pgm_read_byte(&BTime[i]))!=0)
	{   
		
#ifdef AUTOBAUD_DEBUG	
		b2X(atime, smbuff);
		puts(smbuff);
		b2X(t, smbuff);
		puts(smbuff);		
#endif			
		if(atime<=t)
    1f4a:	80 91 b0 02 	lds	r24, 0x02B0
    1f4e:	2f 5f       	subi	r18, 0xFF	; 255
    1f50:	3f 4f       	sbci	r19, 0xFF	; 255
    1f52:	48 17       	cp	r20, r24
    1f54:	40 f4       	brcc	.+16     	; 0x1f66 <autobaud_rate+0x22>
			break;  
    1f56:	92 2f       	mov	r25, r18
    1f58:	e2 2f       	mov	r30, r18
    1f5a:	ff 27       	eor	r31, r31
    1f5c:	ec 56       	subi	r30, 0x6C	; 108
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	44 91       	lpm	r20, Z
    1f62:	44 23       	and	r20, r20
    1f64:	91 f7       	brne	.-28     	; 0x1f4a <autobaud_rate+0x6>
			
		i++;
	}
	return(i);
#else
	return(0);
#endif
}
    1f66:	89 2f       	mov	r24, r25
    1f68:	99 27       	eor	r25, r25
    1f6a:	08 95       	ret

00001f6c <autobaud_value>:

U8
autobaud_value()
{	  
    1f6c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <autobaud_rate>
    1f70:	ec e8       	ldi	r30, 0x8C	; 140
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	e8 0f       	add	r30, r24
    1f76:	f1 1d       	adc	r31, r1
    1f78:	e4 91       	lpm	r30, Z
#ifdef __AVR__		
U8	t;     

	//t=autobaud_rate();     
	 t=pgm_read_byte(&STime[autobaud_rate()]);
	//t=PRG_RDB(&STime[autobaud_rate()]);
	return(t);
#else
	return(0);
#endif
}
    1f7a:	8e 2f       	mov	r24, r30
    1f7c:	99 27       	eor	r25, r25
    1f7e:	08 95       	ret

00001f80 <autobaud_setup>:


//
// uInterent board will check for existance of autobaud wire.
//
//#define AUTOBTTL	0x08 --Mask, bit 3 is the one we are using
//
U8 autobaud_setup()
{            
    1f80:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <autobaud_start>
#ifdef __AVR__	
	autobaud_start(); 
	while(1)
	{
		// Timeout?
		if(state==0)IND1_ON();
    1f84:	80 91 af 02 	lds	r24, 0x02AF
    1f88:	88 23       	and	r24, r24
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <autobaud_setup+0xe>
    1f8c:	c4 9a       	sbi	0x18, 4	; 24
		if(state==1)IND2_ON();
    1f8e:	80 91 af 02 	lds	r24, 0x02AF
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <autobaud_setup+0x18>
    1f96:	c5 9a       	sbi	0x18, 5	; 24
		if(state==2)
    1f98:	80 91 af 02 	lds	r24, 0x02AF
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	91 f7       	brne	.-28     	; 0x1f84 <autobaud_setup+0x4>
			break;
	}  
				IND3_ON();
    1fa0:	c6 9a       	sbi	0x18, 6	; 24
//	UART_Init(autobaud_value());

	return (autobaud_value());
    1fa2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <autobaud_value>
#else

	return(0);
#endif
}    
    1fa6:	99 27       	eor	r25, r25
    1fa8:	08 95       	ret

00001faa <__vector_14>:


#ifdef __AVR__	
/* Timer 1 overflow Signal */
SIGNAL(SIG_OVERFLOW1)
{   
    1faa:	1f 92       	push	r1
    1fac:	0f 92       	push	r0
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	0f 92       	push	r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	8f 93       	push	r24

	//
	// Set finished state and turn off timer and Interrupt7 signals
	//
	state=2;
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	80 93 af 02 	sts	0x02AF, r24
	//
	// Turn off timer1 and interrupt7 signals.
	//
	EICRB=0x00;							//outp(0x00,EICRB);					// mask off interrupt7
    1fbc:	1a be       	out	0x3a, r1	; 58
	
	TIMSK=TIMSK & ~0x4;					//outp((inp(TIMSK) & ~0x4),TIMSK);	// Stop Timer
    1fbe:	87 b7       	in	r24, 0x37	; 55
    1fc0:	8b 7f       	andi	r24, 0xFB	; 251
    1fc2:	87 bf       	out	0x37, r24	; 55
	
	TCCR1B=0x0;							//outp(0x0,TCCR1B);					// no divider					
    1fc4:	1e bc       	out	0x2e, r1	; 46
	TCNT1H=0x0;							//outp(0,TCNT1H); 
    1fc6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x0;							//outp(0,TCNT1L);
    1fc8:	1c bc       	out	0x2c, r1	; 44
    1fca:	8f 91       	pop	r24
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

00001fd6 <__vector_8>:
}



/* Interrupt 7 Signal */
SIGNAL(SIG_INTERRUPT7)      
{           
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	8f 93       	push	r24
    1fe2:	9f 93       	push	r25
 	//
	// See what state we are in, init or cmp state
	//              
	//IND3_ON();
	if(0==state)
    1fe4:	80 91 af 02 	lds	r24, 0x02AF
    1fe8:	88 23       	and	r24, r24
    1fea:	69 f4       	brne	.+26     	; 0x2006 <__vector_8+0x30>
	{
		//
		// Set new state
		//
	    state=1;
    1fec:	91 e0       	ldi	r25, 0x01	; 1
    1fee:	90 93 af 02 	sts	0x02AF, r25
//		IND3_ON();
		IND2_ON();
    1ff2:	c5 9a       	sbi	0x18, 5	; 24

		// We have a start bit, reinit SIG_INTERRUPT7 signal to trigger on rising edges 
		EICRB=0xc0;							//outp(0xc0,EICRB);				
    1ff4:	80 ec       	ldi	r24, 0xC0	; 192
    1ff6:	8a bf       	out	0x3a, r24	; 58

		//
		// Start Timer1 and enable Timer1 interrupt (always write TCNT1H first!)
		//     
		TCNT1H=0;							//outp(0x00,TCNT1H);                  
    1ff8:	1d bc       	out	0x2d, r1	; 45
		TCNT1L=0;							//outp(0,TCNT1L);   					// Timer should roll in ~56ms		
    1ffa:	1c bc       	out	0x2c, r1	; 44

		TCCR1B=0x1;							//outp(0x1,TCCR1B);		// no divider
    1ffc:	9e bd       	out	0x2e, r25	; 46
		
		// turn on timer 1
		TIMSK=TIMSK | 0x4;					//outp((inp(TIMSK) | 0x4),TIMSK);
    1ffe:	87 b7       	in	r24, 0x37	; 55
    2000:	84 60       	ori	r24, 0x04	; 4
    2002:	87 bf       	out	0x37, r24	; 55
    2004:	0a c0       	rjmp	.+20     	; 0x201a <__vector_8+0x44>

		
    /* count with cpu clock/1024 */
   // outp(0x07,TCCR0);

    /* reset TCNT0 */
//    outp((U8)TIMER_SELECT,TCNT0);		
		
		//
		// Set new state
		//
	    //state=1;
	}
	else if(state==1)
    2006:	80 91 af 02 	lds	r24, 0x02AF
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	31 f4       	brne	.+12     	; 0x201a <__vector_8+0x44>
	{
		// We are in triggering on rising edges now,  Save timer value
        //icount=
        icount=TCNT1L;				//inp(TCNT1L);
    200e:	8c b5       	in	r24, 0x2c	; 44
    2010:	80 93 b1 02 	sts	0x02B1, r24
        atime=TCNT1H;				//inp(TCNT1H);  
    2014:	8d b5       	in	r24, 0x2d	; 45
    2016:	80 93 b0 02 	sts	0x02B0, r24
    201a:	9f 91       	pop	r25
    201c:	8f 91       	pop	r24
    201e:	0f 90       	pop	r0
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	0f 90       	pop	r0
    2024:	1f 90       	pop	r1
    2026:	18 95       	reti

00002028 <SocketSelect>:
//
//
U8
*SocketSelect(U8 *ptr)
{
    2028:	fc 01       	movw	r30, r24

	if((*ptr=='1') || (*ptr=='0'))
    202a:	80 81       	ld	r24, Z
    202c:	80 53       	subi	r24, 0x30	; 48
    202e:	82 30       	cpi	r24, 0x02	; 2
    2030:	30 f4       	brcc	.+12     	; 0x203e <SocketSelect+0x16>
	{           
		//
		// Set the Current Socket, convert ASCII to bin
		//
		soc_num=*ptr-'0';
    2032:	80 93 ed 06 	sts	0x06ED, r24
		ptr++;	 
#ifdef DEBUG_LV4
		DEBUG2("Socket Selected ");
		printByte(soc_num);
		DEBUG2(CRLF);
#endif		
		//
		// Gobble Spaces
		//
		while(*ptr==' ')
    2036:	81 81       	ldd	r24, Z+1	; 0x01
    2038:	31 96       	adiw	r30, 0x01	; 1
    203a:	80 32       	cpi	r24, 0x20	; 32
    203c:	e1 f3       	breq	.-8      	; 0x2036 <SocketSelect+0xe>
			ptr++ ;
	}
     
	return(ptr);     
}
    203e:	cf 01       	movw	r24, r30
    2040:	08 95       	ret

00002042 <TCPState>:


#ifdef PPP
void
modem_toggle_dtr(void)
{
	DTR1_OFF();			             
	TIMER_Wait_Tick(5);
	DTR1_ON();
}
#endif

//
// irCommandProcessor
//
//
void
irCommandProcessor(void)
{       
U8		msg=MSG_ERROR;
U8		*tptr;    
U8		*ptr=ircmd_buf;  
U16		tp,sp;
IPAddr 	ip;
                    
	ptr++;                    
	if((*ptr++ & 0xdf )==SYNC_CHAR_2)
	{            
		//
		// Get cmd
		//
		msg=(*ptr++ & 0xdf);
		//
		// Dump Spaces inbetween cmd and first paramter
		//
		while(*ptr==' ')
			ptr++ ;					
		switch(msg)
		{
			case	IMM_FTP:
			case	HTTP_GET:
				break;
			case	IMM_PING:
				if(!(elink&0x1))
				{
					msg=MSG_LINKDOWN;
					break;
				}
				// test ping, firt parse IP
				//
				if(0==isalnum(*ptr))
				{
					msg=MSG_ERROR;
				}
				else if(Get_IP(ptr,&ip))
				{
					// Set a flag to insure reply or error msg
					tmpflag=1;
					// Set callback,
					ICMP_Echo_Callback((void *)&icmp_echo_rx);
					// Send Ping of length 16
					ICMP_Send_Ping(&ip,56);
					// Wait
					TCPSendTime=TIMER_Get_Tick();
					while((TIMER_Get_Tick()-TCPSendTime)<400)
						poll_serial();
					// Clear callback		
					ICMP_Echo_Terminate();
					//
					// Ping reply?
					//
					if(tmpflag!=0)
						msg=MSG_FAIL;
				}
				else
					msg=MSG_DNSFAIL;
				break;
			case	IMM_NULL:
				msg=MSG_OK;
				break;
//			case	IMM_STATE:
//				b2X(ircmd_state, smbuff);
//				CONSOLE_puts(smbuff);	
//				msg=0xff;					
//				break;
			case	CMD_INTERIGATE:
				// Check Link Up/ DHCP state
				msg=MSG_OK;
				if((mm.network_config & DHCP_ENABLE) && (DhcpLeaseTime<=10))
				{
					msg=MSG_DHCPFAIL;
				}
				if(!(elink&0x1))
					msg=MSG_LINKDOWN;
				break;
			case CMD_DHCP:
				if(elink&0x1)
				{
					if(1==dhcp_init())
						msg=MSG_OK;
					else
						msg=MSG_FAIL;
				}
				else
					msg=MSG_LINKDOWN;
				break;
#ifdef PPP
			case	PPP_CONNECT:     
				msg=pppConnect(ptr);			//pointer points to ppp connect string.
				if(PPP_OK==msg)
				{
					//  PPP has gone up, change to internet command mode.
					msg=MSG_CONNECT;
					ircmd_state=IR_INTERNET_COMMAND;
				}
				else
				{
					ppp_down();
					msg=MSG_PPPFAIL;
				}
				break;
			case	IMM_OFF:					// shouldn't we shutdown ppp?
				ircmd_state=IR_MODEM_ONLY;
				msg=MSG_OK;
				break;
#endif

#ifdef PPP
			case	MODEM_DTR_TOGGLE:
				modem_toggle_dtr();
				msg=MSG_OK;
				break;
			case	IMM_DISABLE:     
				/* Terminate the PPP connection */		
				ppp_shut_down();				       		

	    		/* Release hardware control on the communication port */  
				/* and bring modem into comand mode by toggling DTR bit */
				modem_toggle_dtr();
				
				/* Return to Modem Command or Data State */      
				ircmd_state=IR_MODEM_COMMAND;  			
				msg=MSG_OK;	
				break;
#endif				
			case	RESOLVE_NAME:
				if(!(elink&0x1))
				{
					msg=MSG_LINKDOWN;
					break;
				}
				//
				// First Dump Spaces (done above)
				//
				//while(*ptr==' ')
				//	ptr++ ;					//tptr=ptr;				
				//
				// Do DNS Resolution on passed name      
				//                    
				if(resolve_name(&ip, ptr)!=RET_CODE_OK)
				{     
					//dns failed
					msg=MSG_DNSFAIL;
				}
				else
				{           
					// Good lookup, return OK
					displayMessage(MSG_OK);
					//
					// Print Back the IP address 
					//	
					printIP(&ip);				        
					msg=MSG_NONE;
				}                
				break;	
#ifndef DEMO
			case	TCP_CONNECT:  
				if(!(elink&0x1))
				{
					msg=MSG_LINKDOWN;
					break;
				}				
				//
				// Set socket index
				//
				msg=MSG_ERROR;
				tptr=ptr;
				if(tptr!=(ptr=SocketSelect(ptr)))
				{
					//
					// Check if we need dns, if first char is 0-9 no DNS needed
					//        
					if(Get_IP(ptr,(U8 *)&ip))
					{
						//
						// Advance pointer over name and extract port
						//
						while((*ptr!=':') && (*ptr!=0))
							ptr++;   
				        	
						if(*ptr==':')
						{  
							ptr++;  
            	        	ptr=s2p(ptr,&tp);
                	    	if(tp>0)
                    			msg=MSG_OK;							
						}
					
					}
					else
						msg=MSG_DNSFAIL;

					/*
					if((*ptr>='0') && (*ptr<='9'))
					{                   

						// Parse and write the IP address 
						tptr=ptr;
						if((tptr=(U8*)s2ip( ptr, &ip ))!=ptr)
						{
							if(*tptr==':')
							{
								ptr=++tptr;  
            	        		ptr=s2p(ptr,&tp);
                	    		if(tp>0)
                    				msg=MSG_OK;
                    		}  							
						}
					}
					else
					{           
						// Do DNS Resolution on passed name      
						if(resolve_name(&ip, ptr)!=RET_CODE_OK)
						{          
							//dns failed
							msg=MSG_DNSFAIL;
						}
						else
						{ 
							//
							// Advance pointer over name and extract port
							//
							while((*ptr!=':') && (*ptr!=0))
								ptr++;   
				        	
							if(*ptr==':')
							{  
								ptr++;  
            	        		ptr=s2p(ptr,&tp);
                	    		if(tp>0)
                    				msg=MSG_OK;							
							}
						}                          
					}
					*/
					if(msg==MSG_OK)
					{

						//
						// Cleanup socket if already in use, this needs fix?
						//			   
						tcp_close(sockets[soc_num]);
						//DEBUG2("*** Open the TCP socket dest %d.%d.%d.%d : %d\n ***",ip.ipb1,ip.ipb2,ip.ipb3,ip.ipb4,tp);	
						sockets[soc_num]=tcp_open(ip, tp, &tcp_socket_rx);
#ifdef DEBUG_LV4
						DEBUG4("Socket open returned ");
						printShort(sockets[soc_num]);
						//DEBUG1("active socket ");
						//printByte(soc_num);
						//DEBUG1(CRLF);
#endif
						if(sockets[soc_num])
						{
							// Activate socket
							active_soc=soc_num;
#ifdef DEBUG_LV4
						DEBUG4("active socket ");
						printByte(soc_num);
						DEBUG4(CRLF);
#endif
							// Initialize snd_count to zero for socket
							snd_count=0;
							// Enter streaming socket mode.
							ircmd_state=IR_STREAM_SOCKET;
						}
						else
						{
							msg=MSG_TCPFAIL;
						}
					}   	
				}
				break;	
			case	TCP_RESUME: 
				//
				// Set socket index
				//
				tptr=ptr;			
				
				if(tptr!=SocketSelect(ptr))
				{
					//
					// Check current socket state [soc_num]
					//
					if(TCP_OPEN==tcp_status(sockets[soc_num]))
					{
						//
						// Resume the connection
						//
						active_soc=soc_num;
						// Initialize snd_count to zero for socket
						snd_count=0;
						// Enter streaming socket mode.
						ircmd_state=IR_STREAM_SOCKET;	          
    	                msg=MSG_OK;
					}
					else
					{
						// Socket not connected, return "socket down" message
						msg=MSG_SOCDOWN;
					}
				}
				break;
					
			case	SOCKET_TERMINATE: 
				//
				// Set socket index
				//
				tptr=ptr;			
				if(tptr!=SocketSelect(ptr))
				{
					tcp_close(sockets[soc_num]);
					sockets[soc_num]=0;
					msg=MSG_OK;
				}
				else
				{
					printByte((U8)tcp_status(1));
					CONSOLE_putch('-');
					printByte((U8)tcp_status(2));
				}
				//msg=MSG_OK;
				break;
#endif
			case	UDP_ALLOCATE:       
				//
				// UDP cmd processor
				//
				msg=udpcmd(ptr);		
				break;
			case	REGISTER_ACCESS:
				//
				// S-Register Access
				//
				msg=sRegister(ptr);
				break;
			case		EEPROM_CMD:
				// Dump Spaces inbetween cmd and first paramter
				while(*ptr==' ')
					ptr++ ;
				//
				// S, L, or numeric value in hex
				//
				if('I'==toupper(*ptr))
				{
					DEBUG2("Invalidate EEPROM"CRLF);
					//
					// invalidate the eeprom
					//
#ifdef __AVR__	
					eeprom_write_byte (0,0);
#endif
					msg=MSG_OK;
				}
				else if('S'==toupper(*ptr))
				{
					//
					// Save the eeprom
					//
					if(2==global_init(2))
						msg=MSG_OK;
					else
						msg=MSG_ERROR;
				}
				else if('L'==toupper(*ptr))
				{
					//
					// Try to load the eeprom
					//
					if(1==global_init(1))
						msg=MSG_OK;
					else
						msg=MSG_EEERROR;
				}
				else
				{
					tptr=ptr;
					if(tptr!=(U8 *)s2p(ptr,&tp))
					{
						if(*ptr=='=')
						{
							DEBUG2("write eeprom"CRLF);
							ptr=Get_Byte(ptr,&sp);
#ifdef __AVR__	
							eeprom_write_byte (tp,sp);
#endif
							msg=MSG_OK;
						}
						else
						{
#ifdef __AVR__	
							tp=eeprom_read_byte(tp);
							printByte(tp);
#endif
							msg=255;	//we just want crlf
						}
					}
					else
						msg=MSG_ERROR;
				}
				break;	
			case	IMM_BOOTLOAD:
				CONSOLE_puts("Enter Bootloader"CRLF);		
				//
				// Jump to bootloader
				//
#ifdef __AVR__
#ifndef DEMO
				MCUCSR=0;
				//
				// Set flag for baudrate
				//
				absolute[1]=0x51f5;
				asm volatile ("jmp 0x7000");
#endif
#endif
				break;

#ifdef WINDOWS
#ifdef PPP
			case	IMM_EXIT:
				//
				// Close the port cleanly for windows and do an orderly shutdown. (avoids reboots)
				//
				MODEM_close();
				exit(0);
				break;
#endif
#endif
			case	CMD_ETH_STAT:
				enc28j60RegDump();
				break;
			case	 CMD_ETH_RST:
				nic_intialize();
				msg=MSG_OK;
				break;
			default:
				msg=MSG_ERROR;									/* error */
				break;
			}		
	}
	//
	// Decide whether to print a string or a value as a return code.
	//    
	displayMessage(msg);
}


//
// 
//    
U8
irCommand(U8 c)
{  
U8	ret=0;

    //
    // We are in command mode, we shouldn't get non ASC chars unless baud rate is wrong.
    //
    if(c>127)
    { 
#if USE_AUTOBAUD		
    	autobaud_setup();
#endif
     	ret=1;	
    }    
	//
	// check for a return 
	//    
	else if(c==0xd)                
	{             
		if(ircount>0)
		{     
			ircmd_buf[ircount]=0; 
			//
			// if echo is on, echo the character
			//
			if((mm.IMMConfig & ECHO_CMD))
				if((c!=0x0a) && (c!= 0x0d))
					CONSOLE_putch(c);       

			//
			//  Not in the future we should echo only chars on command including 0a 0d
			//  The wait(10) or 20 should get any trailers, which we should echo.
			//
			// sysdata
			CONSOLE_puts(CRLF);
			//CONSOLE_putch(0x0d); 
			//CONSOLE_putch(0x0a);
			//putch('\n');
			TIMER_Wait_Tick(10);
			// Flush input buffer
			while(CONSOLE_kbhit())
				CONSOLE_getch();

			irCommandProcessor(); 
			ret=1;
		}		       
		ircount=0;		       
		ccount=0;
	}
	else
	{  
		if(ircount>0)
		{          
			//
			// Check for BS
			//            
			if(c==0x08)
			{
				ircount--;
				if(ircount==0xff)
				{
					ircount=0;
					ccount=0;
				}
			}
			else
			{	
				if(ircount < IR_BUF_LEN-1)
					ircmd_buf[ircount++]=c; 
			}
			ret=1;	
		}		
		else if(ccount==0)
		{
			if( ((c & 0xdf) == SYNC_CHAR_1))
			{
				ircmd_buf[ircount++]=c;
				ret=1;
			}	
			else if(c == '\r' || c == '\n' || c ==' ')
			{
				ccount=0;
			}
			else
			{
				ccount=1;
			}
		}

/*
		else if( ((c & 0xdf) == SYNC_CHAR_1) && (ccount == 0))
		{
			ircmd_buf[ircount++]=c;
			ret=1;
		} 
		else if(c != '\r' || c != '\n' || c !=' ')
			ccount=0;
		else
			ccount=1;
*/
		//                                    
		if((mm.IMMConfig & ECHO_CMD) && ret)   
			if((c!=0x0a) && (c!= 0x0d))
				CONSOLE_putch(c); 		
	}	  

   	return(ret);
}  


#ifdef PPP
ca a cd; ad;
//
// Pass through the modem Singnals, Private
//
U8
Modem_Signals()
{
	//
	// debug LEDs
	//
	if(bit_is_clear (PORTG,1))
		IND2_ON();
	else
		IND2_OFF();

	if(bit_is_clear (PORTD,7))
		IND3_ON();
	else
		IND3_OFF();


	//
	// Check CD and other flow control lines
	//    
	//
	// Feed through RI and CD
	//
	if(DCD1())
	{    
		DCD0_ON();
	}
	else
	{            
		DCD0_OFF();
	}

	//
	// IF PPP is up RI is DAV, else pass through modem RI
	//
	if(mm.ppp_flags & PPP_UP)
	{
		if(udp_ptr==0)
		{
			RI0_OFF();
		}
		else
		{
			RI0_ON();
		}
	}
	else
	{		
		if(RI1())
		{    
			RI0_ON();
		}
		else
		{	
			RI0_OFF();
		}       
	}
	//
	// Check for DTR Change and feed through in modem only mode
	//
	if( DTR0() )
	{
		DTRI_ON();
		if(ircmd_state==IR_MODEM_ONLY)
		{
			// feed DTR to modem
			DTR1_ON();
		}
	}
	else
	{
		DTRI_OFF();
		if(ircmd_state==IR_MODEM_ONLY)
		{
			// feed DTR to modem
			DTR1_OFF();
		}		
	}
	return(0);
}
#endif

#ifdef PPP
//
//
//
void 
Check_Carrier(void)
{            

	Modem_Signals();
	//
	// Check for CD change
	//         
	if(ircmd_state!=IR_MODEM_ONLY)
	{
		if(carrier>0) 
		{     
			//
			// Check for Carrier Drop
			//
			if(!DCD1())
			{
				DCDI_OFF();
				//
				// We have lost the carrier, Drop PPP, set serial port back to software, and
				// chnge back to IR_MODEM_COMMAND, print lost carrier messages.
				//                                
				carrier=0;     
				ppp_down();
				ircmd_state=IR_MODEM_COMMAND;  
				displayMessage(MSG_NOCARRIER);
			}
		}
		else
		{
			//
			// Check for Carrier
			//
			if(DCD1())
			{
				DCDI_ON();
				//
				// We have a carrier, change state to IR_MODEM_DATA -or- IR_MODEM_COMMAND
				//
				carrier=1;           
				if(mm.IMMConfig & DATA_MODE_ESCAPE)				
			    {
					ircmd_state=IR_MODEM_DATA;
				}
				else
				{
					ircmd_state=IR_MODEM_COMMAND;
				}
			}	
		}
	}
}
#endif

//
// See if need to force a send of a TCP segment
//
// Sending a 1 as a command forces a send
//
int
TCPSend(U8 cmd)
{    
U8	go=0,ret=0;
#ifndef DEMO
	//
	// Check for force flush
	//
	if(cmd==1)
	{
		TCPSendFlag=0;
		DEBUG2("force flush\n");
		go=1;
	}
	else if(snd_count>=MAX_SND_SIZE)			// full buffer send
	{
			DEBUG1("Full buffer send \n");
			go=1;
	}
	else if(TCPSendFlag)						// timer send
	{   
		//
		// Check for Timeout
		//
		if(abs(TIMER_Get_Tick()-TCPSendTime) > mm.TCPStreamTickTime)
		{
			// We need to send
			DEBUG2("timeout send");
			//TCPSendFlag=0;
			//if(mm.IMMConfig & DEBUG_SEND)
			//	CONSOLE_putch('*');
			go=1;
		}
	}
	if(go)
	{
		TCPSendFlag=0;
		//
		// Only send if buffer contains data
		//
		if(snd_count)
		{
			ret=tcp_send(sockets[active_soc],snd_buff,snd_count);
			if(ret)
			{
				// Send OK reset send count, snd_count should be updated if sent less than
				snd_count=0;
				DEBUG1("@");
			}
			else
			{
				// Socket should timeout if in this state for long
				// The socket has failed send, flow control?  --- Experimental Code
				// Do nothing --
				DEBUG1("&");		
				// The socket has overflowed, abort the socket and go to cmd mode
			//	if(tcp_close(sockets[active_soc]))
			//	{
			//		CONSOLE_puts(CRLF);
			//		displayMessage(MSG_SOCDOWN);
			//	}
			//	ircmd_state=IR_INTERNET_COMMAND;
				//snd_count=0;
			}
			// Reset snd_count
			//snd_count=0;
		}
		return(1);
	}
#endif
	return(0);
}

//
// Returns 0 if active and OK, or 1 if socket down, to be called only in Streaming Socket Mode
//
U8 
TCPState(void)
{
    2042:	1f 93       	push	r17
U8	ret=1;
 
#ifndef DEMO
    //
    // Check Active Sockets for State Changes
    // 
	ret=(U8)tcp_status(sockets[active_soc]);
    2044:	e0 91 f2 06 	lds	r30, 0x06F2
    2048:	ff 27       	eor	r31, r31
    204a:	e2 51       	subi	r30, 0x12	; 18
    204c:	f9 4f       	sbci	r31, 0xF9	; 249
    204e:	80 81       	ld	r24, Z
    2050:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    2054:	18 2f       	mov	r17, r24
	if(TCP_OPEN==(TCP_STATE_MASK &ret))
    2056:	8f 70       	andi	r24, 0x0F	; 15
    2058:	84 30       	cpi	r24, 0x04	; 4
    205a:	11 f4       	brne	.+4      	; 0x2060 <TCPState+0x1e>
    205c:	10 e0       	ldi	r17, 0x00	; 0
    205e:	1c c0       	rjmp	.+56     	; 0x2098 <TCPState+0x56>
	{
		// Socket is active
		ret=0;
	}
	else
	{
#ifdef DEBUG_LV2
		if(mm.IMMConfig & PPP_DEBUG)
		{
			DEBUG1("Socket Down state = ");
			printByte(ret);
			DEBUG1("Active socket = ");
			printByte(active_soc);
			DEBUG1(CRLF);
		}
#endif
		ircmd_state=IR_INTERNET_COMMAND;
    2060:	84 e0       	ldi	r24, 0x04	; 4
    2062:	80 93 ea 06 	sts	0x06EA, r24
		tcp_close(sockets[active_soc]);
    2066:	e0 91 f2 06 	lds	r30, 0x06F2
    206a:	ff 27       	eor	r31, r31
    206c:	e2 51       	subi	r30, 0x12	; 18
    206e:	f9 4f       	sbci	r31, 0xF9	; 249
    2070:	80 81       	ld	r24, Z
    2072:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <tcp_close>
		sockets[active_soc]=0;
    2076:	e0 91 f2 06 	lds	r30, 0x06F2
    207a:	ff 27       	eor	r31, r31
    207c:	e2 51       	subi	r30, 0x12	; 18
    207e:	f9 4f       	sbci	r31, 0xF9	; 249
    2080:	10 82       	st	Z, r1
		CONSOLE_puts(CRLF);
    2082:	8f e1       	ldi	r24, 0x1F	; 31
    2084:	92 e0       	ldi	r25, 0x02	; 2
    2086:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
		displayMessage(MSG_SOCDOWN);	
    208a:	8d e8       	ldi	r24, 0x8D	; 141
    208c:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <displayMessage>
		snd_count=0;
    2090:	10 92 ec 06 	sts	0x06EC, r1
    2094:	10 92 eb 06 	sts	0x06EB, r1
	}

#endif
	return ret;
} 
    2098:	81 2f       	mov	r24, r17
    209a:	99 27       	eor	r25, r25
    209c:	1f 91       	pop	r17
    209e:	08 95       	ret

000020a0 <Check_Reset_EEPROM>:


//
// Writes a char to the currently open TCP socket, in this case
// we should buffer here and send on threashold or timeout.
//
U8
WriteTCPChar(U8 c)
{   
#ifndef DEMO
	//
	// Check for buffer full, if full should push char back
	//
	if(snd_count>=MAX_SND_SIZE)
	{
		// full push back char....
		DEBUG1("** we shouldn't get here WriteTCPChar **"CRLF);
		return(1);
	}          
	TCPSendFlag=1;		    
    TCPSendTime=TIMER_Get_Tick();  

	if(mm.IMMConfig & ECHO_STREAM)
		CONSOLE_putch(c);

	// Store char in buffer
	snd_buff[snd_count++]=c;
#endif
	return(0);
}


#ifdef PPP
void
passthrough(void)
{
S16	c;

#ifdef __AVR__
	while(MODEM_kbhit())
	{	
		c=MODEM_getch();
		CONSOLE_putch((U8)c);
	}
#else
	while(-1!=(c=MODEM_getch()))
		CONSOLE_putch((U8)c);

#endif
}
#endif

//
// Check_Reset_EEPROM()
//
void
Check_Reset_EEPROM()
{
    20a0:	9f 99       	sbic	0x13, 7	; 19
    20a2:	28 c0       	rjmp	.+80     	; 0x20f4 <Check_Reset_EEPROM+0x54>
static U8  reset_status;
static U16 reset_timer;

	if(SW5())
	{
		if(!reset_status)
    20a4:	80 91 b4 02 	lds	r24, 0x02B4
    20a8:	88 23       	and	r24, r24
    20aa:	51 f4       	brne	.+20     	; 0x20c0 <Check_Reset_EEPROM+0x20>
		{
			// Set timer
			reset_timer=TIMER_Get_Second();
    20ac:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER_Get_Second>
    20b0:	90 93 b3 02 	sts	0x02B3, r25
    20b4:	80 93 b2 02 	sts	0x02B2, r24
			reset_status=1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	80 93 b4 02 	sts	0x02B4, r24
    20be:	08 95       	ret
		}
		else
		{
			// Check if it is time to reset
			if((TIMER_Get_Second()-reset_timer)>10)
    20c0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER_Get_Second>
    20c4:	20 91 b2 02 	lds	r18, 0x02B2
    20c8:	30 91 b3 02 	lds	r19, 0x02B3
    20cc:	82 1b       	sub	r24, r18
    20ce:	93 0b       	sbc	r25, r19
    20d0:	0b 97       	sbiw	r24, 0x0b	; 11
    20d2:	90 f0       	brcs	.+36     	; 0x20f8 <Check_Reset_EEPROM+0x58>
			{
				if(1==reset_status)
    20d4:	80 91 b4 02 	lds	r24, 0x02B4
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	51 f4       	brne	.+20     	; 0x20f0 <Check_Reset_EEPROM+0x50>
				{
					reset_status++;
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	80 93 b4 02 	sts	0x02B4, r24

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	a0 e0       	ldi	r26, 0x00	; 0
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	08 2e       	mov	r0, r24
    20ea:	0e 94 bd 24 	call	0x497a	; 0x497a <__eeprom_write_byte_1C1D1E>
    20ee:	08 95       	ret
					DEBUG1("w");
#ifdef __AVR__
					eeprom_write_byte(0,0);
#endif
				}
				else
				{
					IND2_ON();			
    20f0:	c5 9a       	sbi	0x18, 5	; 24
    20f2:	08 95       	ret
					DEBUG1("+");
				}
			}
		}
	}
	else
	{
		reset_status=0;
    20f4:	10 92 b4 02 	sts	0x02B4, r1
    20f8:	08 95       	ret

000020fa <EscapeTime>:
    20fa:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    20fe:	40 91 bb 02 	lds	r20, 0x02BB
    2102:	44 23       	and	r20, r20
    2104:	11 f0       	breq	.+4      	; 0x210a <EscapeTime+0x10>
    2106:	42 30       	cpi	r20, 0x02	; 2
    2108:	a1 f4       	brne	.+40     	; 0x2132 <EscapeTime+0x38>
    210a:	20 91 b8 02 	lds	r18, 0x02B8
    210e:	30 91 b9 02 	lds	r19, 0x02B9
    2112:	28 1b       	sub	r18, r24
    2114:	39 0b       	sbc	r19, r25
    2116:	37 ff       	sbrs	r19, 7
    2118:	03 c0       	rjmp	.+6      	; 0x2120 <EscapeTime+0x26>
    211a:	30 95       	com	r19
    211c:	21 95       	neg	r18
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
    2120:	80 91 77 03 	lds	r24, 0x0377
    2124:	99 27       	eor	r25, r25
    2126:	82 17       	cp	r24, r18
    2128:	93 07       	cpc	r25, r19
    212a:	1c f4       	brge	.+6      	; 0x2132 <EscapeTime+0x38>
    212c:	4f 5f       	subi	r20, 0xFF	; 255
    212e:	40 93 bb 02 	sts	0x02BB, r20
    2132:	08 95       	ret

00002134 <EscapeAction>:
    2134:	1f 93       	push	r17
    2136:	0d 99       	sbic	0x01, 5	; 1
    2138:	0a c0       	rjmp	.+20     	; 0x214e <EscapeAction+0x1a>
    213a:	10 e0       	ldi	r17, 0x00	; 0
    213c:	80 91 f1 06 	lds	r24, 0x06F1
    2140:	88 23       	and	r24, r24
    2142:	09 f4       	brne	.+2      	; 0x2146 <EscapeAction+0x12>
    2144:	11 e0       	ldi	r17, 0x01	; 1
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	80 93 f1 06 	sts	0x06F1, r24
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <EscapeAction+0x20>
    214e:	10 92 f1 06 	sts	0x06F1, r1
    2152:	10 e0       	ldi	r17, 0x00	; 0
    2154:	0e 94 7d 10 	call	0x20fa	; 0x20fa <EscapeTime>
    2158:	80 91 ba 02 	lds	r24, 0x02BA
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	29 f4       	brne	.+10     	; 0x216a <EscapeAction+0x36>
    2160:	80 91 bb 02 	lds	r24, 0x02BB
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	09 f4       	brne	.+2      	; 0x216a <EscapeAction+0x36>
    2168:	11 e0       	ldi	r17, 0x01	; 1
    216a:	81 2f       	mov	r24, r17
    216c:	99 27       	eor	r25, r25
    216e:	1f 91       	pop	r17
    2170:	08 95       	ret

00002172 <EscapeReset>:
    2172:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    2176:	90 93 b9 02 	sts	0x02B9, r25
    217a:	80 93 b8 02 	sts	0x02B8, r24
    217e:	10 92 ba 02 	sts	0x02BA, r1
    2182:	10 92 bb 02 	sts	0x02BB, r1
    2186:	08 95       	ret

00002188 <EscapeSequence>:
    2188:	1f 93       	push	r17
    218a:	98 2f       	mov	r25, r24
    218c:	80 91 75 03 	lds	r24, 0x0375
    2190:	83 ff       	sbrs	r24, 3
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <EscapeSequence+0x10>
    2194:	10 e0       	ldi	r17, 0x00	; 0
    2196:	24 c0       	rjmp	.+72     	; 0x21e0 <EscapeSequence+0x58>
    2198:	80 91 bb 02 	lds	r24, 0x02BB
    219c:	88 23       	and	r24, r24
    219e:	c1 f0       	breq	.+48     	; 0x21d0 <EscapeSequence+0x48>
    21a0:	80 91 76 03 	lds	r24, 0x0376
    21a4:	98 17       	cp	r25, r24
    21a6:	a1 f4       	brne	.+40     	; 0x21d0 <EscapeSequence+0x48>
    21a8:	10 91 ba 02 	lds	r17, 0x02BA
    21ac:	1f 5f       	subi	r17, 0xFF	; 255
    21ae:	10 93 ba 02 	sts	0x02BA, r17
    21b2:	14 30       	cpi	r17, 0x04	; 4
    21b4:	88 f4       	brcc	.+34     	; 0x21d8 <EscapeSequence+0x50>
    21b6:	13 30       	cpi	r17, 0x03	; 3
    21b8:	49 f4       	brne	.+18     	; 0x21cc <EscapeSequence+0x44>
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	80 93 bb 02 	sts	0x02BB, r24
    21c0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    21c4:	90 93 b9 02 	sts	0x02B9, r25
    21c8:	80 93 b8 02 	sts	0x02B8, r24
    21cc:	1f ef       	ldi	r17, 0xFF	; 255
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <EscapeSequence+0x58>
    21d0:	10 91 ba 02 	lds	r17, 0x02BA
    21d4:	11 23       	and	r17, r17
    21d6:	11 f0       	breq	.+4      	; 0x21dc <EscapeSequence+0x54>
    21d8:	1f 3f       	cpi	r17, 0xFF	; 255
    21da:	11 f0       	breq	.+4      	; 0x21e0 <EscapeSequence+0x58>
    21dc:	0e 94 b9 10 	call	0x2172	; 0x2172 <EscapeReset>
    21e0:	81 2f       	mov	r24, r17
    21e2:	99 27       	eor	r25, r25
    21e4:	1f 91       	pop	r17
    21e6:	08 95       	ret

000021e8 <WriteTCPChar>:
    21e8:	1f 93       	push	r17
    21ea:	18 2f       	mov	r17, r24
    21ec:	80 91 eb 06 	lds	r24, 0x06EB
    21f0:	90 91 ec 06 	lds	r25, 0x06EC
    21f4:	80 38       	cpi	r24, 0x80	; 128
    21f6:	91 05       	cpc	r25, r1
    21f8:	18 f0       	brcs	.+6      	; 0x2200 <WriteTCPChar+0x18>
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	1f c0       	rjmp	.+62     	; 0x223e <WriteTCPChar+0x56>
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	80 93 b7 02 	sts	0x02B7, r24
    2206:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    220a:	90 93 e9 06 	sts	0x06E9, r25
    220e:	80 93 e8 06 	sts	0x06E8, r24
    2212:	80 91 75 03 	lds	r24, 0x0375
    2216:	81 ff       	sbrs	r24, 1
    2218:	03 c0       	rjmp	.+6      	; 0x2220 <WriteTCPChar+0x38>
    221a:	81 2f       	mov	r24, r17
    221c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
    2220:	80 91 eb 06 	lds	r24, 0x06EB
    2224:	90 91 ec 06 	lds	r25, 0x06EC
    2228:	fc 01       	movw	r30, r24
    222a:	ed 50       	subi	r30, 0x0D	; 13
    222c:	f9 4f       	sbci	r31, 0xF9	; 249
    222e:	10 83       	st	Z, r17
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	90 93 ec 06 	sts	0x06EC, r25
    2236:	80 93 eb 06 	sts	0x06EB, r24
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	1f 91       	pop	r17
    2240:	08 95       	ret

00002242 <tcp_socket_rx>:
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	7a 01       	movw	r14, r20
    2250:	c0 e0       	ldi	r28, 0x00	; 0
    2252:	d0 e0       	ldi	r29, 0x00	; 0
    2254:	8b 01       	movw	r16, r22
    2256:	06 c0       	rjmp	.+12     	; 0x2264 <tcp_socket_rx+0x22>
    2258:	f8 01       	movw	r30, r16
    225a:	81 91       	ld	r24, Z+
    225c:	8f 01       	movw	r16, r30
    225e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
    2262:	21 96       	adiw	r28, 0x01	; 1
    2264:	ce 15       	cp	r28, r14
    2266:	df 05       	cpc	r29, r15
    2268:	b9 f7       	brne	.-18     	; 0x2258 <tcp_socket_rx+0x16>
    226a:	c7 01       	movw	r24, r14
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	1f 91       	pop	r17
    2272:	0f 91       	pop	r16
    2274:	ff 90       	pop	r15
    2276:	ef 90       	pop	r14
    2278:	08 95       	ret

0000227a <TCPSend>:
    227a:	81 30       	cpi	r24, 0x01	; 1
    227c:	19 f4       	brne	.+6      	; 0x2284 <TCPSend+0xa>
    227e:	10 92 b7 02 	sts	0x02B7, r1
    2282:	1f c0       	rjmp	.+62     	; 0x22c2 <TCPSend+0x48>
    2284:	80 91 eb 06 	lds	r24, 0x06EB
    2288:	90 91 ec 06 	lds	r25, 0x06EC
    228c:	80 38       	cpi	r24, 0x80	; 128
    228e:	91 05       	cpc	r25, r1
    2290:	c0 f4       	brcc	.+48     	; 0x22c2 <TCPSend+0x48>
    2292:	80 91 b7 02 	lds	r24, 0x02B7
    2296:	88 23       	and	r24, r24
    2298:	89 f1       	breq	.+98     	; 0x22fc <TCPSend+0x82>
    229a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    229e:	20 91 e8 06 	lds	r18, 0x06E8
    22a2:	30 91 e9 06 	lds	r19, 0x06E9
    22a6:	82 1b       	sub	r24, r18
    22a8:	93 0b       	sbc	r25, r19
    22aa:	9c 01       	movw	r18, r24
    22ac:	97 ff       	sbrs	r25, 7
    22ae:	03 c0       	rjmp	.+6      	; 0x22b6 <TCPSend+0x3c>
    22b0:	30 95       	com	r19
    22b2:	21 95       	neg	r18
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	80 91 78 03 	lds	r24, 0x0378
    22ba:	99 27       	eor	r25, r25
    22bc:	82 17       	cp	r24, r18
    22be:	93 07       	cpc	r25, r19
    22c0:	ec f4       	brge	.+58     	; 0x22fc <TCPSend+0x82>
    22c2:	10 92 b7 02 	sts	0x02B7, r1
    22c6:	40 91 eb 06 	lds	r20, 0x06EB
    22ca:	50 91 ec 06 	lds	r21, 0x06EC
    22ce:	41 15       	cp	r20, r1
    22d0:	51 05       	cpc	r21, r1
    22d2:	89 f0       	breq	.+34     	; 0x22f6 <TCPSend+0x7c>
    22d4:	e0 91 f2 06 	lds	r30, 0x06F2
    22d8:	ff 27       	eor	r31, r31
    22da:	e2 51       	subi	r30, 0x12	; 18
    22dc:	f9 4f       	sbci	r31, 0xF9	; 249
    22de:	80 81       	ld	r24, Z
    22e0:	63 ef       	ldi	r22, 0xF3	; 243
    22e2:	76 e0       	ldi	r23, 0x06	; 6
    22e4:	99 27       	eor	r25, r25
    22e6:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <tcp_send>
    22ea:	88 23       	and	r24, r24
    22ec:	21 f0       	breq	.+8      	; 0x22f6 <TCPSend+0x7c>
    22ee:	10 92 ec 06 	sts	0x06EC, r1
    22f2:	10 92 eb 06 	sts	0x06EB, r1
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	08 95       	ret
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	08 95       	ret

00002302 <Get_IP>:
    2302:	fc 01       	movw	r30, r24
    2304:	9b 01       	movw	r18, r22
    2306:	80 81       	ld	r24, Z
    2308:	80 53       	subi	r24, 0x30	; 48
    230a:	8a 30       	cpi	r24, 0x0A	; 10
    230c:	30 f4       	brcc	.+12     	; 0x231a <Get_IP+0x18>
    230e:	cf 01       	movw	r24, r30
    2310:	0e 94 a6 05 	call	0xb4c	; 0xb4c <s2ip>
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	08 95       	ret
    231a:	bf 01       	movw	r22, r30
    231c:	c9 01       	movw	r24, r18
    231e:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <resolve_name>
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	89 2b       	or	r24, r25
    2326:	09 f0       	breq	.+2      	; 0x232a <Get_IP+0x28>
    2328:	21 e0       	ldi	r18, 0x01	; 1
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	28 27       	eor	r18, r24
    232e:	82 2f       	mov	r24, r18
    2330:	99 27       	eor	r25, r25
    2332:	08 95       	ret

00002334 <irCommandProcessor>:
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	28 97       	sbiw	r28, 0x08	; 8
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	80 91 74 07 	lds	r24, 0x0774
    2358:	8f 7d       	andi	r24, 0xDF	; 223
    235a:	82 35       	cpi	r24, 0x52	; 82
    235c:	09 f0       	breq	.+2      	; 0x2360 <irCommandProcessor+0x2c>
    235e:	96 c1       	rjmp	.+812    	; 0x268c <irCommandProcessor+0x358>
    2360:	10 91 75 07 	lds	r17, 0x0775
    2364:	1f 7d       	andi	r17, 0xDF	; 223
    2366:	96 e7       	ldi	r25, 0x76	; 118
    2368:	e9 2e       	mov	r14, r25
    236a:	97 e0       	ldi	r25, 0x07	; 7
    236c:	f9 2e       	mov	r15, r25
    236e:	03 c0       	rjmp	.+6      	; 0x2376 <irCommandProcessor+0x42>
    2370:	08 94       	sec
    2372:	e1 1c       	adc	r14, r1
    2374:	f1 1c       	adc	r15, r1
    2376:	f7 01       	movw	r30, r14
    2378:	90 81       	ld	r25, Z
    237a:	90 32       	cpi	r25, 0x20	; 32
    237c:	c9 f3       	breq	.-14     	; 0x2370 <irCommandProcessor+0x3c>
    237e:	10 35       	cpi	r17, 0x50	; 80
    2380:	09 f4       	brne	.+2      	; 0x2384 <irCommandProcessor+0x50>
    2382:	3f c0       	rjmp	.+126    	; 0x2402 <irCommandProcessor+0xce>
    2384:	11 35       	cpi	r17, 0x51	; 81
    2386:	d8 f4       	brcc	.+54     	; 0x23be <irCommandProcessor+0x8a>
    2388:	16 34       	cpi	r17, 0x46	; 70
    238a:	09 f4       	brne	.+2      	; 0x238e <irCommandProcessor+0x5a>
    238c:	ae c1       	rjmp	.+860    	; 0x26ea <irCommandProcessor+0x3b6>
    238e:	17 34       	cpi	r17, 0x47	; 71
    2390:	60 f4       	brcc	.+24     	; 0x23aa <irCommandProcessor+0x76>
    2392:	14 34       	cpi	r17, 0x44	; 68
    2394:	09 f4       	brne	.+2      	; 0x2398 <irCommandProcessor+0x64>
    2396:	8c c0       	rjmp	.+280    	; 0x24b0 <irCommandProcessor+0x17c>
    2398:	15 34       	cpi	r17, 0x45	; 69
    239a:	50 f5       	brcc	.+84     	; 0x23f0 <irCommandProcessor+0xbc>
    239c:	11 23       	and	r17, r17
    239e:	09 f4       	brne	.+2      	; 0x23a2 <irCommandProcessor+0x6e>
    23a0:	a4 c1       	rjmp	.+840    	; 0x26ea <irCommandProcessor+0x3b6>
    23a2:	12 34       	cpi	r17, 0x42	; 66
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <irCommandProcessor+0x74>
    23a6:	72 c1       	rjmp	.+740    	; 0x268c <irCommandProcessor+0x358>
    23a8:	5b c1       	rjmp	.+694    	; 0x2660 <irCommandProcessor+0x32c>
    23aa:	19 34       	cpi	r17, 0x49	; 73
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <irCommandProcessor+0x7c>
    23ae:	68 c0       	rjmp	.+208    	; 0x2480 <irCommandProcessor+0x14c>
    23b0:	1e 34       	cpi	r17, 0x4E	; 78
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <irCommandProcessor+0x82>
    23b4:	87 c0       	rjmp	.+270    	; 0x24c4 <irCommandProcessor+0x190>
    23b6:	18 34       	cpi	r17, 0x48	; 72
    23b8:	09 f0       	breq	.+2      	; 0x23bc <irCommandProcessor+0x88>
    23ba:	68 c1       	rjmp	.+720    	; 0x268c <irCommandProcessor+0x358>
    23bc:	96 c1       	rjmp	.+812    	; 0x26ea <irCommandProcessor+0x3b6>
    23be:	15 35       	cpi	r17, 0x55	; 85
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <irCommandProcessor+0x90>
    23c2:	06 c1       	rjmp	.+524    	; 0x25d0 <irCommandProcessor+0x29c>
    23c4:	16 35       	cpi	r17, 0x56	; 86
    23c6:	50 f4       	brcc	.+20     	; 0x23dc <irCommandProcessor+0xa8>
    23c8:	13 35       	cpi	r17, 0x53	; 83
    23ca:	09 f4       	brne	.+2      	; 0x23ce <irCommandProcessor+0x9a>
    23cc:	05 c1       	rjmp	.+522    	; 0x25d8 <irCommandProcessor+0x2a4>
    23ce:	14 35       	cpi	r17, 0x54	; 84
    23d0:	08 f0       	brcs	.+2      	; 0x23d4 <irCommandProcessor+0xa0>
    23d2:	8d c0       	rjmp	.+282    	; 0x24ee <irCommandProcessor+0x1ba>
    23d4:	12 35       	cpi	r17, 0x52	; 82
    23d6:	09 f0       	breq	.+2      	; 0x23da <irCommandProcessor+0xa6>
    23d8:	59 c1       	rjmp	.+690    	; 0x268c <irCommandProcessor+0x358>
    23da:	b8 c0       	rjmp	.+368    	; 0x254c <irCommandProcessor+0x218>
    23dc:	19 35       	cpi	r17, 0x59	; 89
    23de:	09 f4       	brne	.+2      	; 0x23e2 <irCommandProcessor+0xae>
    23e0:	4f c1       	rjmp	.+670    	; 0x2680 <irCommandProcessor+0x34c>
    23e2:	1a 35       	cpi	r17, 0x5A	; 90
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <irCommandProcessor+0xb4>
    23e6:	4f c1       	rjmp	.+670    	; 0x2686 <irCommandProcessor+0x352>
    23e8:	18 35       	cpi	r17, 0x58	; 88
    23ea:	09 f0       	breq	.+2      	; 0x23ee <irCommandProcessor+0xba>
    23ec:	4f c1       	rjmp	.+670    	; 0x268c <irCommandProcessor+0x358>
    23ee:	cd c0       	rjmp	.+410    	; 0x258a <irCommandProcessor+0x256>
    23f0:	89 2f       	mov	r24, r25
    23f2:	99 27       	eor	r25, r25
    23f4:	0e 94 af 24 	call	0x495e	; 0x495e <toupper>
    23f8:	89 34       	cpi	r24, 0x49	; 73
    23fa:	91 05       	cpc	r25, r1
    23fc:	09 f0       	breq	.+2      	; 0x2400 <irCommandProcessor+0xcc>
    23fe:	f5 c0       	rjmp	.+490    	; 0x25ea <irCommandProcessor+0x2b6>
    2400:	f0 c0       	rjmp	.+480    	; 0x25e2 <irCommandProcessor+0x2ae>
    2402:	80 91 e6 06 	lds	r24, 0x06E6
    2406:	80 ff       	sbrs	r24, 0
    2408:	43 c1       	rjmp	.+646    	; 0x2690 <irCommandProcessor+0x35c>
    240a:	89 2f       	mov	r24, r25
    240c:	99 27       	eor	r25, r25
    240e:	0e 94 93 24 	call	0x4926	; 0x4926 <isalnum>
    2412:	89 2b       	or	r24, r25
    2414:	09 f4       	brne	.+2      	; 0x2418 <irCommandProcessor+0xe4>
    2416:	3a c1       	rjmp	.+628    	; 0x268c <irCommandProcessor+0x358>
    2418:	85 e0       	ldi	r24, 0x05	; 5
    241a:	c8 2e       	mov	r12, r24
    241c:	d1 2c       	mov	r13, r1
    241e:	cc 0e       	add	r12, r28
    2420:	dd 1e       	adc	r13, r29
    2422:	b6 01       	movw	r22, r12
    2424:	c7 01       	movw	r24, r14
    2426:	0e 94 81 11 	call	0x2302	; 0x2302 <Get_IP>
    242a:	88 23       	and	r24, r24
    242c:	09 f4       	brne	.+2      	; 0x2430 <irCommandProcessor+0xfc>
    242e:	36 c1       	rjmp	.+620    	; 0x269c <irCommandProcessor+0x368>
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	80 93 e7 06 	sts	0x06E7, r24
    2436:	8d ec       	ldi	r24, 0xCD	; 205
    2438:	94 e1       	ldi	r25, 0x14	; 20
    243a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <ICMP_Echo_Callback>
    243e:	68 e3       	ldi	r22, 0x38	; 56
    2440:	70 e0       	ldi	r23, 0x00	; 0
    2442:	c6 01       	movw	r24, r12
    2444:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <ICMP_Send_Ping>
    2448:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    244c:	90 93 e9 06 	sts	0x06E9, r25
    2450:	80 93 e8 06 	sts	0x06E8, r24
    2454:	02 c0       	rjmp	.+4      	; 0x245a <irCommandProcessor+0x126>
    2456:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <poll_serial>
    245a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    245e:	20 91 e8 06 	lds	r18, 0x06E8
    2462:	30 91 e9 06 	lds	r19, 0x06E9
    2466:	82 1b       	sub	r24, r18
    2468:	93 0b       	sbc	r25, r19
    246a:	80 59       	subi	r24, 0x90	; 144
    246c:	91 40       	sbci	r25, 0x01	; 1
    246e:	98 f3       	brcs	.-26     	; 0x2456 <irCommandProcessor+0x122>
    2470:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <ICMP_Echo_Terminate>
    2474:	80 91 e7 06 	lds	r24, 0x06E7
    2478:	88 23       	and	r24, r24
    247a:	09 f0       	breq	.+2      	; 0x247e <irCommandProcessor+0x14a>
    247c:	0b c1       	rjmp	.+534    	; 0x2694 <irCommandProcessor+0x360>
    247e:	35 c1       	rjmp	.+618    	; 0x26ea <irCommandProcessor+0x3b6>
    2480:	80 91 83 03 	lds	r24, 0x0383
    2484:	80 ff       	sbrs	r24, 0
    2486:	0e c0       	rjmp	.+28     	; 0x24a4 <irCommandProcessor+0x170>
    2488:	80 91 22 0b 	lds	r24, 0x0B22
    248c:	90 91 23 0b 	lds	r25, 0x0B23
    2490:	a0 91 24 0b 	lds	r26, 0x0B24
    2494:	b0 91 25 0b 	lds	r27, 0x0B25
    2498:	0b 97       	sbiw	r24, 0x0b	; 11
    249a:	a1 05       	cpc	r26, r1
    249c:	b1 05       	cpc	r27, r1
    249e:	10 f4       	brcc	.+4      	; 0x24a4 <irCommandProcessor+0x170>
    24a0:	14 e8       	ldi	r17, 0x84	; 132
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <irCommandProcessor+0x172>
    24a4:	10 e0       	ldi	r17, 0x00	; 0
    24a6:	80 91 e6 06 	lds	r24, 0x06E6
    24aa:	80 ff       	sbrs	r24, 0
    24ac:	f1 c0       	rjmp	.+482    	; 0x2690 <irCommandProcessor+0x35c>
    24ae:	1d c1       	rjmp	.+570    	; 0x26ea <irCommandProcessor+0x3b6>
    24b0:	80 91 e6 06 	lds	r24, 0x06E6
    24b4:	80 ff       	sbrs	r24, 0
    24b6:	ec c0       	rjmp	.+472    	; 0x2690 <irCommandProcessor+0x35c>
    24b8:	0e 94 57 22 	call	0x44ae	; 0x44ae <dhcp_init>
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	09 f0       	breq	.+2      	; 0x24c2 <irCommandProcessor+0x18e>
    24c0:	e9 c0       	rjmp	.+466    	; 0x2694 <irCommandProcessor+0x360>
    24c2:	ea c0       	rjmp	.+468    	; 0x2698 <irCommandProcessor+0x364>
    24c4:	80 91 e6 06 	lds	r24, 0x06E6
    24c8:	80 ff       	sbrs	r24, 0
    24ca:	e2 c0       	rjmp	.+452    	; 0x2690 <irCommandProcessor+0x35c>
    24cc:	8e 01       	movw	r16, r28
    24ce:	0b 5f       	subi	r16, 0xFB	; 251
    24d0:	1f 4f       	sbci	r17, 0xFF	; 255
    24d2:	b7 01       	movw	r22, r14
    24d4:	c8 01       	movw	r24, r16
    24d6:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <resolve_name>
    24da:	89 2b       	or	r24, r25
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <irCommandProcessor+0x1ac>
    24de:	de c0       	rjmp	.+444    	; 0x269c <irCommandProcessor+0x368>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <displayMessage>
    24e6:	c8 01       	movw	r24, r16
    24e8:	0e 94 f6 06 	call	0xdec	; 0xdec <printIP>
    24ec:	b7 c0       	rjmp	.+366    	; 0x265c <irCommandProcessor+0x328>
    24ee:	80 91 e6 06 	lds	r24, 0x06E6
    24f2:	80 ff       	sbrs	r24, 0
    24f4:	cd c0       	rjmp	.+410    	; 0x2690 <irCommandProcessor+0x35c>
    24f6:	c7 01       	movw	r24, r14
    24f8:	0e 94 14 10 	call	0x2028	; 0x2028 <SocketSelect>
    24fc:	8c 01       	movw	r16, r24
    24fe:	e8 16       	cp	r14, r24
    2500:	f9 06       	cpc	r15, r25
    2502:	09 f4       	brne	.+2      	; 0x2506 <irCommandProcessor+0x1d2>
    2504:	c3 c0       	rjmp	.+390    	; 0x268c <irCommandProcessor+0x358>
    2506:	be 01       	movw	r22, r28
    2508:	6b 5f       	subi	r22, 0xFB	; 251
    250a:	7f 4f       	sbci	r23, 0xFF	; 255
    250c:	0e 94 81 11 	call	0x2302	; 0x2302 <Get_IP>
    2510:	88 23       	and	r24, r24
    2512:	19 f4       	brne	.+6      	; 0x251a <irCommandProcessor+0x1e6>
    2514:	c3 c0       	rjmp	.+390    	; 0x269c <irCommandProcessor+0x368>
    2516:	0f 5f       	subi	r16, 0xFF	; 255
    2518:	1f 4f       	sbci	r17, 0xFF	; 255
    251a:	f8 01       	movw	r30, r16
    251c:	80 81       	ld	r24, Z
    251e:	8a 33       	cpi	r24, 0x3A	; 58
    2520:	11 f0       	breq	.+4      	; 0x2526 <irCommandProcessor+0x1f2>
    2522:	88 23       	and	r24, r24
    2524:	c1 f7       	brne	.-16     	; 0x2516 <irCommandProcessor+0x1e2>
    2526:	8a 33       	cpi	r24, 0x3A	; 58
    2528:	09 f0       	breq	.+2      	; 0x252c <irCommandProcessor+0x1f8>
    252a:	b0 c0       	rjmp	.+352    	; 0x268c <irCommandProcessor+0x358>
    252c:	be 01       	movw	r22, r28
    252e:	6d 5f       	subi	r22, 0xFD	; 253
    2530:	7f 4f       	sbci	r23, 0xFF	; 255
    2532:	c8 01       	movw	r24, r16
    2534:	01 96       	adiw	r24, 0x01	; 1
    2536:	0e 94 35 06 	call	0xc6a	; 0xc6a <s2p>
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	89 2b       	or	r24, r25
    2540:	09 f0       	breq	.+2      	; 0x2544 <irCommandProcessor+0x210>
    2542:	ae c0       	rjmp	.+348    	; 0x26a0 <irCommandProcessor+0x36c>
    2544:	a3 c0       	rjmp	.+326    	; 0x268c <irCommandProcessor+0x358>
    2546:	90 93 f2 06 	sts	0x06F2, r25
    254a:	17 c0       	rjmp	.+46     	; 0x257a <irCommandProcessor+0x246>
    254c:	c7 01       	movw	r24, r14
    254e:	0e 94 14 10 	call	0x2028	; 0x2028 <SocketSelect>
    2552:	e8 16       	cp	r14, r24
    2554:	f9 06       	cpc	r15, r25
    2556:	09 f4       	brne	.+2      	; 0x255a <irCommandProcessor+0x226>
    2558:	c8 c0       	rjmp	.+400    	; 0x26ea <irCommandProcessor+0x3b6>
    255a:	e0 91 ed 06 	lds	r30, 0x06ED
    255e:	ff 27       	eor	r31, r31
    2560:	e2 51       	subi	r30, 0x12	; 18
    2562:	f9 4f       	sbci	r31, 0xF9	; 249
    2564:	80 81       	ld	r24, Z
    2566:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    256a:	04 97       	sbiw	r24, 0x04	; 4
    256c:	11 f0       	breq	.+4      	; 0x2572 <irCommandProcessor+0x23e>
    256e:	1d e8       	ldi	r17, 0x8D	; 141
    2570:	bc c0       	rjmp	.+376    	; 0x26ea <irCommandProcessor+0x3b6>
    2572:	80 91 ed 06 	lds	r24, 0x06ED
    2576:	80 93 f2 06 	sts	0x06F2, r24
    257a:	10 92 ec 06 	sts	0x06EC, r1
    257e:	10 92 eb 06 	sts	0x06EB, r1
    2582:	86 e0       	ldi	r24, 0x06	; 6
    2584:	80 93 ea 06 	sts	0x06EA, r24
    2588:	87 c0       	rjmp	.+270    	; 0x2698 <irCommandProcessor+0x364>
    258a:	c7 01       	movw	r24, r14
    258c:	0e 94 14 10 	call	0x2028	; 0x2028 <SocketSelect>
    2590:	e8 16       	cp	r14, r24
    2592:	f9 06       	cpc	r15, r25
    2594:	79 f0       	breq	.+30     	; 0x25b4 <irCommandProcessor+0x280>
    2596:	e0 91 ed 06 	lds	r30, 0x06ED
    259a:	ff 27       	eor	r31, r31
    259c:	e2 51       	subi	r30, 0x12	; 18
    259e:	f9 4f       	sbci	r31, 0xF9	; 249
    25a0:	80 81       	ld	r24, Z
    25a2:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <tcp_close>
    25a6:	e0 91 ed 06 	lds	r30, 0x06ED
    25aa:	ff 27       	eor	r31, r31
    25ac:	e2 51       	subi	r30, 0x12	; 18
    25ae:	f9 4f       	sbci	r31, 0xF9	; 249
    25b0:	10 82       	st	Z, r1
    25b2:	72 c0       	rjmp	.+228    	; 0x2698 <irCommandProcessor+0x364>
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    25ba:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
    25be:	8d e2       	ldi	r24, 0x2D	; 45
    25c0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    25ca:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
    25ce:	8d c0       	rjmp	.+282    	; 0x26ea <irCommandProcessor+0x3b6>
    25d0:	c7 01       	movw	r24, r14
    25d2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <udpcmd>
    25d6:	03 c0       	rjmp	.+6      	; 0x25de <irCommandProcessor+0x2aa>
    25d8:	c7 01       	movw	r24, r14
    25da:	0e 94 36 20 	call	0x406c	; 0x406c <sRegister>
    25de:	18 2f       	mov	r17, r24
    25e0:	84 c0       	rjmp	.+264    	; 0x26ea <irCommandProcessor+0x3b6>

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	a0 e0       	ldi	r26, 0x00	; 0
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	2b c0       	rjmp	.+86     	; 0x2640 <irCommandProcessor+0x30c>
    25ea:	83 35       	cpi	r24, 0x53	; 83
    25ec:	91 05       	cpc	r25, r1
    25ee:	39 f4       	brne	.+14     	; 0x25fe <irCommandProcessor+0x2ca>
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	0e 94 2d 09 	call	0x125a	; 0x125a <global_init>
    25f6:	82 30       	cpi	r24, 0x02	; 2
    25f8:	09 f0       	breq	.+2      	; 0x25fc <irCommandProcessor+0x2c8>
    25fa:	48 c0       	rjmp	.+144    	; 0x268c <irCommandProcessor+0x358>
    25fc:	4d c0       	rjmp	.+154    	; 0x2698 <irCommandProcessor+0x364>
    25fe:	8c 34       	cpi	r24, 0x4C	; 76
    2600:	91 05       	cpc	r25, r1
    2602:	41 f4       	brne	.+16     	; 0x2614 <irCommandProcessor+0x2e0>
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	0e 94 2d 09 	call	0x125a	; 0x125a <global_init>
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	09 f4       	brne	.+2      	; 0x2610 <irCommandProcessor+0x2dc>
    260e:	44 c0       	rjmp	.+136    	; 0x2698 <irCommandProcessor+0x364>
    2610:	16 e8       	ldi	r17, 0x86	; 134
    2612:	6b c0       	rjmp	.+214    	; 0x26ea <irCommandProcessor+0x3b6>
    2614:	be 01       	movw	r22, r28
    2616:	6d 5f       	subi	r22, 0xFD	; 253
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	c7 01       	movw	r24, r14
    261c:	0e 94 35 06 	call	0xc6a	; 0xc6a <s2p>
    2620:	e8 16       	cp	r14, r24
    2622:	f9 06       	cpc	r15, r25
    2624:	99 f1       	breq	.+102    	; 0x268c <irCommandProcessor+0x358>
    2626:	f7 01       	movw	r30, r14
    2628:	80 81       	ld	r24, Z
    262a:	8d 33       	cpi	r24, 0x3D	; 61
    262c:	69 f4       	brne	.+26     	; 0x2648 <irCommandProcessor+0x314>
    262e:	be 01       	movw	r22, r28
    2630:	6f 5f       	subi	r22, 0xFF	; 255
    2632:	7f 4f       	sbci	r23, 0xFF	; 255
    2634:	c7 01       	movw	r24, r14
    2636:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	ab 81       	ldd	r26, Y+3	; 0x03
    263e:	bc 81       	ldd	r27, Y+4	; 0x04

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    2640:	08 2e       	mov	r0, r24
    2642:	0e 94 bd 24 	call	0x497a	; 0x497a <__eeprom_write_byte_1C1D1E>
    2646:	28 c0       	rjmp	.+80     	; 0x2698 <irCommandProcessor+0x364>
    2648:	ab 81       	ldd	r26, Y+3	; 0x03
    264a:	bc 81       	ldd	r27, Y+4	; 0x04
uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    264c:	0e 94 b5 24 	call	0x496a	; 0x496a <__eeprom_read_byte_1C1D1E>
    2650:	80 2d       	mov	r24, r0
    2652:	99 27       	eor	r25, r25
    2654:	9c 83       	std	Y+4, r25	; 0x04
    2656:	8b 83       	std	Y+3, r24	; 0x03
    2658:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
    265c:	1f ef       	ldi	r17, 0xFF	; 255
    265e:	45 c0       	rjmp	.+138    	; 0x26ea <irCommandProcessor+0x3b6>
    2660:	82 e2       	ldi	r24, 0x22	; 34
    2662:	92 e0       	ldi	r25, 0x02	; 2
    2664:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
    2668:	14 be       	out	0x34, r1	; 52
    266a:	e0 91 1a 02 	lds	r30, 0x021A
    266e:	f0 91 1b 02 	lds	r31, 0x021B
    2672:	85 ef       	ldi	r24, 0xF5	; 245
    2674:	91 e5       	ldi	r25, 0x51	; 81
    2676:	93 83       	std	Z+3, r25	; 0x03
    2678:	82 83       	std	Z+2, r24	; 0x02
    267a:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__data_load_end+0x24c2>
    267e:	35 c0       	rjmp	.+106    	; 0x26ea <irCommandProcessor+0x3b6>
    2680:	0e 94 14 03 	call	0x628	; 0x628 <enc28j60RegDump>
    2684:	32 c0       	rjmp	.+100    	; 0x26ea <irCommandProcessor+0x3b6>
    2686:	0e 94 51 04 	call	0x8a2	; 0x8a2 <nic_intialize>
    268a:	06 c0       	rjmp	.+12     	; 0x2698 <irCommandProcessor+0x364>
    268c:	14 e0       	ldi	r17, 0x04	; 4
    268e:	2d c0       	rjmp	.+90     	; 0x26ea <irCommandProcessor+0x3b6>
    2690:	13 e8       	ldi	r17, 0x83	; 131
    2692:	2b c0       	rjmp	.+86     	; 0x26ea <irCommandProcessor+0x3b6>
    2694:	16 e0       	ldi	r17, 0x06	; 6
    2696:	29 c0       	rjmp	.+82     	; 0x26ea <irCommandProcessor+0x3b6>
    2698:	10 e0       	ldi	r17, 0x00	; 0
    269a:	27 c0       	rjmp	.+78     	; 0x26ea <irCommandProcessor+0x3b6>
    269c:	16 e9       	ldi	r17, 0x96	; 150
    269e:	25 c0       	rjmp	.+74     	; 0x26ea <irCommandProcessor+0x3b6>
    26a0:	e0 91 ed 06 	lds	r30, 0x06ED
    26a4:	ff 27       	eor	r31, r31
    26a6:	e2 51       	subi	r30, 0x12	; 18
    26a8:	f9 4f       	sbci	r31, 0xF9	; 249
    26aa:	80 81       	ld	r24, Z
    26ac:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <tcp_close>
    26b0:	80 91 ed 06 	lds	r24, 0x06ED
    26b4:	08 2f       	mov	r16, r24
    26b6:	11 27       	eor	r17, r17
    26b8:	4b 81       	ldd	r20, Y+3	; 0x03
    26ba:	5c 81       	ldd	r21, Y+4	; 0x04
    26bc:	6d 81       	ldd	r22, Y+5	; 0x05
    26be:	7e 81       	ldd	r23, Y+6	; 0x06
    26c0:	8f 81       	ldd	r24, Y+7	; 0x07
    26c2:	98 85       	ldd	r25, Y+8	; 0x08
    26c4:	21 e2       	ldi	r18, 0x21	; 33
    26c6:	31 e1       	ldi	r19, 0x11	; 17
    26c8:	0e 94 55 1b 	call	0x36aa	; 0x36aa <tcp_open>
    26cc:	02 51       	subi	r16, 0x12	; 18
    26ce:	19 4f       	sbci	r17, 0xF9	; 249
    26d0:	f8 01       	movw	r30, r16
    26d2:	80 83       	st	Z, r24
    26d4:	90 91 ed 06 	lds	r25, 0x06ED
    26d8:	e9 2f       	mov	r30, r25
    26da:	ff 27       	eor	r31, r31
    26dc:	e2 51       	subi	r30, 0x12	; 18
    26de:	f9 4f       	sbci	r31, 0xF9	; 249
    26e0:	80 81       	ld	r24, Z
    26e2:	88 23       	and	r24, r24
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <irCommandProcessor+0x3b4>
    26e6:	2f cf       	rjmp	.-418    	; 0x2546 <irCommandProcessor+0x212>
    26e8:	1c e8       	ldi	r17, 0x8C	; 140
    26ea:	81 2f       	mov	r24, r17
    26ec:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <displayMessage>
    26f0:	28 96       	adiw	r28, 0x08	; 8
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	df 90       	pop	r13
    270a:	cf 90       	pop	r12
    270c:	08 95       	ret

0000270e <irCommand>:
    270e:	1f 93       	push	r17
    2710:	98 2f       	mov	r25, r24
    2712:	87 ff       	sbrs	r24, 7
    2714:	02 c0       	rjmp	.+4      	; 0x271a <irCommand+0xc>
    2716:	11 e0       	ldi	r17, 0x01	; 1
    2718:	61 c0       	rjmp	.+194    	; 0x27dc <irCommand+0xce>
    271a:	80 91 b5 02 	lds	r24, 0x02B5
    271e:	9d 30       	cpi	r25, 0x0D	; 13
    2720:	01 f5       	brne	.+64     	; 0x2762 <irCommand+0x54>
    2722:	88 23       	and	r24, r24
    2724:	11 f4       	brne	.+4      	; 0x272a <irCommand+0x1c>
    2726:	10 e0       	ldi	r17, 0x00	; 0
    2728:	17 c0       	rjmp	.+46     	; 0x2758 <irCommand+0x4a>
    272a:	e8 2f       	mov	r30, r24
    272c:	ff 27       	eor	r31, r31
    272e:	ed 58       	subi	r30, 0x8D	; 141
    2730:	f8 4f       	sbci	r31, 0xF8	; 248
    2732:	10 82       	st	Z, r1
    2734:	8f e1       	ldi	r24, 0x1F	; 31
    2736:	92 e0       	ldi	r25, 0x02	; 2
    2738:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
    273c:	8a e0       	ldi	r24, 0x0A	; 10
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
    2744:	02 c0       	rjmp	.+4      	; 0x274a <irCommand+0x3c>
    2746:	0e 94 55 08 	call	0x10aa	; 0x10aa <CONSOLE_getch>
    274a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CONSOLE_kbhit>
    274e:	88 23       	and	r24, r24
    2750:	d1 f7       	brne	.-12     	; 0x2746 <irCommand+0x38>
    2752:	0e 94 9a 11 	call	0x2334	; 0x2334 <irCommandProcessor>
    2756:	11 e0       	ldi	r17, 0x01	; 1
    2758:	10 92 b5 02 	sts	0x02B5, r1
    275c:	10 92 b6 02 	sts	0x02B6, r1
    2760:	3d c0       	rjmp	.+122    	; 0x27dc <irCommand+0xce>
    2762:	88 23       	and	r24, r24
    2764:	a9 f0       	breq	.+42     	; 0x2790 <irCommand+0x82>
    2766:	98 30       	cpi	r25, 0x08	; 8
    2768:	51 f4       	brne	.+20     	; 0x277e <irCommand+0x70>
    276a:	81 50       	subi	r24, 0x01	; 1
    276c:	80 93 b5 02 	sts	0x02B5, r24
    2770:	8f 3f       	cpi	r24, 0xFF	; 255
    2772:	41 f5       	brne	.+80     	; 0x27c4 <irCommand+0xb6>
    2774:	10 92 b5 02 	sts	0x02B5, r1
    2778:	10 92 b6 02 	sts	0x02B6, r1
    277c:	23 c0       	rjmp	.+70     	; 0x27c4 <irCommand+0xb6>
    277e:	8f 33       	cpi	r24, 0x3F	; 63
    2780:	08 f5       	brcc	.+66     	; 0x27c4 <irCommand+0xb6>
    2782:	e8 2f       	mov	r30, r24
    2784:	ff 27       	eor	r31, r31
    2786:	ed 58       	subi	r30, 0x8D	; 141
    2788:	f8 4f       	sbci	r31, 0xF8	; 248
    278a:	90 83       	st	Z, r25
    278c:	8f 5f       	subi	r24, 0xFF	; 255
    278e:	0b c0       	rjmp	.+22     	; 0x27a6 <irCommand+0x98>
    2790:	80 91 b6 02 	lds	r24, 0x02B6
    2794:	88 23       	and	r24, r24
    2796:	a1 f4       	brne	.+40     	; 0x27c0 <irCommand+0xb2>
    2798:	89 2f       	mov	r24, r25
    279a:	8f 7d       	andi	r24, 0xDF	; 223
    279c:	89 34       	cpi	r24, 0x49	; 73
    279e:	31 f4       	brne	.+12     	; 0x27ac <irCommand+0x9e>
    27a0:	90 93 73 07 	sts	0x0773, r25
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	80 93 b5 02 	sts	0x02B5, r24
    27aa:	0c c0       	rjmp	.+24     	; 0x27c4 <irCommand+0xb6>
    27ac:	9a 30       	cpi	r25, 0x0A	; 10
    27ae:	11 f0       	breq	.+4      	; 0x27b4 <irCommand+0xa6>
    27b0:	90 32       	cpi	r25, 0x20	; 32
    27b2:	19 f4       	brne	.+6      	; 0x27ba <irCommand+0xac>
    27b4:	10 92 b6 02 	sts	0x02B6, r1
    27b8:	03 c0       	rjmp	.+6      	; 0x27c0 <irCommand+0xb2>
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	80 93 b6 02 	sts	0x02B6, r24
    27c0:	10 e0       	ldi	r17, 0x00	; 0
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <irCommand+0xb8>
    27c4:	11 e0       	ldi	r17, 0x01	; 1
    27c6:	80 91 75 03 	lds	r24, 0x0375
    27ca:	80 ff       	sbrs	r24, 0
    27cc:	07 c0       	rjmp	.+14     	; 0x27dc <irCommand+0xce>
    27ce:	11 23       	and	r17, r17
    27d0:	29 f0       	breq	.+10     	; 0x27dc <irCommand+0xce>
    27d2:	9a 30       	cpi	r25, 0x0A	; 10
    27d4:	19 f0       	breq	.+6      	; 0x27dc <irCommand+0xce>
    27d6:	89 2f       	mov	r24, r25
    27d8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
    27dc:	81 2f       	mov	r24, r17
    27de:	99 27       	eor	r25, r25
    27e0:	1f 91       	pop	r17
    27e2:	08 95       	ret

000027e4 <irCommands>:
	}
}


//
//	Rewrite for 4 modes:
//
//		Modem command mode		= some IR commands, all AT commands
//		Modem Data Mode			= Standard Modem Data Mode
//		internet command mode	= IR command modes only   
//		Streaming Socket Mode	= data mode connected to a socket
//
//
void
irCommands(void)
{
    27e4:	ef 92       	push	r14
    27e6:	ff 92       	push	r15
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    char 	c;
	U8		i,flag=0;
	U8 		result;
	U8		tcp_count=0;


#ifdef PPP
    ircmd_state = IR_MODEM_COMMAND;
#else
	ircmd_state	= IR_INTERNET_COMMAND;
    27ec:	84 e0       	ldi	r24, 0x04	; 4
    27ee:	80 93 ea 06 	sts	0x06EA, r24
#endif    
	ircmd_buf[0] = 0;                                                                    
    27f2:	10 92 73 07 	sts	0x0773, r1
    TCPSendFlag=0;
    27f6:	10 92 b7 02 	sts	0x02B7, r1
//	EE_Read_Address=0;
	//
	// Initialize UDP variables
	//
/*	
	udp_sp=0;
	udp_ip.ip32=0;
	udp_len=0;
	udp_ptr=0;
*/

	// Set current Link State
	elink=nicIsLinked();
    27fa:	0e 94 b6 01 	call	0x36c	; 0x36c <nicIsLinked>
    27fe:	80 93 e6 06 	sts	0x06E6, r24
	
	/*
	if(mm.network_config & DHCP_ENABLE)
	{
		// Set bootup initial message flag
		elink|=0x80;
	}
	else
	{
		if(elink & 0x1)
			displayMessage(MSG_CONNECT);
		else
			// Set bootup initial message flag
			elink|=0x80;
	}
*/
	//dtr_setup();
    TIMER_Wait_Tick(10);
    2802:	8a e0       	ldi	r24, 0x0A	; 10
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 01 09 	call	0x1202	; 0x1202 <TIMER_Wait_Tick>
    280a:	ee 24       	eor	r14, r14

	if(mm.network_config & DHCP_ENABLE)
	{
		// If DHCP is enabled and this is boot, let clear the IP address if
		// it came out of EEPROM.

	}

	//
	// Pass through anything buffered from the devices.
	//
#ifdef PPP
	DEBUG2("passthrough"CRLF);
	passthrough();
#endif

//ss=TIMER_Get_Second();


	DEBUG2("starting main loop"CRLF);
	//
	// Main Loop,  All actions are called from this loop, this loop never exits.
	// If you need a task it must be non blocking and called from this loop.
	//
	for(;;)
	{    
	//	int ss;
	
	//	if(ss!=TIMER_Get_Second())
//	/	{
//			ss=TIMER_Get_Second();
//			DEBUG1(".");
//		}

		/* slow down the main loop for debugging purposes */
		//TIMER_Wait_Tick(40);     
		//
		// This should be removed, the serial interrupt should be hooked
		// directly up to interrupt.
		poll_serial();	
    280c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <poll_serial>

		// For Miguel's customer
		if(TCP_OPEN==tcp_status(sockets[0]) && CTS0_ISON())
    2810:	80 91 ee 06 	lds	r24, 0x06EE
    2814:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    2818:	04 97       	sbiw	r24, 0x04	; 4
    281a:	21 f4       	brne	.+8      	; 0x2824 <irCommands+0x40>
    281c:	0a 99       	sbic	0x01, 2	; 1
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <irCommands+0x40>
			MIG_ON();
    2820:	a8 98       	cbi	0x15, 0	; 21
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <irCommands+0x42>
		else
			MIG_OFF();
    2824:	a8 9a       	sbi	0x15, 0	; 21

		//
		// Stuff we don't have to process alot.  We check every 255 times through the loop
		// For now TCP, ppp_passive, check carrier, check reset EEPROM
		//
		tcp_count++;
    2826:	e3 94       	inc	r14
		if(0==tcp_count)				// TCP count rolls to zero every 255 counts
    2828:	09 f0       	breq	.+2      	; 0x282c <irCommands+0x48>
    282a:	5e c0       	rjmp	.+188    	; 0x28e8 <irCommands+0x104>
		{
			// TCP process background process
			tcp_process(0);
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	0e 94 44 17 	call	0x2e88	; 0x2e88 <tcp_process>
			// DHCP process background process if DHCP is enabled
			if(mm.network_config & DHCP_ENABLE)
    2832:	80 91 83 03 	lds	r24, 0x0383
    2836:	80 ff       	sbrs	r24, 0
    2838:	07 c0       	rjmp	.+14     	; 0x2848 <irCommands+0x64>
			{
				dhcp_process(elink&0x01);
    283a:	80 91 e6 06 	lds	r24, 0x06E6
    283e:	99 27       	eor	r25, r25
    2840:	81 70       	andi	r24, 0x01	; 1
    2842:	90 70       	andi	r25, 0x00	; 0
    2844:	0e 94 28 23 	call	0x4650	; 0x4650 <dhcp_process>
				
			//	if((dhcp_process(elink&0x01)) && (elink&0x80))							// send link state, update timer, but not
			//	{
			//		elink&=~0x80;						// reset flag
			//		displayMessage(MSG_CONNECT);
					//printByte(dhcp_process(elink&0x1));
					//printByte(elink&0x80);
			//	}
			}
			//
			// Check for a reset EEPROM action, press SW5 for 10 seconds
			//
			Check_Reset_EEPROM();
    2848:	0e 94 50 10 	call	0x20a0	; 0x20a0 <Check_Reset_EEPROM>
			//
			// Check Link  elink = 0x1 set is link up,  Should we set DCD?
			//
			if(nicIsLinked()!=(elink&0x01))
    284c:	0e 94 b6 01 	call	0x36c	; 0x36c <nicIsLinked>
    2850:	20 91 e6 06 	lds	r18, 0x06E6
    2854:	33 27       	eor	r19, r19
    2856:	21 70       	andi	r18, 0x01	; 1
    2858:	30 70       	andi	r19, 0x00	; 0
    285a:	82 17       	cp	r24, r18
    285c:	93 07       	cpc	r25, r19
    285e:	b1 f0       	breq	.+44     	; 0x288c <irCommands+0xa8>
			{
				if(nicIsLinked())
    2860:	0e 94 b6 01 	call	0x36c	; 0x36c <nicIsLinked>
    2864:	20 91 e6 06 	lds	r18, 0x06E6
    2868:	89 2b       	or	r24, r25
    286a:	69 f0       	breq	.+26     	; 0x2886 <irCommands+0xa2>
				{
					elink|=0x1;
    286c:	82 2f       	mov	r24, r18
    286e:	81 60       	ori	r24, 0x01	; 1
    2870:	80 93 e6 06 	sts	0x06E6, r24
					if(elink&0x80)
    2874:	87 ff       	sbrs	r24, 7
    2876:	0a c0       	rjmp	.+20     	; 0x288c <irCommands+0xa8>
					{
						elink&=~0x80;						// reset flag
    2878:	8f 77       	andi	r24, 0x7F	; 127
    287a:	80 93 e6 06 	sts	0x06E6, r24
						displayMessage(MSG_CONNECT);
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <displayMessage>
    2884:	03 c0       	rjmp	.+6      	; 0x288c <irCommands+0xa8>
					}
				}
				else
					elink&=~0x1;
    2886:	2e 7f       	andi	r18, 0xFE	; 254
    2888:	20 93 e6 06 	sts	0x06E6, r18
			}



#if 0
if(0==xcount++)
{

			printByte(sockets[0]);
			CONSOLE_puts("--");
			printByte(sockets[1]);
			CONSOLE_puts(CRLF);

			if(TCP_OPEN==tcp_status(sockets[0]))
				CONSOLE_puts("01"CRLF);
			else
				CONSOLE_puts("00"CRLF);
			if(TCP_OPEN==tcp_status(sockets[1]))
				CONSOLE_puts("11"CRLF);
			else
				CONSOLE_puts("10"CRLF);
}
#endif
			//
			// Set TCP state on pins
			//
			if(TCP_OPEN==tcp_status(sockets[0]))
    288c:	80 91 ee 06 	lds	r24, 0x06EE
    2890:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    2894:	04 97       	sbiw	r24, 0x04	; 4
    2896:	11 f4       	brne	.+4      	; 0x289c <irCommands+0xb8>
			{
				IND3_ON();
    2898:	c6 9a       	sbi	0x18, 6	; 24
    289a:	01 c0       	rjmp	.+2      	; 0x289e <irCommands+0xba>
			}
			else
			{
				IND3_OFF();
    289c:	c6 98       	cbi	0x18, 6	; 24
			}

			if(TCP_OPEN==tcp_status(sockets[1]))
    289e:	80 91 ef 06 	lds	r24, 0x06EF
    28a2:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    28a6:	04 97       	sbiw	r24, 0x04	; 4
    28a8:	11 f4       	brne	.+4      	; 0x28ae <irCommands+0xca>
			{
				IND4_ON();
    28aa:	c7 9a       	sbi	0x18, 7	; 24
    28ac:	01 c0       	rjmp	.+2      	; 0x28b0 <irCommands+0xcc>
			}
			else
			{

				IND4_OFF();
    28ae:	c7 98       	cbi	0x18, 7	; 24
			}
			//
			// Check for close socket signal from pins, make sure we bail out of
			// streaming socket mode if this socket is attached.
			//

			if(SW3())
    28b0:	9d 99       	sbic	0x13, 5	; 19
    28b2:	0c c0       	rjmp	.+24     	; 0x28cc <irCommands+0xe8>
			{
				if(TCP_OPEN==tcp_status(sockets[1]))
    28b4:	80 91 ef 06 	lds	r24, 0x06EF
    28b8:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    28bc:	04 97       	sbiw	r24, 0x04	; 4
    28be:	31 f4       	brne	.+12     	; 0x28cc <irCommands+0xe8>
				{
					tcp_close(sockets[1]);
    28c0:	80 91 ef 06 	lds	r24, 0x06EF
    28c4:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <tcp_close>
					sockets[1]=0;
    28c8:	10 92 ef 06 	sts	0x06EF, r1
				}
			}
			if(SW2())
    28cc:	9c 99       	sbic	0x13, 4	; 19
    28ce:	0c c0       	rjmp	.+24     	; 0x28e8 <irCommands+0x104>
			{
				if(TCP_OPEN==tcp_status(sockets[0]))
    28d0:	80 91 ee 06 	lds	r24, 0x06EE
    28d4:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    28d8:	04 97       	sbiw	r24, 0x04	; 4
    28da:	31 f4       	brne	.+12     	; 0x28e8 <irCommands+0x104>
				{
					tcp_close(sockets[0]);
    28dc:	80 91 ee 06 	lds	r24, 0x06EE
    28e0:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <tcp_close>
					sockets[0]=0;
    28e4:	10 92 ee 06 	sts	0x06EE, r1
				}
			}
		

	
#ifdef PPP
			//
			// Check the Carrier and other modem signals
			//
			Check_Carrier();
			//
			// Check Passive PPP states
			//
			ppp_passive();
#endif
		}
		//
		// Check if we have an escape  +++ check this
		//
		if(EscapeAction())
    28e8:	0e 94 9a 10 	call	0x2134	; 0x2134 <EscapeAction>
    28ec:	88 23       	and	r24, r24
    28ee:	c9 f0       	breq	.+50     	; 0x2922 <irCommands+0x13e>
		{    
			if((IR_MODEM_DATA==ircmd_state) || (IR_STREAM_SOCKET==ircmd_state ))
    28f0:	80 91 ea 06 	lds	r24, 0x06EA
    28f4:	83 30       	cpi	r24, 0x03	; 3
    28f6:	49 f0       	breq	.+18     	; 0x290a <irCommands+0x126>
    28f8:	86 30       	cpi	r24, 0x06	; 6
    28fa:	99 f4       	brne	.+38     	; 0x2922 <irCommands+0x13e>
			{
     
				if(ircmd_state==IR_STREAM_SOCKET)  
				{
					ircmd_state=IR_INTERNET_COMMAND;
    28fc:	84 e0       	ldi	r24, 0x04	; 4
    28fe:	80 93 ea 06 	sts	0x06EA, r24
					TCPSend(1);							// currently streamed socket  
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	0e 94 3d 11 	call	0x227a	; 0x227a <TCPSend>
    2908:	03 c0       	rjmp	.+6      	; 0x2910 <irCommands+0x12c>
				}
				else
				{
					ircmd_state=IR_MODEM_COMMAND;    
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	80 93 ea 06 	sts	0x06EA, r24
//CONSOLE_puts("this shouldn't happen in unetE\n");					
				}
				CONSOLE_puts(CRLF);
    2910:	8f e1       	ldi	r24, 0x1F	; 31
    2912:	92 e0       	ldi	r25, 0x02	; 2
    2914:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
				displayMessage(0);
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <displayMessage>
				EscapeReset();
    291e:	0e 94 b9 10 	call	0x2172	; 0x2172 <EscapeReset>
			}
		}                 
        //
        // Check for data comming in from USER (CPU uart)
        //
		if(CONSOLE_kbhit())
    2922:	0e 94 64 08 	call	0x10c8	; 0x10c8 <CONSOLE_kbhit>
    2926:	88 23       	and	r24, r24
    2928:	49 f1       	breq	.+82     	; 0x297c <irCommands+0x198>
		{
			DEBUG5("kbhit"CRLF);
			// get the char from the USER		
			c=CONSOLE_getch();
    292a:	0e 94 55 08 	call	0x10aa	; 0x10aa <CONSOLE_getch>
    292e:	f8 2e       	mov	r15, r24

			// Depending on state do somthing
			switch(ircmd_state)
    2930:	80 91 ea 06 	lds	r24, 0x06EA
    2934:	84 30       	cpi	r24, 0x04	; 4
    2936:	19 f0       	breq	.+6      	; 0x293e <irCommands+0x15a>
    2938:	86 30       	cpi	r24, 0x06	; 6
    293a:	01 f5       	brne	.+64     	; 0x297c <irCommands+0x198>
    293c:	06 c0       	rjmp	.+12     	; 0x294a <irCommands+0x166>
			{
#ifdef PPP	
			case 	IR_MODEM_COMMAND:   
				
				// Check irCommand processor
    			if(!irCommand(c))
    			{             
    				//
    				// Not irCommand sequence, pass through.
    				//
					DEBUG5("modemputch1");
    				MODEM_putch(c);    
    				DEBUG5("."CRLF);
    			}     
  				break;				
			case	IR_MODEM_ONLY:
				DEBUG5("modemputch2");
				MODEM_putch(c);
				DEBUG3("."CRLF);
				break;					
			case 	IR_MODEM_DATA: 
                //
                // Look for escape sequence
                //                         
				if(mm.IMMConfig & DATA_MODE_ESCAPE)				
                {
	                result=EscapeSequence(c);
    	            if(result!=0xff)
        	        {
            	    	if(result>0)
                		{
	                		for(i=0;i<result;i++)
    	            			MODEM_putch(mm.escapeChar);
        	        	}
            	   		MODEM_putch(c);
                	}
				}
				else
				{
					MODEM_putch(c);
				}
				break;
#endif				
			case    IR_INTERNET_COMMAND:
				if(!irCommand(c))
    293e:	8f 2d       	mov	r24, r15
    2940:	0e 94 87 13 	call	0x270e	; 0x270e <irCommand>
    			{
					//
					// Not procession an IR command, do nothing  
					//
    			}
				EscapeReset();
    2944:	0e 94 b9 10 	call	0x2172	; 0x2172 <EscapeReset>
    2948:	19 c0       	rjmp	.+50     	; 0x297c <irCommands+0x198>
				break;
										
			case IR_STREAM_SOCKET:			
				result=EscapeSequence(c);			                              
    294a:	8f 2d       	mov	r24, r15
    294c:	0e 94 c4 10 	call	0x2188	; 0x2188 <EscapeSequence>
    2950:	08 2f       	mov	r16, r24
				if(result!=0xff)
    2952:	8f 3f       	cpi	r24, 0xFF	; 255
    2954:	99 f0       	breq	.+38     	; 0x297c <irCommands+0x198>
				{				
					if(result>0)
    2956:	88 23       	and	r24, r24
    2958:	f1 f4       	brne	.+60     	; 0x2996 <irCommands+0x1b2>
    295a:	07 c0       	rjmp	.+14     	; 0x296a <irCommands+0x186>
					{
						for(i=0;i<result;i++) 
							WriteTCPChar(mm.escapeChar);
    295c:	80 91 76 03 	lds	r24, 0x0376
    2960:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <WriteTCPChar>
    2964:	1f 5f       	subi	r17, 0xFF	; 255
    2966:	10 17       	cp	r17, r16
    2968:	c9 f7       	brne	.-14     	; 0x295c <irCommands+0x178>
					}					
					if(0!=WriteTCPChar(c))
    296a:	8f 2d       	mov	r24, r15
    296c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <WriteTCPChar>
    2970:	88 23       	and	r24, r24
    2972:	21 f0       	breq	.+8      	; 0x297c <irCommands+0x198>
					{
						// Cannot write any more, push back char
						CONSOLE_pushch(c);
    2974:	8f 2d       	mov	r24, r15
    2976:	99 27       	eor	r25, r25
    2978:	0e 94 77 08 	call	0x10ee	; 0x10ee <CONSOLE_pushch>
						//DEBUG1("*");
					}                 
				}	
				break;	
            }     
		}		
		
		//
		// Check for data commin in from MODEM
		//		Only valid for modem command and data modes.    
		//                                
        if(ircmd_state & 0x1)
    297c:	80 91 ea 06 	lds	r24, 0x06EA
    2980:	80 fd       	sbrc	r24, 0
    2982:	44 cf       	rjmp	.-376    	; 0x280c <irCommands+0x28>
		{
			
#ifdef PPP
			passthrough();
#endif

        }
        else
        {
			//
			// In the streaming socket state send and receive data on the TCP streaming
			//	socket.
			//
        	if(ircmd_state==IR_STREAM_SOCKET)
    2984:	86 30       	cpi	r24, 0x06	; 6
    2986:	09 f0       	breq	.+2      	; 0x298a <irCommands+0x1a6>
    2988:	41 cf       	rjmp	.-382    	; 0x280c <irCommands+0x28>
        	{
				//
				// check for TCP send pending
				//             
				flag=TCPSend(0);    
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	0e 94 3d 11 	call	0x227a	; 0x227a <TCPSend>
				TCPState();
    2990:	0e 94 21 10 	call	0x2042	; 0x2042 <TCPState>
    2994:	3b cf       	rjmp	.-394    	; 0x280c <irCommands+0x28>
    2996:	10 e0       	ldi	r17, 0x00	; 0
    2998:	e1 cf       	rjmp	.-62     	; 0x295c <irCommands+0x178>

0000299a <icmp_echo_rx>:
    299a:	85 e3       	ldi	r24, 0x35	; 53
    299c:	92 e0       	ldi	r25, 0x02	; 2
    299e:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
    29a2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    29a6:	20 91 e8 06 	lds	r18, 0x06E8
    29aa:	30 91 e9 06 	lds	r19, 0x06E9
    29ae:	82 1b       	sub	r24, r18
    29b0:	93 0b       	sbc	r25, r19
    29b2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <printShort>
    29b6:	8b e3       	ldi	r24, 0x3B	; 59
    29b8:	92 e0       	ldi	r25, 0x02	; 2
    29ba:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
    29be:	80 91 e8 06 	lds	r24, 0x06E8
    29c2:	90 91 e9 06 	lds	r25, 0x06E9
    29c6:	88 5e       	subi	r24, 0xE8	; 232
    29c8:	93 40       	sbci	r25, 0x03	; 3
    29ca:	90 93 e9 06 	sts	0x06E9, r25
    29ce:	80 93 e8 06 	sts	0x06E8, r24
    29d2:	10 92 e7 06 	sts	0x06E7, r1
    29d6:	08 95       	ret

000029d8 <tcp_init>:
// tcp_init() - just init the tcp socket table.
//-----------------------------------------------------------------------------
void
tcp_init()
{
    29d8:	10 92 b5 07 	sts	0x07B5, r1
#ifndef DEMO
U8	i;
	
	for(i=0;i<MAX_TCP_SOCKETS;i++)
	{
		tcp_socket[i].state=0;
		tcp_socket[i].packets=0;
    29dc:	10 92 d0 07 	sts	0x07D0, r1
    29e0:	10 92 cf 07 	sts	0x07CF, r1
    29e4:	10 92 d1 07 	sts	0x07D1, r1
    29e8:	10 92 ec 07 	sts	0x07EC, r1
    29ec:	10 92 eb 07 	sts	0x07EB, r1
    29f0:	08 95       	ret

000029f2 <tcp_listen>:
	}
#endif
}

/*
get_header_buffer()
{
}

free_packet()
{
}
*/
//-----------------------------------------------------------------------------
// tcp_upcall() - 
//
//	this handles incoming TCP packets/segments.  ++++ fix receiving retries no calling upcall
//
//-----------------------------------------------------------------------------
void
tcp_upcall(IP *ip, TCP *tcp, U16 len)
{
#ifndef DEMO
U16			tchk=0;
U16			protocol,i;
S16			data_len,processed_len;
U8			state,sendnow=0,ack=0;
TCPRSTSOC	rst_soc;
MEMBLOCK	*memblock;

DEBUG4("!");
	//
	// Check the TCP checksum 
	//	
	// First do psudo header
	//
	len-=sizeof(IP);
	i=swap(len);
	protocol=swap(PROT_TCP);
	//protocol=PROT_UDP;
	tchk=Checksum_16(0,(U16 *)&ip->source_ip,8);
	tchk=Checksum_16(tchk,(U16 *)&i,2);
	tchk=Checksum_16(tchk,(U16 *)&protocol,2);
	tchk=Checksum_16(tchk,(U16 *)&tcp->source_port,len);

	if(tchk!=0)
	{
		DEBUG4("Bad TCP Checksum"CRLF);
		return;
	}
	//
	// Find the data length of the segment, length of IP packet minus IP header minus
	//	TCP header.
	//
	data_len=swap(ip->length) - ( sizeof(struct ip_h) + (tcp->len >> 2) );

	//
	// Demux on dest socket, just search list
	//
	for(i=0;i<MAX_TCP_SOCKETS;i++)
	{
		// look for a match
		state=tcp_socket[i].state & TCP_STATE_MASK;
		if	((tcp_socket[i].dest_port==tcp->source_port) &&
			(tcp_socket[i].source_port==tcp->dest_port) &&
			(tcp_socket[i].dest_ip.ip32==ip->source_ip.ip32) &&
			(state!=0))
		{
			//
			// We have a Match, process the segment
			//
			//Call the app. (struct ip_h *header,U8 *data, U16 len));
			//tcp_socket[i].socket_callback(ip,tcp,len);
//			DEBUG4("We have a match on socket %d \n"CRLF,i);	
			DEBUG4("We have a match on socket"CRLF);
			//
			// Handle Acking of data first
			//
			if(tcp->flags & TCP_ACK_FLAG)
			{
				// Set a local var that we have seen an ack flag.
				ack=1;

				DEBUG4("ACK ");
				//
				// Check incoming ACK, for now we only accept an expected              +++ Dangerous fix
				//	ACK.  This should be changed in the future to accept
				//	any ACK's that are in window.  For now we've just simplified. need to handle window wrap
				//
				if((swapl(tcp->acknum)<tcp_socket[i].un_ack) &&
					swapl(tcp->acknum>=tcp_socket[i].send_next  ))
				{
					// Bad Ack from peer +++ this should be cleaned up we should take into account window size
#ifdef DEBUG_LV4
					DEBUG4("Bad Ack? ack was ");
					printWord(swapl(tcp->acknum));
					DEBUG4(" Expected ");
					printWord(tcp_socket[i].send_next-1);
					DEBUG4(CRLF);
#endif					
					sendnow=1;
					ack+=2;
				}
				else
				{
					if(tcp_socket[i].un_ack==swapl(tcp->acknum))
					{
						DEBUG4("dup ACK"CRLF);
					}
					else
					{
	
						DEBUG4("process ACK"CRLF);
						//
						// Update unacked sequence number to reflect the current ack.
						//
						tcp_socket[i].un_ack=swapl(tcp->acknum);  //+++ dangerous fix
						//
						// Free up any tx buffer's that don't have any unacked data in them.
						//
						while(1)
						{							
							// First check to see if there are any TX bufers waiting on this socket
							if(tcp_socket[i].packets)
							{
								// Check to see if this packet has no more unacked data in it
								//if((((S16)tcp_socket[i].un_ack-tcp_socket[i].packets->ack)>=0))
								if(  ((S16)((U16)tcp_socket[i].un_ack-tcp_socket[i].packets->ack)>=0)  )
								{
									//tcp_socket[i].un_ack=tcp_socket[i].packets->ack;  ///+++ highly experimental

									// It has no more unacked data in it remove it from the list and free it.
									//DEBUG4("free packet leavon- ");
									//printWord(memblock->next);
									//DEBUG4(CRLF);

									memblock=tcp_socket[i].packets;
									tcp_socket[i].packets=memblock->next;
									
									MEM_FreeBlock(memblock);
									continue;
								}
								// We still have packets, reset the retry timer
								tcp_socket[i].timer=TIMER_Get_Tick();
							}
							else
							{
								// no more packets, set the timer to zero
								tcp_socket[i].timer=0;
							}
							break;
						}

						//
						// If ack is of a FIN
						//
						if(state==TCP_FIN_WAIT_1)
						{
							state=tcp_socket[i].state=TCP_FIN_WAIT_2;
							sendnow=1;							// we need to send an ack
						}
						if((state==TCP_LAST_ACK) || (state==TCP_CLOSE_WAIT))
						{
							tcp_socket[i].state=0;				// ack of our FIN, close socket
						}
					}
				}
			}
			//
			// Then check for RST packet
			//
			if(tcp->flags & TCP_RST_FLAG)
			{
				// We have a RST flag, for now just kill socket
				// We might want to look about freeing any memory used
				// by this socket here. +++
				tcp_clean_socket((TCPSOC *)&tcp_socket[i]);
				//tcp_socket[i].state=0; //TCP_RST;
				DEBUG4("Received Reset"CRLF);
				sendnow=0;
				break;
			}
			else
			{     // unnested begin
			//
			// Try to handle data on a socket, we can receive it in the open state and
			//	the FIN_WAIT states, we cannot accept data in any other state.
			//
			if((state==TCP_OPEN) || (state == TCP_FIN_WAIT_1) || (state == TCP_FIN_WAIT_2))
			{
				//
				// Lets look at the URG flag.  If set we will pass that info up to the
				// app as an length into the data to the URG byte.
				//
#ifdef TCP_URG_SUPPORT
				if(tcp->flags || TCP_URG_FLAG)
				{
					urg = swap(tcp->urg) - swapl(tcp->seqnum);
					DEBUG4("URG flag received, URG in %d bytes\n",);
				}
#endif
				//
				// Make sure that we only pass info that we havn't received before.this to fix
				//
				if(data_len > 0 )
				{
					//
					// Check the sequence number, we can only receive in order
					//
					if(swapl(tcp->seqnum)==tcp_socket[i].receve_next)
					{
						DEBUG3("packet data len is %d - original len %d\n",data_len,swap(ip->length));
						//
						// We need to call the upcall here to deliver the data to the
						// Application that owns the socket.
						//
						DEBUG3("tcp_upcall - We have data length %d\n on socket %d",data_len, i);
						processed_len=tcp_socket[i].socket_callback(i+1,tcp->data,data_len);
						//
						// Update the RCV.NXT sequence nubmer so we can ACK properly.
						//
						tcp_socket[i].receve_next+=processed_len;
						if(processed_len)
							sendnow=1;
					}
					else
					{
						//DEBUG4("Dropped pkt expect seq %lu --> %lu\n",tcp_socket[i].receve_next,swapl(tcp->seqnum));
						DEBUG4("Dropped pkt \n");
						sendnow=1;
					}
				}
			}

			//
			// Check for peer sending a FIN
			//
			if(tcp->flags & TCP_FIN_FLAG)
			{
				if(state==TCP_OPEN)
				{
					// we've received a FIN flag while in the ESTABLISHED state, move to
					// CLOSE_WAIT state.  Bump the ACK number by one so we can ACK the
					// Peers FIN.
					tcp_socket[i].state=TCP_CLOSE_WAIT;
//printf("tcp open fin +1 - %d\n",tcp_socket[i].receve_next);
					tcp_socket[i].receve_next+=1;			// inc to ack peer's FIN
//printf("tcp open fin +1 - %d\n",tcp_socket[i].receve_next);
					//
					// Bump up send_next(was next ack) since we expect them to ack our fin now
					//
					tcp_socket[i].send_next+=1;
					sendnow=1;
				}
				else if(state==TCP_FIN_WAIT_1)
				{
					// We've received a FIN flage while in the TCP_FIN_WAIT_1 state, move to
					// CLOSING state.  Bump the ACK nubmer by one so we can ACK the Peers FIN.
					tcp_socket[i].state=TCP_CLOSING;
					tcp_socket[i].receve_next+=1;			// inc to ack peer's FIN
//printf("tcp fin wait 1 fin +1\n");
					sendnow=1;
				}
				if(state==TCP_FIN_WAIT_2)
				{
					// We've received a FIN flage while in the TCP_FIN_WAIT_1 state, move to
					// CLOSING state.  Bump the ACK nubmer by one so we can ACK the Peers FIN.
					tcp_socket[i].state=TCP_TIME_WAIT;
					tcp_socket[i].receve_next+=1;			// inc to ack peer's FIN
//printf("tcp fin wait 2 fin +1\n");
					sendnow=1;
				}				 
			}			

			//
			// Take action if in SYN_SENT or Listen state
			//
			if((state==TCP_SYN_SENT) || (state==TCP_LISTEN))
			{
				//
				// When in TCP_SYN_SENT or TCP_LISTEN state we should get a packet with the SYN_FLAG
				//	set.
				//
				if((tcp->flags & TCP_SYN_FLAG))
				{
						// Store incoming SEQ
						tcp_socket[i].receve_next=swapl(tcp->seqnum)+1;
						if (state==TCP_LISTEN)
						{
							tcp_socket[i].state=TCP_SYN_RCVD;
						}
						else
						{
							tcp_socket[i].state=TCP_OPEN;
							//tcp_socket[i].send_next=tcp->acknum;		// Don't like this,we take whatever acks
 //tcp_socket[i].send_next+=5555;
						}
						sendnow=1;
				}
				else if(ack&2)
				{
					// send RST
					tcp_socket[i].state=TCP_RST;
					tcp_socket[i].send_next=swapl(tcp->acknum);
					sendnow=1;
				}

			} // end if((state==TCP_SYN_SENT) || (state==TCP_LISTEN))

			} // end of unnested begin
			// 
			// Should we do something now?
			//
			if(1==sendnow)
			{
				//
				// We need to send a packet now (either an ACK, RST, FIN or SYN), call 
				//	tcp_sendit(socket, data, len) - we have no data.
				//
				tcp_sendit((TCPSOC *)&tcp_socket[i],0,0);
			}
			break;	// remove this will cause a reset to be sent on socket, which can be used for testing
		}
		//break;	// exit here, don't try to loop on more sockets
	}
	//
	// If no match of socket on incoming segment, send a reset.  But don't
	// do anything if incoming packet is a reset.
	//
	if((i>=MAX_TCP_SOCKETS) && (!(tcp->flags & TCP_RST_FLAG)))
	{
		//
		// Send Reset, this is a no socket RST, use the RST socket, fill with current packet info
		//	so we can do a proper RST?
		//
		DEBUG4("no match send reset"CRLF);
		rst_soc.dest_ip.ip32	=ip->source_ip.ip32;
		rst_soc.source_port		=tcp->dest_port;
		rst_soc.dest_port		=tcp->source_port;
		rst_soc.send_next=0;
		//
		// Check ACK flag on incoming pkt
		//
	//	if(tcp->flags & TCP_ACK_FLAG)
		//	rst_soc.receve_next	=swapl(tcp->seqnum)+10;	// set seq number if ACK flag set
	//	else
	//		rst_soc.receve_next=0;						// else send zero for seq
		//
		// set acknum
		//
		if(tcp->flags & TCP_ACK_FLAG)
			rst_soc.receve_next	=swapl(tcp->seqnum)+data_len;
		else
			rst_soc.receve_next=0;  						// else send zero for seq


		rst_soc.state=TCP_RST | TCP_RST_SOCKET;
		tcp_sendit((TCPSOC *)&rst_soc,0,0);
	}

	DEBUG4("~");
#endif
} // functgion


//-----------------------------------------------------------------------------
// tcp_listen(port, port_callback) - tcp listen on a port.  Requires a 
//		Callback routine per socket for receive packets.
//-----------------------------------------------------------------------------
U8
tcp_listen(U16 port, void (*callback)(struct ip_h *header,U8 *data, U16 len))
{
    29f2:	80 91 b5 07 	lds	r24, 0x07B5
    29f6:	88 23       	and	r24, r24
    29f8:	41 f0       	breq	.+16     	; 0x2a0a <tcp_listen+0x18>
#ifndef DEMO
U8	i;
	
	for(i=0;i<MAX_TCP_SOCKETS;i++)
	{
		if (0==tcp_socket[i].state)
    29fa:	80 91 d1 07 	lds	r24, 0x07D1
    29fe:	88 23       	and	r24, r24
    2a00:	19 f0       	breq	.+6      	; 0x2a08 <tcp_listen+0x16>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	08 95       	ret
    2a08:	81 e0       	ldi	r24, 0x01	; 1
		{
			//tcp_socket[i].port=swap(port);			// we convert here once, not every time on demux
			//tcp_socket[i].socket_callback=callback;
			return (i+1);
    2a0a:	8f 5f       	subi	r24, 0xFF	; 255
    2a0c:	99 27       	eor	r25, r25
		}
	}
#endif
	return 0;
}
    2a0e:	08 95       	ret

00002a10 <tcp_clean_socket>:


//-----------------------------------------------------------------------------
// tcp_open(port, port_callback) - 
//
//	open up a tcp connection.  Requires a Callback routine per socket for 
//	receive packets.
//
//-----------------------------------------------------------------------------
U8
tcp_open(IPAddr dest_ip, U16 dest_port, void (*callback)(U8 socket, U8 *data, U16 len))
{
#ifndef DEMO
U8		i;
TCPSOC	*ts;
U8 temp=0;
	
	// we should search closed, then close_wait sockets, we just search closed ones now.
	for(i=0;i<MAX_TCP_SOCKETS;i++)
	{
		//
		// Find a closed socket to use.  We probably have to implement a 
		// TIME_WAIT socket recovery mechinism to use TIME_WAIT sockets 
		// when no closed sockets are found.
		//
		if (0==tcp_socket[i].state)
		{
			ts=&tcp_socket[i];
			//
			// We've found a closed socket, lets initiate a connection on it,
			//
			ts->socket_callback=callback;
			ts->dest_port=swap(dest_port);			// swap here
			ts->dest_ip.ip32=dest_ip.ip32;
			ts->source_port=TIMER_Get_Second();
//#ifdef DEBUG_LV3
#ifdef DEBUG_LV4
			if(mm.IMMConfig & PPP_DEBUG)
			{
				DEBUG4("Open TCP socket using Source Port ");
				printShort(swap(ts->source_port));
				DEBUG4(CRLF);
			}
#endif

//#endif
			ts->state=TCP_SYN_SENT | TCP_NEED_SEND;
			ts->send_next=1;						// Set ISN, zero for now +++
			ts->un_ack=0;
			ts->receve_next=0;
			ts->packets=0;

			ts->retry=0;
			ts->timer=0;
			//
			// Try to open with retry and timeout.
			//
			timer_set();
			tcp_sendit(ts,0,0);
			while(1)
			{
				poll_serial();
				tcp_process(0);
				if((ts->state & TCP_STATE_MASK) == TCP_OPEN)
				{
#ifdef DEBUG_LV2
					if(mm.IMMConfig & PPP_DEBUG)
					{
						DEBUG2("socket connected returning ");
						printShort(i+1);
						DEBUG2(CRLF);
					}
#endif
					return(i+1);
				}
				if((ts->state == 0))
				{
#ifdef DEBUG_LV2
					if(mm.IMMConfig & PPP_DEBUG)
					{
						DEBUG2("Socket closed or reset"CRLF);
					}
#endif				
					break;
				}

				if(timer_timeout(mm.tcp_connect_timeout))		
				{
					ts->state=TCP_CLOSED;
#ifdef DEBUG_LV2
					if(mm.IMMConfig & PPP_DEBUG)
					{
						DEBUG2("tcp connect timeout"CRLF);
					}
#endif	
					break;
				}
			}
			break;
		}
//CONSOLE_puts("not closed"CRLF);
	}
#endif
	return 0;
}


//-----------------------------------------------------------------------------
// tcp_close(socket) - Close only fron open state, else RST.
//		Cleans up all allocated memory attached to socket.
//
//	returns 1 if socket closed
//  returns 0 if socket already closed
//-----------------------------------------------------------------------------
U8
tcp_close(U8 socket)
{
#ifndef DEMO
TCPSOC	*ts;
U8		ret=1;

#ifdef DEBUG_LV2
U16 tcount=0;				// remove when done dbugging
#endif

   if( (socket-1) >=MAX_TCP_SOCKETS)
   { 
	CONSOLE_puts("this shouldn't happen tcp_close"CRLF);
		return(0);
   }

	while(socket>0)
	{
		socket-=1;	// ++ fix this?
		ts=&tcp_socket[socket];
		//
		// If socket is closed do nothing
		//
		if (/*(ts->state==0) ||*/ 0==(TCP_STATE_MASK & ts->state))
		{
			ret=0;
			break;
		}	
		if (TCP_TIME_WAIT==(TCP_STATE_MASK & ts->state))
		{
			tcp_clean_socket(ts);
			break;
		}
		
		if (TCP_OPEN==(TCP_STATE_MASK & ts->state))
		{
			ts->state=TCP_FIN_WAIT_1;
			ts->send_next+=1;						// was next_ack+=1  +++ I think this is not needed see below
		}
 		else
		{
			// send a reset on socket
			//ts->state=0
			ts->state=TCP_RST;
			tcp_sendit(ts,0,0);
			tcp_clean_socket(ts);
			break;
		}
		tcp_sendit(ts,0,0);
		//
		// Wait for close with timeout.
		//
			timer_set();
			while(1)
			{
				poll_serial();
				tcp_process(0);
				if((ts->state == 0))
					break;
				if((ts->state == TCP_TIME_WAIT))
					break;
#ifdef DEBUG_LV2
				if(mm.IMMConfig & PPP_DEBUG)
				{
					if(tcount==0)
					{
						DEBUG2("Socket state = ");
						printWord(ts->state);
						DEBUG2(CRLF);
					}
					tcount++;
				}
#endif
				if(timer_timeout(7))		// 5 seconds, make constant
				{
					break;
				}
			}
		tcp_clean_socket(ts);
		break;

	}//while

	//ts->state==0;		// close no matter what
#endif
	return(ret);
}


//-----------------------------------------------------------------------------
// tcp_tx(socket, peer_ip, peer_port, buffer, len)
//
// returns number of bytes sent, or -1 for send failed.	
// 
//-----------------------------------------------------------------------------
S16
tcp_send(U8 socket, U8 *data, U16 len)
{
#ifndef DEMO
S16 ret=0;
	
   if((socket-1)>=MAX_TCP_SOCKETS)
   {
//CONSOLE_puts("this shouldn't happen tcp_send"CRLF);
		return(-1);
   }

	if(socket>0)
	{
		if (TCP_OPEN==(TCP_STATE_MASK & tcp_socket[socket-1].state))
		{
				ret=tcp_sendit(&tcp_socket[socket-1],data,len);
		}
	}
	return(ret);
#endif
}


//-----------------------------------------------------------------------------
// tcp_status(socket)
//
// returns socket status	
// 
//-----------------------------------------------------------------------------
S16
tcp_status(U8 socket)
{
#ifndef DEMO
	if((socket-1)>=MAX_TCP_SOCKETS)
	{
		CONSOLE_puts("this shouldn't happen tcp_status"CRLF);
		return(0);
	}
	return(tcp_socket[socket-1].state);
#endif
}

//-----------------------------------------------------------------------------
// tcp_sport(socket)
//
// returns socket status	
// 
//-----------------------------------------------------------------------------
S16
tcp_sport(U8 socket)
{
#ifndef DEMO
	if((socket-1)>=MAX_TCP_SOCKETS)
	{
		CONSOLE_puts("this shouldn't happen tcp_sport"CRLF);
		return(0);
	}
	return(tcp_socket[socket-1].source_port);
#endif
}


/* 
  use this for non callback version
//-----------------------------------------------------------------------------
// udp_rx(socket, peer_ip, peer_port, buffer )
//	returns length if data, or zero if null packet, or -1 if no packet.
//
//-----------------------------------------------------------------------------
S16
udp_rx(U8 socket, IP *peer_ip, U16 *peer_port, U8 *buffer)
{



}
*/

//-----------------------------------------------------------------------------
// tcp_process() - 
//
//	This should be called every 250-500ms.  This function handles retransmits
//	and delayed acks.
// 
//-----------------------------------------------------------------------------
void
tcp_process(U8 flags)
{
#ifndef DEMO
U16		i;
IP		*tip;
	//
	// Loop through all sockets looking for work to do
	//
	for(i=0;i<MAX_TCP_SOCKETS;i++)
	{
		if(tcp_socket[i].state!=TCP_CLOSED)
		{
			// For now just check timer=0, we should check other timeouts here
			// tcp_retruansmit_timout is settable to user global, but we should
			// track in future and adjust per socket
			//
			if(((TIMER_Get_Tick()-tcp_socket[i].timer) > mm.tcp_retransmit_timeout) 
						&& (tcp_socket[i].timer))
			{
				//DEBUG4(" retry!, socket state %x",tcp_socket[i].state);
				DEBUG4(" Retry"CRLF);
				// lets rock, incerment the retry count, we should check and kill socket
				// if too many retrys
				tcp_socket[i].retry++;
				tcp_socket[i].timer=TIMER_Get_Tick();

				// Abort socket on to many retries
				//if(tcp_socket[i].retry> mm.tcp_retransmit_timeout)

				//
				// If there is a buffer resend it, else just resend (probably a SYN or FIN)
				//
				if(0==tcp_socket[i].packets)
				{
					// retransmit with no data (a SYN or FIN))
					tcp_sendit((TCPSOC *)&tcp_socket[i],0,0);			
				}
				else
				{
					//CONSOLE_puts("*");
					// Retransmit with data, really should fix this MAC offset thing 
					ip_send((U8*)(&tcp_socket[i].packets->data[0])+sizeof(MAC), 0, tcp_socket[i].packets->len,0);
				}
			}
		}
	}
#endif
}

//	U16			timer;				// Retransmission Timer
//	U8			retry;				// Retransmission count
//	MEMBLOCK	*packets;			// packets in flight.

//--------------------------------------------------------------------------------------
//
// tcp_sendit (socket, data, len) -
//
//	This function handles the sending of a TCP packet.  Typically this is called
//	by tcp_send, or when an ACK, RST, or window advertizement needs to be sent out.
//
//--------------------------------------------------------------------------------------
S16
tcp_sendit(TCPSOC *ts,U8 *data, U16 len)
{
#ifndef DEMO

IP			*ip;
TCP			*tcp;
U16			protocol,tchk,tlen;
U8			t,flags,oplen=0,set_timer=0,*tptr;
MEMBLOCK	*memblock,*pkt;


	flags=0;	
	//
	// We need to get a buffer off the free list, and setup the header
	//
	memblock=MEM_GetBlock();
	if(0==memblock)
	{
		DEBUG1("nobuf"CRLF);
		return(0);
	}
	//
	// Point into the data (need to leave room for MAC header)
	//
	ip=(IP *)(&memblock->data[0]+sizeof(MAC));			//+++
	tcp=(TCP *)ip->transport;

	//
	// Data?  If so copy it into the buffer  (to mch data?
	//
	if(len)
	{
		tptr=tcp->data;
		for(tlen=0;tlen<len;tlen++)
			tptr[tlen]=data[tlen];
	}

	//
	// Build TCP header, first set flags
	// 
	t=ts->state & TCP_STATE_MASK;

	//
	// If SYN_RCVD sent or SYN_SENT set SYN, of SYN+SENT set ACK
	//
	if(t <= TCP_SYN_RCVD)
	{
		flags|=TCP_SYN_FLAG;
		set_timer=1;
	}
	// need to send FIN? we do if we are in TCP_FIN_WAIT_1 or TCP_CLOSE_WAIT
	if((t==TCP_CLOSE_WAIT) || (t==TCP_FIN_WAIT_1))
	{
		flags|=TCP_FIN_FLAG;
		set_timer=1;
	}
	// If data set push, we always set PSH on data
	if(len)
	{
		flags|=TCP_PSH_FLAG;
		set_timer=1;
	}
	// Should we set reset?
	if(ts->state & TCP_RST)
	{
		flags|=TCP_RST_FLAG;
		ts->state=TCP_CLOSED;
	}
	// else if not syn sent, set ack flag.
	else if(t != TCP_SYN_SENT)
		flags|=TCP_ACK_FLAG;

	//
	// Build TCP header
	//
	tcp->source_port=ts->source_port;
	tcp->dest_port	=ts->dest_port;
	tcp->seqnum		=swapl(ts->send_next);
	tcp->acknum		=swapl(ts->receve_next);
	tcp->flags		=flags;
	tcp->window		=swap(128);
	tcp->len		= 5 << 4;
	tcp->checksum	=0;

	// Special case, set seq number to send_next-1								+++ see close about this send_next-1 business
	if((t==TCP_CLOSE_WAIT) || (t==TCP_SYN_SENT) || (t== TCP_FIN_WAIT_1) )
		tcp->seqnum		=swapl(ts->send_next-1);

	//ts->next_ack+=len;
	//  +++ dangerous fix
	ts->send_next+=len;


	//
	// Send the TCP MSS option if sending a SYN
	//
	if((t==TCP_SYN_RCVD) || (t==TCP_SYN_SENT))
	{
		//
		// Send the TCP MSS for our side of the connection.
		//
		tcp->data[0]=2;
		tcp->data[1]=4;
		tcp->data[2]=(TCP_MSS >> 8);
		tcp->data[3]=(TCP_MSS & 0xff);
		tcp->len		= 6 << 4;
		oplen=4;
	}

	//
	// Build IP header
	//
	ip->version=IP_VERSION;
	ip->tos=mm.ip_tos;
	ip->length=swap((len+sizeof(IP)+sizeof(TCP)+oplen));
	ip->id=ipid++;
	ip->ttl=mm.ip_ttl;
	ip->flags=0;
	ip->protocol=PROT_TCP;
	ip->source_ip.ip32=mm.our_ipaddr.ip32;
	ip->dest_ip.ip32=ts->dest_ip.ip32;
	ip->checksum=0;
	ip->checksum=Checksum_16(0, (U16 *)ip, 20);

    //
	// Do the checksum
	//
	// Build Psudo header checksum
	tchk=Checksum_16(0,(U16 *)&ip->source_ip,8);
	protocol=swap((len+sizeof(TCP)+oplen));
	tchk=Checksum_16(tchk,(U16 *)&protocol,2);
	protocol=swap(PROT_TCP);
	tchk=Checksum_16(tchk,(U16 *)&protocol,2);
	//
	// Build TCP checksum and store it
	tchk=Checksum_16(tchk,(U16 *)&tcp->source_port,(U16)(sizeof(TCP)+oplen));
	tchk=Checksum_16(tchk,(U16 *)data,len);
	tcp->checksum=tchk;
	DEBUG3("checksum = %x\n",tchk);

	//
	// Sent the packet
	//
	ip_send(ip,data,(U16)((sizeof(IP)+sizeof(TCP)+oplen)),len);	// need to add in option size if necessary

	//
	// If this is a data pkt put it on the resend list, and ack will clear it.
	//
	if(len)
	{
		// fill memblock ack so we can free it via acks
		memblock->ack=(U16)ts->send_next; //+len;   16 bits! warning not for use for large windows
		memblock->next=0;
		memblock->len=len+sizeof(IP)+sizeof(TCP);
	
		// insert the
		if(0!=ts->packets)
		{
			// find the end of list
			pkt=ts->packets;
			while(0!=pkt->next)
			{
				pkt=pkt->next;
			}
			// insert at end of lest
			pkt->next=memblock;
		}
		else
		{
			// Put it at the front of the list
			ts->packets=memblock;
		}
	}
	else
	{
		// 
		// Not a datapacket, we don't need to keep it around.
		//
		MEM_FreeBlock(memblock);
	}
	//
	// Set the timer if needed
	//
	if(set_timer)
		ts->timer=TIMER_Get_Tick();
#endif
	return(len);
}


//--------------------------------------------------------------------------------------
//
// tcp_clean_socket(socket_num) - clean up memory associated with socket and close socket
//
//--------------------------------------------------------------------------------------
void
tcp_clean_socket(TCPSOC *ts)
{
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29
    2a18:	ec 01       	movw	r28, r24
	MEMBLOCK	*memblock,*nxt;


		// reset state to zero
		ts->state=0;
    2a1a:	18 82       	st	Y, r1
		// clean up memory blocks hanging
		memblock=ts->packets;
    2a1c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2a1e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2a20:	06 c0       	rjmp	.+12     	; 0x2a2e <tcp_clean_socket+0x1e>
		while(memblock)
		{
			nxt=memblock->next;
    2a22:	02 81       	ldd	r16, Z+2	; 0x02
    2a24:	13 81       	ldd	r17, Z+3	; 0x03
			MEM_FreeBlock(memblock);
    2a26:	cf 01       	movw	r24, r30
    2a28:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <MEM_FreeBlock>
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	30 97       	sbiw	r30, 0x00	; 0
    2a30:	c1 f7       	brne	.-16     	; 0x2a22 <tcp_clean_socket+0x12>
			memblock=nxt;
		}
		ts->packets=0;
    2a32:	1b 8e       	std	Y+27, r1	; 0x1b
    2a34:	1a 8e       	std	Y+26, r1	; 0x1a
    2a36:	df 91       	pop	r29
    2a38:	cf 91       	pop	r28
    2a3a:	1f 91       	pop	r17
    2a3c:	0f 91       	pop	r16
    2a3e:	08 95       	ret

00002a40 <tcp_sendit>:
    2a40:	2f 92       	push	r2
    2a42:	3f 92       	push	r3
    2a44:	4f 92       	push	r4
    2a46:	5f 92       	push	r5
    2a48:	6f 92       	push	r6
    2a4a:	7f 92       	push	r7
    2a4c:	8f 92       	push	r8
    2a4e:	9f 92       	push	r9
    2a50:	af 92       	push	r10
    2a52:	bf 92       	push	r11
    2a54:	cf 92       	push	r12
    2a56:	df 92       	push	r13
    2a58:	ef 92       	push	r14
    2a5a:	ff 92       	push	r15
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	cf 93       	push	r28
    2a62:	df 93       	push	r29
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	23 97       	sbiw	r28, 0x03	; 3
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	4c 01       	movw	r8, r24
    2a76:	1b 01       	movw	r2, r22
    2a78:	3a 01       	movw	r6, r20
    2a7a:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <MEM_GetBlock>
    2a7e:	2c 01       	movw	r4, r24
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	19 f4       	brne	.+6      	; 0x2a8a <tcp_sendit+0x4a>
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	be c1       	rjmp	.+892    	; 0x2e06 <tcp_sendit+0x3c6>
    2a8a:	b8 e1       	ldi	r27, 0x18	; 24
    2a8c:	ab 2e       	mov	r10, r27
    2a8e:	b1 2c       	mov	r11, r1
    2a90:	a8 0e       	add	r10, r24
    2a92:	b9 1e       	adc	r11, r25
    2a94:	ac e2       	ldi	r26, 0x2C	; 44
    2a96:	ca 2e       	mov	r12, r26
    2a98:	d1 2c       	mov	r13, r1
    2a9a:	c8 0e       	add	r12, r24
    2a9c:	d9 1e       	adc	r13, r25
    2a9e:	61 14       	cp	r6, r1
    2aa0:	71 04       	cpc	r7, r1
    2aa2:	61 f0       	breq	.+24     	; 0x2abc <tcp_sendit+0x7c>
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	d6 01       	movw	r26, r12
    2aaa:	54 96       	adiw	r26, 0x14	; 20
    2aac:	f1 01       	movw	r30, r2
    2aae:	81 91       	ld	r24, Z+
    2ab0:	8d 93       	st	X+, r24
    2ab2:	2f 5f       	subi	r18, 0xFF	; 255
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	26 15       	cp	r18, r6
    2ab8:	37 05       	cpc	r19, r7
    2aba:	c9 f7       	brne	.-14     	; 0x2aae <tcp_sendit+0x6e>
    2abc:	f4 01       	movw	r30, r8
    2abe:	80 81       	ld	r24, Z
    2ac0:	68 2f       	mov	r22, r24
    2ac2:	6f 70       	andi	r22, 0x0F	; 15
    2ac4:	64 30       	cpi	r22, 0x04	; 4
    2ac6:	20 f4       	brcc	.+8      	; 0x2ad0 <tcp_sendit+0x90>
    2ac8:	72 e0       	ldi	r23, 0x02	; 2
    2aca:	f1 e0       	ldi	r31, 0x01	; 1
    2acc:	fb 83       	std	Y+3, r31	; 0x03
    2ace:	08 c0       	rjmp	.+16     	; 0x2ae0 <tcp_sendit+0xa0>
    2ad0:	65 30       	cpi	r22, 0x05	; 5
    2ad2:	21 f0       	breq	.+8      	; 0x2adc <tcp_sendit+0x9c>
    2ad4:	70 e0       	ldi	r23, 0x00	; 0
    2ad6:	1b 82       	std	Y+3, r1	; 0x03
    2ad8:	67 30       	cpi	r22, 0x07	; 7
    2ada:	11 f4       	brne	.+4      	; 0x2ae0 <tcp_sendit+0xa0>
    2adc:	71 e0       	ldi	r23, 0x01	; 1
    2ade:	7b 83       	std	Y+3, r23	; 0x03
    2ae0:	61 14       	cp	r6, r1
    2ae2:	71 04       	cpc	r7, r1
    2ae4:	19 f0       	breq	.+6      	; 0x2aec <tcp_sendit+0xac>
    2ae6:	78 60       	ori	r23, 0x08	; 8
    2ae8:	21 e0       	ldi	r18, 0x01	; 1
    2aea:	2b 83       	std	Y+3, r18	; 0x03
    2aec:	84 ff       	sbrs	r24, 4
    2aee:	04 c0       	rjmp	.+8      	; 0x2af8 <tcp_sendit+0xb8>
    2af0:	74 60       	ori	r23, 0x04	; 4
    2af2:	f4 01       	movw	r30, r8
    2af4:	10 82       	st	Z, r1
    2af6:	03 c0       	rjmp	.+6      	; 0x2afe <tcp_sendit+0xbe>
    2af8:	62 30       	cpi	r22, 0x02	; 2
    2afa:	09 f0       	breq	.+2      	; 0x2afe <tcp_sendit+0xbe>
    2afc:	70 61       	ori	r23, 0x10	; 16
    2afe:	f4 01       	movw	r30, r8
    2b00:	81 81       	ldd	r24, Z+1	; 0x01
    2b02:	92 81       	ldd	r25, Z+2	; 0x02
    2b04:	f6 01       	movw	r30, r12
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	f4 01       	movw	r30, r8
    2b0c:	83 81       	ldd	r24, Z+3	; 0x03
    2b0e:	94 81       	ldd	r25, Z+4	; 0x04
    2b10:	f6 01       	movw	r30, r12
    2b12:	93 83       	std	Z+3, r25	; 0x03
    2b14:	82 83       	std	Z+2, r24	; 0x02
    2b16:	f4 01       	movw	r30, r8
    2b18:	25 85       	ldd	r18, Z+13	; 0x0d
    2b1a:	36 85       	ldd	r19, Z+14	; 0x0e
    2b1c:	47 85       	ldd	r20, Z+15	; 0x0f
    2b1e:	50 89       	ldd	r21, Z+16	; 0x10
    2b20:	e5 2e       	mov	r14, r21
    2b22:	ff 24       	eor	r15, r15
    2b24:	00 27       	eor	r16, r16
    2b26:	11 27       	eor	r17, r17
    2b28:	da 01       	movw	r26, r20
    2b2a:	c9 01       	movw	r24, r18
    2b2c:	80 70       	andi	r24, 0x00	; 0
    2b2e:	90 70       	andi	r25, 0x00	; 0
    2b30:	b0 70       	andi	r27, 0x00	; 0
    2b32:	89 2f       	mov	r24, r25
    2b34:	9a 2f       	mov	r25, r26
    2b36:	ab 2f       	mov	r26, r27
    2b38:	bb 27       	eor	r27, r27
    2b3a:	e8 2a       	or	r14, r24
    2b3c:	f9 2a       	or	r15, r25
    2b3e:	0a 2b       	or	r16, r26
    2b40:	1b 2b       	or	r17, r27
    2b42:	b2 2f       	mov	r27, r18
    2b44:	aa 27       	eor	r26, r26
    2b46:	99 27       	eor	r25, r25
    2b48:	88 27       	eor	r24, r24
    2b4a:	20 70       	andi	r18, 0x00	; 0
    2b4c:	40 70       	andi	r20, 0x00	; 0
    2b4e:	50 70       	andi	r21, 0x00	; 0
    2b50:	54 2f       	mov	r21, r20
    2b52:	43 2f       	mov	r20, r19
    2b54:	32 2f       	mov	r19, r18
    2b56:	22 27       	eor	r18, r18
    2b58:	82 2b       	or	r24, r18
    2b5a:	93 2b       	or	r25, r19
    2b5c:	a4 2b       	or	r26, r20
    2b5e:	b5 2b       	or	r27, r21
    2b60:	e8 2a       	or	r14, r24
    2b62:	f9 2a       	or	r15, r25
    2b64:	0a 2b       	or	r16, r26
    2b66:	1b 2b       	or	r17, r27
    2b68:	f6 01       	movw	r30, r12
    2b6a:	e4 82       	std	Z+4, r14	; 0x04
    2b6c:	f5 82       	std	Z+5, r15	; 0x05
    2b6e:	06 83       	std	Z+6, r16	; 0x06
    2b70:	17 83       	std	Z+7, r17	; 0x07
    2b72:	f4 01       	movw	r30, r8
    2b74:	21 85       	ldd	r18, Z+9	; 0x09
    2b76:	32 85       	ldd	r19, Z+10	; 0x0a
    2b78:	43 85       	ldd	r20, Z+11	; 0x0b
    2b7a:	54 85       	ldd	r21, Z+12	; 0x0c
    2b7c:	e5 2e       	mov	r14, r21
    2b7e:	ff 24       	eor	r15, r15
    2b80:	00 27       	eor	r16, r16
    2b82:	11 27       	eor	r17, r17
    2b84:	da 01       	movw	r26, r20
    2b86:	c9 01       	movw	r24, r18
    2b88:	80 70       	andi	r24, 0x00	; 0
    2b8a:	90 70       	andi	r25, 0x00	; 0
    2b8c:	b0 70       	andi	r27, 0x00	; 0
    2b8e:	89 2f       	mov	r24, r25
    2b90:	9a 2f       	mov	r25, r26
    2b92:	ab 2f       	mov	r26, r27
    2b94:	bb 27       	eor	r27, r27
    2b96:	e8 2a       	or	r14, r24
    2b98:	f9 2a       	or	r15, r25
    2b9a:	0a 2b       	or	r16, r26
    2b9c:	1b 2b       	or	r17, r27
    2b9e:	b2 2f       	mov	r27, r18
    2ba0:	aa 27       	eor	r26, r26
    2ba2:	99 27       	eor	r25, r25
    2ba4:	88 27       	eor	r24, r24
    2ba6:	20 70       	andi	r18, 0x00	; 0
    2ba8:	40 70       	andi	r20, 0x00	; 0
    2baa:	50 70       	andi	r21, 0x00	; 0
    2bac:	54 2f       	mov	r21, r20
    2bae:	43 2f       	mov	r20, r19
    2bb0:	32 2f       	mov	r19, r18
    2bb2:	22 27       	eor	r18, r18
    2bb4:	82 2b       	or	r24, r18
    2bb6:	93 2b       	or	r25, r19
    2bb8:	a4 2b       	or	r26, r20
    2bba:	b5 2b       	or	r27, r21
    2bbc:	e8 2a       	or	r14, r24
    2bbe:	f9 2a       	or	r15, r25
    2bc0:	0a 2b       	or	r16, r26
    2bc2:	1b 2b       	or	r17, r27
    2bc4:	f6 01       	movw	r30, r12
    2bc6:	e0 86       	std	Z+8, r14	; 0x08
    2bc8:	f1 86       	std	Z+9, r15	; 0x09
    2bca:	02 87       	std	Z+10, r16	; 0x0a
    2bcc:	13 87       	std	Z+11, r17	; 0x0b
    2bce:	75 87       	std	Z+13, r23	; 0x0d
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e8       	ldi	r25, 0x80	; 128
    2bd4:	97 87       	std	Z+15, r25	; 0x0f
    2bd6:	86 87       	std	Z+14, r24	; 0x0e
    2bd8:	80 e5       	ldi	r24, 0x50	; 80
    2bda:	84 87       	std	Z+12, r24	; 0x0c
    2bdc:	11 8a       	std	Z+17, r1	; 0x11
    2bde:	10 8a       	std	Z+16, r1	; 0x10
    2be0:	65 30       	cpi	r22, 0x05	; 5
    2be2:	21 f0       	breq	.+8      	; 0x2bec <tcp_sendit+0x1ac>
    2be4:	62 30       	cpi	r22, 0x02	; 2
    2be6:	11 f0       	breq	.+4      	; 0x2bec <tcp_sendit+0x1ac>
    2be8:	67 30       	cpi	r22, 0x07	; 7
    2bea:	91 f5       	brne	.+100    	; 0x2c50 <tcp_sendit+0x210>
    2bec:	f4 01       	movw	r30, r8
    2bee:	25 85       	ldd	r18, Z+13	; 0x0d
    2bf0:	36 85       	ldd	r19, Z+14	; 0x0e
    2bf2:	47 85       	ldd	r20, Z+15	; 0x0f
    2bf4:	50 89       	ldd	r21, Z+16	; 0x10
    2bf6:	21 50       	subi	r18, 0x01	; 1
    2bf8:	30 40       	sbci	r19, 0x00	; 0
    2bfa:	40 40       	sbci	r20, 0x00	; 0
    2bfc:	50 40       	sbci	r21, 0x00	; 0
    2bfe:	e5 2e       	mov	r14, r21
    2c00:	ff 24       	eor	r15, r15
    2c02:	00 27       	eor	r16, r16
    2c04:	11 27       	eor	r17, r17
    2c06:	da 01       	movw	r26, r20
    2c08:	c9 01       	movw	r24, r18
    2c0a:	80 70       	andi	r24, 0x00	; 0
    2c0c:	90 70       	andi	r25, 0x00	; 0
    2c0e:	b0 70       	andi	r27, 0x00	; 0
    2c10:	89 2f       	mov	r24, r25
    2c12:	9a 2f       	mov	r25, r26
    2c14:	ab 2f       	mov	r26, r27
    2c16:	bb 27       	eor	r27, r27
    2c18:	e8 2a       	or	r14, r24
    2c1a:	f9 2a       	or	r15, r25
    2c1c:	0a 2b       	or	r16, r26
    2c1e:	1b 2b       	or	r17, r27
    2c20:	b2 2f       	mov	r27, r18
    2c22:	aa 27       	eor	r26, r26
    2c24:	99 27       	eor	r25, r25
    2c26:	88 27       	eor	r24, r24
    2c28:	20 70       	andi	r18, 0x00	; 0
    2c2a:	40 70       	andi	r20, 0x00	; 0
    2c2c:	50 70       	andi	r21, 0x00	; 0
    2c2e:	54 2f       	mov	r21, r20
    2c30:	43 2f       	mov	r20, r19
    2c32:	32 2f       	mov	r19, r18
    2c34:	22 27       	eor	r18, r18
    2c36:	82 2b       	or	r24, r18
    2c38:	93 2b       	or	r25, r19
    2c3a:	a4 2b       	or	r26, r20
    2c3c:	b5 2b       	or	r27, r21
    2c3e:	e8 2a       	or	r14, r24
    2c40:	f9 2a       	or	r15, r25
    2c42:	0a 2b       	or	r16, r26
    2c44:	1b 2b       	or	r17, r27
    2c46:	f6 01       	movw	r30, r12
    2c48:	e4 82       	std	Z+4, r14	; 0x04
    2c4a:	f5 82       	std	Z+5, r15	; 0x05
    2c4c:	06 83       	std	Z+6, r16	; 0x06
    2c4e:	17 83       	std	Z+7, r17	; 0x07
    2c50:	93 01       	movw	r18, r6
    2c52:	44 27       	eor	r20, r20
    2c54:	55 27       	eor	r21, r21
    2c56:	f4 01       	movw	r30, r8
    2c58:	85 85       	ldd	r24, Z+13	; 0x0d
    2c5a:	96 85       	ldd	r25, Z+14	; 0x0e
    2c5c:	a7 85       	ldd	r26, Z+15	; 0x0f
    2c5e:	b0 89       	ldd	r27, Z+16	; 0x10
    2c60:	82 0f       	add	r24, r18
    2c62:	93 1f       	adc	r25, r19
    2c64:	a4 1f       	adc	r26, r20
    2c66:	b5 1f       	adc	r27, r21
    2c68:	85 87       	std	Z+13, r24	; 0x0d
    2c6a:	96 87       	std	Z+14, r25	; 0x0e
    2c6c:	a7 87       	std	Z+15, r26	; 0x0f
    2c6e:	b0 8b       	std	Z+16, r27	; 0x10
    2c70:	62 50       	subi	r22, 0x02	; 2
    2c72:	62 30       	cpi	r22, 0x02	; 2
    2c74:	10 f0       	brcs	.+4      	; 0x2c7a <tcp_sendit+0x23a>
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0b c0       	rjmp	.+22     	; 0x2c90 <tcp_sendit+0x250>
    2c7a:	82 e0       	ldi	r24, 0x02	; 2
    2c7c:	f6 01       	movw	r30, r12
    2c7e:	84 8b       	std	Z+20, r24	; 0x14
    2c80:	84 e0       	ldi	r24, 0x04	; 4
    2c82:	85 8b       	std	Z+21, r24	; 0x15
    2c84:	16 8a       	std	Z+22, r1	; 0x16
    2c86:	80 e8       	ldi	r24, 0x80	; 128
    2c88:	87 8b       	std	Z+23, r24	; 0x17
    2c8a:	80 e6       	ldi	r24, 0x60	; 96
    2c8c:	84 87       	std	Z+12, r24	; 0x0c
    2c8e:	94 e0       	ldi	r25, 0x04	; 4
    2c90:	85 e4       	ldi	r24, 0x45	; 69
    2c92:	f5 01       	movw	r30, r10
    2c94:	80 83       	st	Z, r24
    2c96:	80 91 82 03 	lds	r24, 0x0382
    2c9a:	81 83       	std	Z+1, r24	; 0x01
    2c9c:	e9 2e       	mov	r14, r25
    2c9e:	ff 24       	eor	r15, r15
    2ca0:	83 01       	movw	r16, r6
    2ca2:	0e 0d       	add	r16, r14
    2ca4:	1f 1d       	adc	r17, r15
    2ca6:	c8 01       	movw	r24, r16
    2ca8:	88 96       	adiw	r24, 0x28	; 40
    2caa:	29 2f       	mov	r18, r25
    2cac:	33 27       	eor	r19, r19
    2cae:	98 2f       	mov	r25, r24
    2cb0:	88 27       	eor	r24, r24
    2cb2:	28 2b       	or	r18, r24
    2cb4:	39 2b       	or	r19, r25
    2cb6:	33 83       	std	Z+3, r19	; 0x03
    2cb8:	22 83       	std	Z+2, r18	; 0x02
    2cba:	80 91 e0 06 	lds	r24, 0x06E0
    2cbe:	90 91 e1 06 	lds	r25, 0x06E1
    2cc2:	95 83       	std	Z+5, r25	; 0x05
    2cc4:	84 83       	std	Z+4, r24	; 0x04
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	90 93 e1 06 	sts	0x06E1, r25
    2ccc:	80 93 e0 06 	sts	0x06E0, r24
    2cd0:	80 91 81 03 	lds	r24, 0x0381
    2cd4:	80 87       	std	Z+8, r24	; 0x08
    2cd6:	17 82       	std	Z+7, r1	; 0x07
    2cd8:	16 82       	std	Z+6, r1	; 0x06
    2cda:	86 e0       	ldi	r24, 0x06	; 6
    2cdc:	81 87       	std	Z+9, r24	; 0x09
    2cde:	80 91 8a 03 	lds	r24, 0x038A
    2ce2:	90 91 8b 03 	lds	r25, 0x038B
    2ce6:	a0 91 8c 03 	lds	r26, 0x038C
    2cea:	b0 91 8d 03 	lds	r27, 0x038D
    2cee:	84 87       	std	Z+12, r24	; 0x0c
    2cf0:	95 87       	std	Z+13, r25	; 0x0d
    2cf2:	a6 87       	std	Z+14, r26	; 0x0e
    2cf4:	b7 87       	std	Z+15, r27	; 0x0f
    2cf6:	f4 01       	movw	r30, r8
    2cf8:	85 81       	ldd	r24, Z+5	; 0x05
    2cfa:	96 81       	ldd	r25, Z+6	; 0x06
    2cfc:	a7 81       	ldd	r26, Z+7	; 0x07
    2cfe:	b0 85       	ldd	r27, Z+8	; 0x08
    2d00:	f5 01       	movw	r30, r10
    2d02:	80 8b       	std	Z+16, r24	; 0x10
    2d04:	91 8b       	std	Z+17, r25	; 0x11
    2d06:	a2 8b       	std	Z+18, r26	; 0x12
    2d08:	b3 8b       	std	Z+19, r27	; 0x13
    2d0a:	13 86       	std	Z+11, r1	; 0x0b
    2d0c:	12 86       	std	Z+10, r1	; 0x0a
    2d0e:	44 e1       	ldi	r20, 0x14	; 20
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	b5 01       	movw	r22, r10
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2d1c:	f5 01       	movw	r30, r10
    2d1e:	93 87       	std	Z+11, r25	; 0x0b
    2d20:	82 87       	std	Z+10, r24	; 0x0a
    2d22:	b5 01       	movw	r22, r10
    2d24:	64 5f       	subi	r22, 0xF4	; 244
    2d26:	7f 4f       	sbci	r23, 0xFF	; 255
    2d28:	48 e0       	ldi	r20, 0x08	; 8
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2d34:	0c 5e       	subi	r16, 0xEC	; 236
    2d36:	1f 4f       	sbci	r17, 0xFF	; 255
    2d38:	21 2f       	mov	r18, r17
    2d3a:	33 27       	eor	r19, r19
    2d3c:	10 2f       	mov	r17, r16
    2d3e:	00 27       	eor	r16, r16
    2d40:	20 2b       	or	r18, r16
    2d42:	31 2b       	or	r19, r17
    2d44:	3a 83       	std	Y+2, r19	; 0x02
    2d46:	29 83       	std	Y+1, r18	; 0x01
    2d48:	42 e0       	ldi	r20, 0x02	; 2
    2d4a:	50 e0       	ldi	r21, 0x00	; 0
    2d4c:	8e 01       	movw	r16, r28
    2d4e:	0f 5f       	subi	r16, 0xFF	; 255
    2d50:	1f 4f       	sbci	r17, 0xFF	; 255
    2d52:	b8 01       	movw	r22, r16
    2d54:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	36 e0       	ldi	r19, 0x06	; 6
    2d5c:	3a 83       	std	Y+2, r19	; 0x02
    2d5e:	29 83       	std	Y+1, r18	; 0x01
    2d60:	42 e0       	ldi	r20, 0x02	; 2
    2d62:	50 e0       	ldi	r21, 0x00	; 0
    2d64:	b8 01       	movw	r22, r16
    2d66:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2d6a:	24 e1       	ldi	r18, 0x14	; 20
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	e2 0e       	add	r14, r18
    2d70:	f3 1e       	adc	r15, r19
    2d72:	a7 01       	movw	r20, r14
    2d74:	b6 01       	movw	r22, r12
    2d76:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2d7a:	a3 01       	movw	r20, r6
    2d7c:	b1 01       	movw	r22, r2
    2d7e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2d82:	f6 01       	movw	r30, r12
    2d84:	91 8b       	std	Z+17, r25	; 0x11
    2d86:	80 8b       	std	Z+16, r24	; 0x10
    2d88:	24 e1       	ldi	r18, 0x14	; 20
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	e2 0e       	add	r14, r18
    2d8e:	f3 1e       	adc	r15, r19
    2d90:	93 01       	movw	r18, r6
    2d92:	a7 01       	movw	r20, r14
    2d94:	b1 01       	movw	r22, r2
    2d96:	c5 01       	movw	r24, r10
    2d98:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <ip_send>
    2d9c:	61 14       	cp	r6, r1
    2d9e:	71 04       	cpc	r7, r1
    2da0:	31 f1       	breq	.+76     	; 0x2dee <tcp_sendit+0x3ae>
    2da2:	f4 01       	movw	r30, r8
    2da4:	85 85       	ldd	r24, Z+13	; 0x0d
    2da6:	96 85       	ldd	r25, Z+14	; 0x0e
    2da8:	f2 01       	movw	r30, r4
    2daa:	95 83       	std	Z+5, r25	; 0x05
    2dac:	84 83       	std	Z+4, r24	; 0x04
    2dae:	13 82       	std	Z+3, r1	; 0x03
    2db0:	12 82       	std	Z+2, r1	; 0x02
    2db2:	28 e2       	ldi	r18, 0x28	; 40
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	62 0e       	add	r6, r18
    2db8:	73 1e       	adc	r7, r19
    2dba:	71 86       	std	Z+9, r7	; 0x09
    2dbc:	60 86       	std	Z+8, r6	; 0x08
    2dbe:	88 ed       	ldi	r24, 0xD8	; 216
    2dc0:	9f ef       	ldi	r25, 0xFF	; 255
    2dc2:	68 0e       	add	r6, r24
    2dc4:	79 1e       	adc	r7, r25
    2dc6:	f4 01       	movw	r30, r8
    2dc8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2dca:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2dcc:	10 97       	sbiw	r26, 0x00	; 0
    2dce:	59 f0       	breq	.+22     	; 0x2de6 <tcp_sendit+0x3a6>
    2dd0:	fd 01       	movw	r30, r26
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	11 f0       	breq	.+4      	; 0x2dde <tcp_sendit+0x39e>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	f9 cf       	rjmp	.-14     	; 0x2dd0 <tcp_sendit+0x390>
    2dde:	fd 01       	movw	r30, r26
    2de0:	53 82       	std	Z+3, r5	; 0x03
    2de2:	42 82       	std	Z+2, r4	; 0x02
    2de4:	07 c0       	rjmp	.+14     	; 0x2df4 <tcp_sendit+0x3b4>
    2de6:	f4 01       	movw	r30, r8
    2de8:	53 8e       	std	Z+27, r5	; 0x1b
    2dea:	42 8e       	std	Z+26, r4	; 0x1a
    2dec:	03 c0       	rjmp	.+6      	; 0x2df4 <tcp_sendit+0x3b4>
    2dee:	c2 01       	movw	r24, r4
    2df0:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <MEM_FreeBlock>
    2df4:	fb 81       	ldd	r31, Y+3	; 0x03
    2df6:	ff 23       	and	r31, r31
    2df8:	29 f0       	breq	.+10     	; 0x2e04 <tcp_sendit+0x3c4>
    2dfa:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    2dfe:	f4 01       	movw	r30, r8
    2e00:	90 8f       	std	Z+24, r25	; 0x18
    2e02:	87 8b       	std	Z+23, r24	; 0x17
    2e04:	93 01       	movw	r18, r6
    2e06:	c9 01       	movw	r24, r18
    2e08:	23 96       	adiw	r28, 0x03	; 3
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	1f 91       	pop	r17
    2e1a:	0f 91       	pop	r16
    2e1c:	ff 90       	pop	r15
    2e1e:	ef 90       	pop	r14
    2e20:	df 90       	pop	r13
    2e22:	cf 90       	pop	r12
    2e24:	bf 90       	pop	r11
    2e26:	af 90       	pop	r10
    2e28:	9f 90       	pop	r9
    2e2a:	8f 90       	pop	r8
    2e2c:	7f 90       	pop	r7
    2e2e:	6f 90       	pop	r6
    2e30:	5f 90       	pop	r5
    2e32:	4f 90       	pop	r4
    2e34:	3f 90       	pop	r3
    2e36:	2f 90       	pop	r2
    2e38:	08 95       	ret

00002e3a <tcp_send>:
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	e8 2f       	mov	r30, r24
    2e3e:	ff 27       	eor	r31, r31
    2e40:	e3 30       	cpi	r30, 0x03	; 3
    2e42:	f1 05       	cpc	r31, r1
    2e44:	1c f0       	brlt	.+6      	; 0x2e4c <tcp_send+0x12>
    2e46:	8f ef       	ldi	r24, 0xFF	; 255
    2e48:	9f ef       	ldi	r25, 0xFF	; 255
    2e4a:	08 95       	ret
    2e4c:	88 23       	and	r24, r24
    2e4e:	c9 f0       	breq	.+50     	; 0x2e82 <tcp_send+0x48>
    2e50:	8c e1       	ldi	r24, 0x1C	; 28
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	df 01       	movw	r26, r30
    2e56:	a8 9f       	mul	r26, r24
    2e58:	f0 01       	movw	r30, r0
    2e5a:	a9 9f       	mul	r26, r25
    2e5c:	f0 0d       	add	r31, r0
    2e5e:	b8 9f       	mul	r27, r24
    2e60:	f0 0d       	add	r31, r0
    2e62:	11 24       	eor	r1, r1
    2e64:	e7 56       	subi	r30, 0x67	; 103
    2e66:	f8 4f       	sbci	r31, 0xF8	; 248
    2e68:	80 81       	ld	r24, Z
    2e6a:	8f 70       	andi	r24, 0x0F	; 15
    2e6c:	84 30       	cpi	r24, 0x04	; 4
    2e6e:	49 f4       	brne	.+18     	; 0x2e82 <tcp_send+0x48>
    2e70:	8c e1       	ldi	r24, 0x1C	; 28
    2e72:	28 9f       	mul	r18, r24
    2e74:	c0 01       	movw	r24, r0
    2e76:	11 24       	eor	r1, r1
    2e78:	87 56       	subi	r24, 0x67	; 103
    2e7a:	98 4f       	sbci	r25, 0xF8	; 248
    2e7c:	0e 94 20 15 	call	0x2a40	; 0x2a40 <tcp_sendit>
    2e80:	08 95       	ret
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	08 95       	ret

00002e88 <tcp_process>:
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	c5 eb       	ldi	r28, 0xB5	; 181
    2e8e:	d7 e0       	ldi	r29, 0x07	; 7
    2e90:	88 81       	ld	r24, Y
    2e92:	88 23       	and	r24, r24
    2e94:	61 f1       	breq	.+88     	; 0x2eee <tcp_process+0x66>
    2e96:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    2e9a:	4f 89       	ldd	r20, Y+23	; 0x17
    2e9c:	58 8d       	ldd	r21, Y+24	; 0x18
    2e9e:	84 1b       	sub	r24, r20
    2ea0:	95 0b       	sbc	r25, r21
    2ea2:	20 91 7f 03 	lds	r18, 0x037F
    2ea6:	30 91 80 03 	lds	r19, 0x0380
    2eaa:	28 17       	cp	r18, r24
    2eac:	39 07       	cpc	r19, r25
    2eae:	f8 f4       	brcc	.+62     	; 0x2eee <tcp_process+0x66>
    2eb0:	45 2b       	or	r20, r21
    2eb2:	e9 f0       	breq	.+58     	; 0x2eee <tcp_process+0x66>
    2eb4:	89 8d       	ldd	r24, Y+25	; 0x19
    2eb6:	8f 5f       	subi	r24, 0xFF	; 255
    2eb8:	89 8f       	std	Y+25, r24	; 0x19
    2eba:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    2ebe:	98 8f       	std	Y+24, r25	; 0x18
    2ec0:	8f 8b       	std	Y+23, r24	; 0x17
    2ec2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2ec4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2ec6:	30 97       	sbiw	r30, 0x00	; 0
    2ec8:	41 f4       	brne	.+16     	; 0x2eda <tcp_process+0x52>
    2eca:	40 e0       	ldi	r20, 0x00	; 0
    2ecc:	50 e0       	ldi	r21, 0x00	; 0
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	0e 94 20 15 	call	0x2a40	; 0x2a40 <tcp_sendit>
    2ed8:	0a c0       	rjmp	.+20     	; 0x2eee <tcp_process+0x66>
    2eda:	40 85       	ldd	r20, Z+8	; 0x08
    2edc:	51 85       	ldd	r21, Z+9	; 0x09
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	cf 01       	movw	r24, r30
    2ee8:	48 96       	adiw	r24, 0x18	; 24
    2eea:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <ip_send>
    2eee:	6c 96       	adiw	r28, 0x1c	; 28
    2ef0:	87 e0       	ldi	r24, 0x07	; 7
    2ef2:	cd 3e       	cpi	r28, 0xED	; 237
    2ef4:	d8 07       	cpc	r29, r24
    2ef6:	61 f6       	brne	.-104    	; 0x2e90 <tcp_process+0x8>
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	08 95       	ret

00002efe <tcp_upcall>:
    2efe:	2f 92       	push	r2
    2f00:	3f 92       	push	r3
    2f02:	4f 92       	push	r4
    2f04:	5f 92       	push	r5
    2f06:	6f 92       	push	r6
    2f08:	7f 92       	push	r7
    2f0a:	9f 92       	push	r9
    2f0c:	af 92       	push	r10
    2f0e:	bf 92       	push	r11
    2f10:	cf 92       	push	r12
    2f12:	df 92       	push	r13
    2f14:	ef 92       	push	r14
    2f16:	ff 92       	push	r15
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	66 97       	sbiw	r28, 0x16	; 22
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	1c 01       	movw	r2, r24
    2f32:	6b 01       	movw	r12, r22
    2f34:	8a 01       	movw	r16, r20
    2f36:	04 51       	subi	r16, 0x14	; 20
    2f38:	10 40       	sbci	r17, 0x00	; 0
    2f3a:	81 2f       	mov	r24, r17
    2f3c:	99 27       	eor	r25, r25
    2f3e:	30 2f       	mov	r19, r16
    2f40:	22 27       	eor	r18, r18
    2f42:	82 2b       	or	r24, r18
    2f44:	93 2b       	or	r25, r19
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	96 e0       	ldi	r25, 0x06	; 6
    2f4e:	9c 83       	std	Y+4, r25	; 0x04
    2f50:	8b 83       	std	Y+3, r24	; 0x03
    2f52:	b1 01       	movw	r22, r2
    2f54:	64 5f       	subi	r22, 0xF4	; 244
    2f56:	7f 4f       	sbci	r23, 0xFF	; 255
    2f58:	48 e0       	ldi	r20, 0x08	; 8
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2f64:	42 e0       	ldi	r20, 0x02	; 2
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	be 01       	movw	r22, r28
    2f6a:	6f 5f       	subi	r22, 0xFF	; 255
    2f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2f72:	42 e0       	ldi	r20, 0x02	; 2
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	be 01       	movw	r22, r28
    2f78:	6d 5f       	subi	r22, 0xFD	; 253
    2f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2f80:	a8 01       	movw	r20, r16
    2f82:	b6 01       	movw	r22, r12
    2f84:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    2f88:	89 2b       	or	r24, r25
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <tcp_upcall+0x90>
    2f8c:	e1 c2       	rjmp	.+1474   	; 0x3550 <tcp_upcall+0x652>
    2f8e:	f1 01       	movw	r30, r2
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	69 2e       	mov	r6, r25
    2f96:	77 24       	eor	r7, r7
    2f98:	98 2f       	mov	r25, r24
    2f9a:	88 27       	eor	r24, r24
    2f9c:	68 2a       	or	r6, r24
    2f9e:	79 2a       	or	r7, r25
    2fa0:	f6 01       	movw	r30, r12
    2fa2:	84 85       	ldd	r24, Z+12	; 0x0c
    2fa4:	86 95       	lsr	r24
    2fa6:	86 95       	lsr	r24
    2fa8:	68 1a       	sub	r6, r24
    2faa:	71 08       	sbc	r7, r1
    2fac:	4c ee       	ldi	r20, 0xEC	; 236
    2fae:	5f ef       	ldi	r21, 0xFF	; 255
    2fb0:	64 0e       	add	r6, r20
    2fb2:	75 1e       	adc	r7, r21
    2fb4:	1a 82       	std	Y+2, r1	; 0x02
    2fb6:	19 82       	std	Y+1, r1	; 0x01
    2fb8:	60 91 b5 07 	lds	r22, 0x07B5
    2fbc:	20 91 b8 07 	lds	r18, 0x07B8
    2fc0:	30 91 b9 07 	lds	r19, 0x07B9
    2fc4:	80 81       	ld	r24, Z
    2fc6:	91 81       	ldd	r25, Z+1	; 0x01
    2fc8:	28 17       	cp	r18, r24
    2fca:	39 07       	cpc	r19, r25
    2fcc:	11 f5       	brne	.+68     	; 0x3012 <tcp_upcall+0x114>
    2fce:	20 91 b6 07 	lds	r18, 0x07B6
    2fd2:	30 91 b7 07 	lds	r19, 0x07B7
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	28 17       	cp	r18, r24
    2fdc:	39 07       	cpc	r19, r25
    2fde:	c9 f4       	brne	.+50     	; 0x3012 <tcp_upcall+0x114>
    2fe0:	20 91 ba 07 	lds	r18, 0x07BA
    2fe4:	30 91 bb 07 	lds	r19, 0x07BB
    2fe8:	40 91 bc 07 	lds	r20, 0x07BC
    2fec:	50 91 bd 07 	lds	r21, 0x07BD
    2ff0:	f1 01       	movw	r30, r2
    2ff2:	84 85       	ldd	r24, Z+12	; 0x0c
    2ff4:	95 85       	ldd	r25, Z+13	; 0x0d
    2ff6:	a6 85       	ldd	r26, Z+14	; 0x0e
    2ff8:	b7 85       	ldd	r27, Z+15	; 0x0f
    2ffa:	28 17       	cp	r18, r24
    2ffc:	39 07       	cpc	r19, r25
    2ffe:	4a 07       	cpc	r20, r26
    3000:	5b 07       	cpc	r21, r27
    3002:	39 f4       	brne	.+14     	; 0x3012 <tcp_upcall+0x114>
    3004:	bf e0       	ldi	r27, 0x0F	; 15
    3006:	9b 2e       	mov	r9, r27
    3008:	96 22       	and	r9, r22
    300a:	19 f0       	breq	.+6      	; 0x3012 <tcp_upcall+0x114>
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	35 c0       	rjmp	.+106    	; 0x307c <tcp_upcall+0x17e>
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	9a 83       	std	Y+2, r25	; 0x02
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	60 91 d1 07 	lds	r22, 0x07D1
    301e:	20 91 d4 07 	lds	r18, 0x07D4
    3022:	30 91 d5 07 	lds	r19, 0x07D5
    3026:	f6 01       	movw	r30, r12
    3028:	80 81       	ld	r24, Z
    302a:	91 81       	ldd	r25, Z+1	; 0x01
    302c:	28 17       	cp	r18, r24
    302e:	39 07       	cpc	r19, r25
    3030:	09 f0       	breq	.+2      	; 0x3034 <tcp_upcall+0x136>
    3032:	1e c2       	rjmp	.+1084   	; 0x3470 <tcp_upcall+0x572>
    3034:	20 91 d2 07 	lds	r18, 0x07D2
    3038:	30 91 d3 07 	lds	r19, 0x07D3
    303c:	82 81       	ldd	r24, Z+2	; 0x02
    303e:	93 81       	ldd	r25, Z+3	; 0x03
    3040:	28 17       	cp	r18, r24
    3042:	39 07       	cpc	r19, r25
    3044:	09 f0       	breq	.+2      	; 0x3048 <tcp_upcall+0x14a>
    3046:	14 c2       	rjmp	.+1064   	; 0x3470 <tcp_upcall+0x572>
    3048:	20 91 d6 07 	lds	r18, 0x07D6
    304c:	30 91 d7 07 	lds	r19, 0x07D7
    3050:	40 91 d8 07 	lds	r20, 0x07D8
    3054:	50 91 d9 07 	lds	r21, 0x07D9
    3058:	f1 01       	movw	r30, r2
    305a:	84 85       	ldd	r24, Z+12	; 0x0c
    305c:	95 85       	ldd	r25, Z+13	; 0x0d
    305e:	a6 85       	ldd	r26, Z+14	; 0x0e
    3060:	b7 85       	ldd	r27, Z+15	; 0x0f
    3062:	28 17       	cp	r18, r24
    3064:	39 07       	cpc	r19, r25
    3066:	4a 07       	cpc	r20, r26
    3068:	5b 07       	cpc	r21, r27
    306a:	09 f0       	breq	.+2      	; 0x306e <tcp_upcall+0x170>
    306c:	01 c2       	rjmp	.+1026   	; 0x3470 <tcp_upcall+0x572>
    306e:	af e0       	ldi	r26, 0x0F	; 15
    3070:	9a 2e       	mov	r9, r26
    3072:	96 22       	and	r9, r22
    3074:	09 f4       	brne	.+2      	; 0x3078 <tcp_upcall+0x17a>
    3076:	fc c1       	rjmp	.+1016   	; 0x3470 <tcp_upcall+0x572>
    3078:	61 e0       	ldi	r22, 0x01	; 1
    307a:	70 e0       	ldi	r23, 0x00	; 0
    307c:	f6 01       	movw	r30, r12
    307e:	85 85       	ldd	r24, Z+13	; 0x0d
    3080:	84 ff       	sbrs	r24, 4
    3082:	98 c0       	rjmp	.+304    	; 0x31b4 <tcp_upcall+0x2b6>
    3084:	f6 01       	movw	r30, r12
    3086:	20 85       	ldd	r18, Z+8	; 0x08
    3088:	31 85       	ldd	r19, Z+9	; 0x09
    308a:	42 85       	ldd	r20, Z+10	; 0x0a
    308c:	53 85       	ldd	r21, Z+11	; 0x0b
    308e:	e5 2e       	mov	r14, r21
    3090:	ff 24       	eor	r15, r15
    3092:	00 27       	eor	r16, r16
    3094:	11 27       	eor	r17, r17
    3096:	da 01       	movw	r26, r20
    3098:	c9 01       	movw	r24, r18
    309a:	80 70       	andi	r24, 0x00	; 0
    309c:	90 70       	andi	r25, 0x00	; 0
    309e:	b0 70       	andi	r27, 0x00	; 0
    30a0:	89 2f       	mov	r24, r25
    30a2:	9a 2f       	mov	r25, r26
    30a4:	ab 2f       	mov	r26, r27
    30a6:	bb 27       	eor	r27, r27
    30a8:	e8 2a       	or	r14, r24
    30aa:	f9 2a       	or	r15, r25
    30ac:	0a 2b       	or	r16, r26
    30ae:	1b 2b       	or	r17, r27
    30b0:	b2 2f       	mov	r27, r18
    30b2:	aa 27       	eor	r26, r26
    30b4:	99 27       	eor	r25, r25
    30b6:	88 27       	eor	r24, r24
    30b8:	20 70       	andi	r18, 0x00	; 0
    30ba:	40 70       	andi	r20, 0x00	; 0
    30bc:	50 70       	andi	r21, 0x00	; 0
    30be:	54 2f       	mov	r21, r20
    30c0:	43 2f       	mov	r20, r19
    30c2:	32 2f       	mov	r19, r18
    30c4:	22 27       	eor	r18, r18
    30c6:	82 2b       	or	r24, r18
    30c8:	93 2b       	or	r25, r19
    30ca:	a4 2b       	or	r26, r20
    30cc:	b5 2b       	or	r27, r21
    30ce:	e8 2a       	or	r14, r24
    30d0:	f9 2a       	or	r15, r25
    30d2:	0a 2b       	or	r16, r26
    30d4:	1b 2b       	or	r17, r27
    30d6:	8c e1       	ldi	r24, 0x1C	; 28
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	68 9f       	mul	r22, r24
    30dc:	f0 01       	movw	r30, r0
    30de:	69 9f       	mul	r22, r25
    30e0:	f0 0d       	add	r31, r0
    30e2:	78 9f       	mul	r23, r24
    30e4:	f0 0d       	add	r31, r0
    30e6:	11 24       	eor	r1, r1
    30e8:	eb 54       	subi	r30, 0x4B	; 75
    30ea:	f8 4f       	sbci	r31, 0xF8	; 248
    30ec:	81 89       	ldd	r24, Z+17	; 0x11
    30ee:	92 89       	ldd	r25, Z+18	; 0x12
    30f0:	a3 89       	ldd	r26, Z+19	; 0x13
    30f2:	b4 89       	ldd	r27, Z+20	; 0x14
    30f4:	8e 15       	cp	r24, r14
    30f6:	9f 05       	cpc	r25, r15
    30f8:	a0 07       	cpc	r26, r16
    30fa:	b1 07       	cpc	r27, r17
    30fc:	09 f4       	brne	.+2      	; 0x3100 <tcp_upcall+0x202>
    30fe:	5a c0       	rjmp	.+180    	; 0x31b4 <tcp_upcall+0x2b6>
    3100:	e1 8a       	std	Z+17, r14	; 0x11
    3102:	f2 8a       	std	Z+18, r15	; 0x12
    3104:	03 8b       	std	Z+19, r16	; 0x13
    3106:	14 8b       	std	Z+20, r17	; 0x14
    3108:	29 81       	ldd	r18, Y+1	; 0x01
    310a:	3a 81       	ldd	r19, Y+2	; 0x02
    310c:	8c e1       	ldi	r24, 0x1C	; 28
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	28 9f       	mul	r18, r24
    3112:	80 01       	movw	r16, r0
    3114:	29 9f       	mul	r18, r25
    3116:	10 0d       	add	r17, r0
    3118:	38 9f       	mul	r19, r24
    311a:	10 0d       	add	r17, r0
    311c:	11 24       	eor	r1, r1
    311e:	0b 54       	subi	r16, 0x4B	; 75
    3120:	18 4f       	sbci	r17, 0xF8	; 248
    3122:	f8 01       	movw	r30, r16
    3124:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3126:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3128:	10 97       	sbiw	r26, 0x00	; 0
    312a:	c1 f0       	breq	.+48     	; 0x315c <tcp_upcall+0x25e>
    312c:	81 89       	ldd	r24, Z+17	; 0x11
    312e:	92 89       	ldd	r25, Z+18	; 0x12
    3130:	fd 01       	movw	r30, r26
    3132:	24 81       	ldd	r18, Z+4	; 0x04
    3134:	35 81       	ldd	r19, Z+5	; 0x05
    3136:	82 1b       	sub	r24, r18
    3138:	93 0b       	sbc	r25, r19
    313a:	97 fd       	sbrc	r25, 7
    313c:	09 c0       	rjmp	.+18     	; 0x3150 <tcp_upcall+0x252>
    313e:	82 81       	ldd	r24, Z+2	; 0x02
    3140:	93 81       	ldd	r25, Z+3	; 0x03
    3142:	f8 01       	movw	r30, r16
    3144:	93 8f       	std	Z+27, r25	; 0x1b
    3146:	82 8f       	std	Z+26, r24	; 0x1a
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <MEM_FreeBlock>
    314e:	dc cf       	rjmp	.-72     	; 0x3108 <tcp_upcall+0x20a>
    3150:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TIMER_Get_Tick>
    3154:	f8 01       	movw	r30, r16
    3156:	90 8f       	std	Z+24, r25	; 0x18
    3158:	87 8b       	std	Z+23, r24	; 0x17
    315a:	03 c0       	rjmp	.+6      	; 0x3162 <tcp_upcall+0x264>
    315c:	f8 01       	movw	r30, r16
    315e:	10 8e       	std	Z+24, r1	; 0x18
    3160:	17 8a       	std	Z+23, r1	; 0x17
    3162:	f7 e0       	ldi	r31, 0x07	; 7
    3164:	9f 16       	cp	r9, r31
    3166:	a1 f4       	brne	.+40     	; 0x3190 <tcp_upcall+0x292>
    3168:	29 81       	ldd	r18, Y+1	; 0x01
    316a:	3a 81       	ldd	r19, Y+2	; 0x02
    316c:	8c e1       	ldi	r24, 0x1C	; 28
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	28 9f       	mul	r18, r24
    3172:	f0 01       	movw	r30, r0
    3174:	29 9f       	mul	r18, r25
    3176:	f0 0d       	add	r31, r0
    3178:	38 9f       	mul	r19, r24
    317a:	f0 0d       	add	r31, r0
    317c:	11 24       	eor	r1, r1
    317e:	eb 54       	subi	r30, 0x4B	; 75
    3180:	f8 4f       	sbci	r31, 0xF8	; 248
    3182:	88 e0       	ldi	r24, 0x08	; 8
    3184:	80 83       	st	Z, r24
    3186:	e8 e0       	ldi	r30, 0x08	; 8
    3188:	9e 2e       	mov	r9, r30
    318a:	41 e0       	ldi	r20, 0x01	; 1
    318c:	4e 8b       	std	Y+22, r20	; 0x16
    318e:	13 c0       	rjmp	.+38     	; 0x31b6 <tcp_upcall+0x2b8>
    3190:	89 2d       	mov	r24, r9
    3192:	85 50       	subi	r24, 0x05	; 5
    3194:	82 30       	cpi	r24, 0x02	; 2
    3196:	70 f4       	brcc	.+28     	; 0x31b4 <tcp_upcall+0x2b6>
    3198:	29 81       	ldd	r18, Y+1	; 0x01
    319a:	3a 81       	ldd	r19, Y+2	; 0x02
    319c:	8c e1       	ldi	r24, 0x1C	; 28
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	28 9f       	mul	r18, r24
    31a2:	f0 01       	movw	r30, r0
    31a4:	29 9f       	mul	r18, r25
    31a6:	f0 0d       	add	r31, r0
    31a8:	38 9f       	mul	r19, r24
    31aa:	f0 0d       	add	r31, r0
    31ac:	11 24       	eor	r1, r1
    31ae:	eb 54       	subi	r30, 0x4B	; 75
    31b0:	f8 4f       	sbci	r31, 0xF8	; 248
    31b2:	10 82       	st	Z, r1
    31b4:	1e 8a       	std	Y+22, r1	; 0x16
    31b6:	f6 01       	movw	r30, r12
    31b8:	85 85       	ldd	r24, Z+13	; 0x0d
    31ba:	82 ff       	sbrs	r24, 2
    31bc:	11 c0       	rjmp	.+34     	; 0x31e0 <tcp_upcall+0x2e2>
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	9a 81       	ldd	r25, Y+2	; 0x02
    31c2:	2c e1       	ldi	r18, 0x1C	; 28
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	ac 01       	movw	r20, r24
    31c8:	42 9f       	mul	r20, r18
    31ca:	c0 01       	movw	r24, r0
    31cc:	43 9f       	mul	r20, r19
    31ce:	90 0d       	add	r25, r0
    31d0:	52 9f       	mul	r21, r18
    31d2:	90 0d       	add	r25, r0
    31d4:	11 24       	eor	r1, r1
    31d6:	8b 54       	subi	r24, 0x4B	; 75
    31d8:	98 4f       	sbci	r25, 0xF8	; 248
    31da:	0e 94 08 15 	call	0x2a10	; 0x2a10 <tcp_clean_socket>
    31de:	4d c1       	rjmp	.+666    	; 0x347a <tcp_upcall+0x57c>
    31e0:	54 e0       	ldi	r21, 0x04	; 4
    31e2:	95 16       	cp	r9, r21
    31e4:	39 f0       	breq	.+14     	; 0x31f4 <tcp_upcall+0x2f6>
    31e6:	87 e0       	ldi	r24, 0x07	; 7
    31e8:	98 16       	cp	r9, r24
    31ea:	21 f0       	breq	.+8      	; 0x31f4 <tcp_upcall+0x2f6>
    31ec:	98 e0       	ldi	r25, 0x08	; 8
    31ee:	99 16       	cp	r9, r25
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <tcp_upcall+0x2f6>
    31f2:	6e c0       	rjmp	.+220    	; 0x32d0 <tcp_upcall+0x3d2>
    31f4:	16 14       	cp	r1, r6
    31f6:	17 04       	cpc	r1, r7
    31f8:	0c f0       	brlt	.+2      	; 0x31fc <tcp_upcall+0x2fe>
    31fa:	6a c0       	rjmp	.+212    	; 0x32d0 <tcp_upcall+0x3d2>
    31fc:	f6 01       	movw	r30, r12
    31fe:	24 81       	ldd	r18, Z+4	; 0x04
    3200:	35 81       	ldd	r19, Z+5	; 0x05
    3202:	46 81       	ldd	r20, Z+6	; 0x06
    3204:	57 81       	ldd	r21, Z+7	; 0x07
    3206:	a9 80       	ldd	r10, Y+1	; 0x01
    3208:	ba 80       	ldd	r11, Y+2	; 0x02
    320a:	e5 2e       	mov	r14, r21
    320c:	ff 24       	eor	r15, r15
    320e:	00 27       	eor	r16, r16
    3210:	11 27       	eor	r17, r17
    3212:	da 01       	movw	r26, r20
    3214:	c9 01       	movw	r24, r18
    3216:	80 70       	andi	r24, 0x00	; 0
    3218:	90 70       	andi	r25, 0x00	; 0
    321a:	b0 70       	andi	r27, 0x00	; 0
    321c:	89 2f       	mov	r24, r25
    321e:	9a 2f       	mov	r25, r26
    3220:	ab 2f       	mov	r26, r27
    3222:	bb 27       	eor	r27, r27
    3224:	e8 2a       	or	r14, r24
    3226:	f9 2a       	or	r15, r25
    3228:	0a 2b       	or	r16, r26
    322a:	1b 2b       	or	r17, r27
    322c:	b2 2f       	mov	r27, r18
    322e:	aa 27       	eor	r26, r26
    3230:	99 27       	eor	r25, r25
    3232:	88 27       	eor	r24, r24
    3234:	20 70       	andi	r18, 0x00	; 0
    3236:	40 70       	andi	r20, 0x00	; 0
    3238:	50 70       	andi	r21, 0x00	; 0
    323a:	54 2f       	mov	r21, r20
    323c:	43 2f       	mov	r20, r19
    323e:	32 2f       	mov	r19, r18
    3240:	22 27       	eor	r18, r18
    3242:	82 2b       	or	r24, r18
    3244:	93 2b       	or	r25, r19
    3246:	a4 2b       	or	r26, r20
    3248:	b5 2b       	or	r27, r21
    324a:	e8 2a       	or	r14, r24
    324c:	f9 2a       	or	r15, r25
    324e:	0a 2b       	or	r16, r26
    3250:	1b 2b       	or	r17, r27
    3252:	ec e1       	ldi	r30, 0x1C	; 28
    3254:	4e 2e       	mov	r4, r30
    3256:	51 2c       	mov	r5, r1
    3258:	a4 9c       	mul	r10, r4
    325a:	f0 01       	movw	r30, r0
    325c:	a5 9c       	mul	r10, r5
    325e:	f0 0d       	add	r31, r0
    3260:	b4 9c       	mul	r11, r4
    3262:	f0 0d       	add	r31, r0
    3264:	11 24       	eor	r1, r1
    3266:	eb 54       	subi	r30, 0x4B	; 75
    3268:	f8 4f       	sbci	r31, 0xF8	; 248
    326a:	81 85       	ldd	r24, Z+9	; 0x09
    326c:	92 85       	ldd	r25, Z+10	; 0x0a
    326e:	a3 85       	ldd	r26, Z+11	; 0x0b
    3270:	b4 85       	ldd	r27, Z+12	; 0x0c
    3272:	e8 16       	cp	r14, r24
    3274:	f9 06       	cpc	r15, r25
    3276:	0a 07       	cpc	r16, r26
    3278:	1b 07       	cpc	r17, r27
    327a:	41 f5       	brne	.+80     	; 0x32cc <tcp_upcall+0x3ce>
    327c:	b6 01       	movw	r22, r12
    327e:	6c 5e       	subi	r22, 0xEC	; 236
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	05 88       	ldd	r0, Z+21	; 0x15
    3284:	f6 89       	ldd	r31, Z+22	; 0x16
    3286:	e0 2d       	mov	r30, r0
    3288:	a3 01       	movw	r20, r6
    328a:	8a 2d       	mov	r24, r10
    328c:	8f 5f       	subi	r24, 0xFF	; 255
    328e:	09 95       	icall
    3290:	29 81       	ldd	r18, Y+1	; 0x01
    3292:	3a 81       	ldd	r19, Y+2	; 0x02
    3294:	24 9d       	mul	r18, r4
    3296:	f0 01       	movw	r30, r0
    3298:	25 9d       	mul	r18, r5
    329a:	f0 0d       	add	r31, r0
    329c:	34 9d       	mul	r19, r4
    329e:	f0 0d       	add	r31, r0
    32a0:	11 24       	eor	r1, r1
    32a2:	eb 54       	subi	r30, 0x4B	; 75
    32a4:	f8 4f       	sbci	r31, 0xF8	; 248
    32a6:	7c 01       	movw	r14, r24
    32a8:	00 27       	eor	r16, r16
    32aa:	f7 fc       	sbrc	r15, 7
    32ac:	00 95       	com	r16
    32ae:	10 2f       	mov	r17, r16
    32b0:	21 85       	ldd	r18, Z+9	; 0x09
    32b2:	32 85       	ldd	r19, Z+10	; 0x0a
    32b4:	43 85       	ldd	r20, Z+11	; 0x0b
    32b6:	54 85       	ldd	r21, Z+12	; 0x0c
    32b8:	2e 0d       	add	r18, r14
    32ba:	3f 1d       	adc	r19, r15
    32bc:	40 1f       	adc	r20, r16
    32be:	51 1f       	adc	r21, r17
    32c0:	21 87       	std	Z+9, r18	; 0x09
    32c2:	32 87       	std	Z+10, r19	; 0x0a
    32c4:	43 87       	std	Z+11, r20	; 0x0b
    32c6:	54 87       	std	Z+12, r21	; 0x0c
    32c8:	89 2b       	or	r24, r25
    32ca:	11 f0       	breq	.+4      	; 0x32d0 <tcp_upcall+0x3d2>
    32cc:	f1 e0       	ldi	r31, 0x01	; 1
    32ce:	fe 8b       	std	Y+22, r31	; 0x16
    32d0:	f6 01       	movw	r30, r12
    32d2:	85 85       	ldd	r24, Z+13	; 0x0d
    32d4:	80 ff       	sbrs	r24, 0
    32d6:	65 c0       	rjmp	.+202    	; 0x33a2 <tcp_upcall+0x4a4>
    32d8:	f4 e0       	ldi	r31, 0x04	; 4
    32da:	9f 16       	cp	r9, r31
    32dc:	31 f5       	brne	.+76     	; 0x332a <tcp_upcall+0x42c>
    32de:	29 81       	ldd	r18, Y+1	; 0x01
    32e0:	3a 81       	ldd	r19, Y+2	; 0x02
    32e2:	8c e1       	ldi	r24, 0x1C	; 28
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	28 9f       	mul	r18, r24
    32e8:	f0 01       	movw	r30, r0
    32ea:	29 9f       	mul	r18, r25
    32ec:	f0 0d       	add	r31, r0
    32ee:	38 9f       	mul	r19, r24
    32f0:	f0 0d       	add	r31, r0
    32f2:	11 24       	eor	r1, r1
    32f4:	eb 54       	subi	r30, 0x4B	; 75
    32f6:	f8 4f       	sbci	r31, 0xF8	; 248
    32f8:	85 e0       	ldi	r24, 0x05	; 5
    32fa:	80 83       	st	Z, r24
    32fc:	81 85       	ldd	r24, Z+9	; 0x09
    32fe:	92 85       	ldd	r25, Z+10	; 0x0a
    3300:	a3 85       	ldd	r26, Z+11	; 0x0b
    3302:	b4 85       	ldd	r27, Z+12	; 0x0c
    3304:	01 96       	adiw	r24, 0x01	; 1
    3306:	a1 1d       	adc	r26, r1
    3308:	b1 1d       	adc	r27, r1
    330a:	81 87       	std	Z+9, r24	; 0x09
    330c:	92 87       	std	Z+10, r25	; 0x0a
    330e:	a3 87       	std	Z+11, r26	; 0x0b
    3310:	b4 87       	std	Z+12, r27	; 0x0c
    3312:	85 85       	ldd	r24, Z+13	; 0x0d
    3314:	96 85       	ldd	r25, Z+14	; 0x0e
    3316:	a7 85       	ldd	r26, Z+15	; 0x0f
    3318:	b0 89       	ldd	r27, Z+16	; 0x10
    331a:	01 96       	adiw	r24, 0x01	; 1
    331c:	a1 1d       	adc	r26, r1
    331e:	b1 1d       	adc	r27, r1
    3320:	85 87       	std	Z+13, r24	; 0x0d
    3322:	96 87       	std	Z+14, r25	; 0x0e
    3324:	a7 87       	std	Z+15, r26	; 0x0f
    3326:	b0 8b       	std	Z+16, r27	; 0x10
    3328:	10 c1       	rjmp	.+544    	; 0x354a <tcp_upcall+0x64c>
    332a:	47 e0       	ldi	r20, 0x07	; 7
    332c:	94 16       	cp	r9, r20
    332e:	d9 f4       	brne	.+54     	; 0x3366 <tcp_upcall+0x468>
    3330:	29 81       	ldd	r18, Y+1	; 0x01
    3332:	3a 81       	ldd	r19, Y+2	; 0x02
    3334:	8c e1       	ldi	r24, 0x1C	; 28
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	28 9f       	mul	r18, r24
    333a:	f0 01       	movw	r30, r0
    333c:	29 9f       	mul	r18, r25
    333e:	f0 0d       	add	r31, r0
    3340:	38 9f       	mul	r19, r24
    3342:	f0 0d       	add	r31, r0
    3344:	11 24       	eor	r1, r1
    3346:	eb 54       	subi	r30, 0x4B	; 75
    3348:	f8 4f       	sbci	r31, 0xF8	; 248
    334a:	89 e0       	ldi	r24, 0x09	; 9
    334c:	80 83       	st	Z, r24
    334e:	81 85       	ldd	r24, Z+9	; 0x09
    3350:	92 85       	ldd	r25, Z+10	; 0x0a
    3352:	a3 85       	ldd	r26, Z+11	; 0x0b
    3354:	b4 85       	ldd	r27, Z+12	; 0x0c
    3356:	01 96       	adiw	r24, 0x01	; 1
    3358:	a1 1d       	adc	r26, r1
    335a:	b1 1d       	adc	r27, r1
    335c:	81 87       	std	Z+9, r24	; 0x09
    335e:	92 87       	std	Z+10, r25	; 0x0a
    3360:	a3 87       	std	Z+11, r26	; 0x0b
    3362:	b4 87       	std	Z+12, r27	; 0x0c
    3364:	f2 c0       	rjmp	.+484    	; 0x354a <tcp_upcall+0x64c>
    3366:	58 e0       	ldi	r21, 0x08	; 8
    3368:	95 16       	cp	r9, r21
    336a:	d9 f4       	brne	.+54     	; 0x33a2 <tcp_upcall+0x4a4>
    336c:	29 81       	ldd	r18, Y+1	; 0x01
    336e:	3a 81       	ldd	r19, Y+2	; 0x02
    3370:	8c e1       	ldi	r24, 0x1C	; 28
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	28 9f       	mul	r18, r24
    3376:	f0 01       	movw	r30, r0
    3378:	29 9f       	mul	r18, r25
    337a:	f0 0d       	add	r31, r0
    337c:	38 9f       	mul	r19, r24
    337e:	f0 0d       	add	r31, r0
    3380:	11 24       	eor	r1, r1
    3382:	eb 54       	subi	r30, 0x4B	; 75
    3384:	f8 4f       	sbci	r31, 0xF8	; 248
    3386:	8a e0       	ldi	r24, 0x0A	; 10
    3388:	80 83       	st	Z, r24
    338a:	81 85       	ldd	r24, Z+9	; 0x09
    338c:	92 85       	ldd	r25, Z+10	; 0x0a
    338e:	a3 85       	ldd	r26, Z+11	; 0x0b
    3390:	b4 85       	ldd	r27, Z+12	; 0x0c
    3392:	01 96       	adiw	r24, 0x01	; 1
    3394:	a1 1d       	adc	r26, r1
    3396:	b1 1d       	adc	r27, r1
    3398:	81 87       	std	Z+9, r24	; 0x09
    339a:	92 87       	std	Z+10, r25	; 0x0a
    339c:	a3 87       	std	Z+11, r26	; 0x0b
    339e:	b4 87       	std	Z+12, r27	; 0x0c
    33a0:	52 c0       	rjmp	.+164    	; 0x3446 <tcp_upcall+0x548>
    33a2:	89 2d       	mov	r24, r9
    33a4:	81 50       	subi	r24, 0x01	; 1
    33a6:	82 30       	cpi	r24, 0x02	; 2
    33a8:	08 f0       	brcs	.+2      	; 0x33ac <tcp_upcall+0x4ae>
    33aa:	4a c0       	rjmp	.+148    	; 0x3440 <tcp_upcall+0x542>
    33ac:	f6 01       	movw	r30, r12
    33ae:	85 85       	ldd	r24, Z+13	; 0x0d
    33b0:	81 ff       	sbrs	r24, 1
    33b2:	46 c0       	rjmp	.+140    	; 0x3440 <tcp_upcall+0x542>
    33b4:	69 81       	ldd	r22, Y+1	; 0x01
    33b6:	7a 81       	ldd	r23, Y+2	; 0x02
    33b8:	24 81       	ldd	r18, Z+4	; 0x04
    33ba:	35 81       	ldd	r19, Z+5	; 0x05
    33bc:	46 81       	ldd	r20, Z+6	; 0x06
    33be:	57 81       	ldd	r21, Z+7	; 0x07
    33c0:	8c e1       	ldi	r24, 0x1C	; 28
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	68 9f       	mul	r22, r24
    33c6:	f0 01       	movw	r30, r0
    33c8:	69 9f       	mul	r22, r25
    33ca:	f0 0d       	add	r31, r0
    33cc:	78 9f       	mul	r23, r24
    33ce:	f0 0d       	add	r31, r0
    33d0:	11 24       	eor	r1, r1
    33d2:	eb 54       	subi	r30, 0x4B	; 75
    33d4:	f8 4f       	sbci	r31, 0xF8	; 248
    33d6:	e5 2e       	mov	r14, r21
    33d8:	ff 24       	eor	r15, r15
    33da:	00 27       	eor	r16, r16
    33dc:	11 27       	eor	r17, r17
    33de:	da 01       	movw	r26, r20
    33e0:	c9 01       	movw	r24, r18
    33e2:	80 70       	andi	r24, 0x00	; 0
    33e4:	90 70       	andi	r25, 0x00	; 0
    33e6:	b0 70       	andi	r27, 0x00	; 0
    33e8:	89 2f       	mov	r24, r25
    33ea:	9a 2f       	mov	r25, r26
    33ec:	ab 2f       	mov	r26, r27
    33ee:	bb 27       	eor	r27, r27
    33f0:	e8 2a       	or	r14, r24
    33f2:	f9 2a       	or	r15, r25
    33f4:	0a 2b       	or	r16, r26
    33f6:	1b 2b       	or	r17, r27
    33f8:	b2 2f       	mov	r27, r18
    33fa:	aa 27       	eor	r26, r26
    33fc:	99 27       	eor	r25, r25
    33fe:	88 27       	eor	r24, r24
    3400:	20 70       	andi	r18, 0x00	; 0
    3402:	40 70       	andi	r20, 0x00	; 0
    3404:	50 70       	andi	r21, 0x00	; 0
    3406:	54 2f       	mov	r21, r20
    3408:	43 2f       	mov	r20, r19
    340a:	32 2f       	mov	r19, r18
    340c:	22 27       	eor	r18, r18
    340e:	82 2b       	or	r24, r18
    3410:	93 2b       	or	r25, r19
    3412:	a4 2b       	or	r26, r20
    3414:	b5 2b       	or	r27, r21
    3416:	e8 2a       	or	r14, r24
    3418:	f9 2a       	or	r15, r25
    341a:	0a 2b       	or	r16, r26
    341c:	1b 2b       	or	r17, r27
    341e:	08 94       	sec
    3420:	e1 1c       	adc	r14, r1
    3422:	f1 1c       	adc	r15, r1
    3424:	01 1d       	adc	r16, r1
    3426:	11 1d       	adc	r17, r1
    3428:	e1 86       	std	Z+9, r14	; 0x09
    342a:	f2 86       	std	Z+10, r15	; 0x0a
    342c:	03 87       	std	Z+11, r16	; 0x0b
    342e:	14 87       	std	Z+12, r17	; 0x0c
    3430:	41 e0       	ldi	r20, 0x01	; 1
    3432:	94 16       	cp	r9, r20
    3434:	11 f4       	brne	.+4      	; 0x343a <tcp_upcall+0x53c>
    3436:	83 e0       	ldi	r24, 0x03	; 3
    3438:	01 c0       	rjmp	.+2      	; 0x343c <tcp_upcall+0x53e>
    343a:	84 e0       	ldi	r24, 0x04	; 4
    343c:	80 83       	st	Z, r24
    343e:	03 c0       	rjmp	.+6      	; 0x3446 <tcp_upcall+0x548>
    3440:	5e 89       	ldd	r21, Y+22	; 0x16
    3442:	51 30       	cpi	r21, 0x01	; 1
    3444:	d1 f4       	brne	.+52     	; 0x347a <tcp_upcall+0x57c>
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	9a 81       	ldd	r25, Y+2	; 0x02
    344a:	2c e1       	ldi	r18, 0x1C	; 28
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	fc 01       	movw	r30, r24
    3450:	e2 9f       	mul	r30, r18
    3452:	c0 01       	movw	r24, r0
    3454:	e3 9f       	mul	r30, r19
    3456:	90 0d       	add	r25, r0
    3458:	f2 9f       	mul	r31, r18
    345a:	90 0d       	add	r25, r0
    345c:	11 24       	eor	r1, r1
    345e:	40 e0       	ldi	r20, 0x00	; 0
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	70 e0       	ldi	r23, 0x00	; 0
    3466:	8b 54       	subi	r24, 0x4B	; 75
    3468:	98 4f       	sbci	r25, 0xF8	; 248
    346a:	0e 94 20 15 	call	0x2a40	; 0x2a40 <tcp_sendit>
    346e:	05 c0       	rjmp	.+10     	; 0x347a <tcp_upcall+0x57c>
    3470:	82 e0       	ldi	r24, 0x02	; 2
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	9a 83       	std	Y+2, r25	; 0x02
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	05 c0       	rjmp	.+10     	; 0x3484 <tcp_upcall+0x586>
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
    347e:	02 97       	sbiw	r24, 0x02	; 2
    3480:	08 f4       	brcc	.+2      	; 0x3484 <tcp_upcall+0x586>
    3482:	66 c0       	rjmp	.+204    	; 0x3550 <tcp_upcall+0x652>
    3484:	f6 01       	movw	r30, r12
    3486:	85 85       	ldd	r24, Z+13	; 0x0d
    3488:	28 2f       	mov	r18, r24
    348a:	33 27       	eor	r19, r19
    348c:	22 fd       	sbrc	r18, 2
    348e:	60 c0       	rjmp	.+192    	; 0x3550 <tcp_upcall+0x652>
    3490:	f1 01       	movw	r30, r2
    3492:	84 85       	ldd	r24, Z+12	; 0x0c
    3494:	95 85       	ldd	r25, Z+13	; 0x0d
    3496:	a6 85       	ldd	r26, Z+14	; 0x0e
    3498:	b7 85       	ldd	r27, Z+15	; 0x0f
    349a:	8a 87       	std	Y+10, r24	; 0x0a
    349c:	9b 87       	std	Y+11, r25	; 0x0b
    349e:	ac 87       	std	Y+12, r26	; 0x0c
    34a0:	bd 87       	std	Y+13, r27	; 0x0d
    34a2:	f6 01       	movw	r30, r12
    34a4:	82 81       	ldd	r24, Z+2	; 0x02
    34a6:	93 81       	ldd	r25, Z+3	; 0x03
    34a8:	9f 83       	std	Y+7, r25	; 0x07
    34aa:	8e 83       	std	Y+6, r24	; 0x06
    34ac:	80 81       	ld	r24, Z
    34ae:	91 81       	ldd	r25, Z+1	; 0x01
    34b0:	99 87       	std	Y+9, r25	; 0x09
    34b2:	88 87       	std	Y+8, r24	; 0x08
    34b4:	1a 8a       	std	Y+18, r1	; 0x12
    34b6:	1b 8a       	std	Y+19, r1	; 0x13
    34b8:	1c 8a       	std	Y+20, r1	; 0x14
    34ba:	1d 8a       	std	Y+21, r1	; 0x15
    34bc:	24 ff       	sbrs	r18, 4
    34be:	36 c0       	rjmp	.+108    	; 0x352c <tcp_upcall+0x62e>
    34c0:	24 81       	ldd	r18, Z+4	; 0x04
    34c2:	35 81       	ldd	r19, Z+5	; 0x05
    34c4:	46 81       	ldd	r20, Z+6	; 0x06
    34c6:	57 81       	ldd	r21, Z+7	; 0x07
    34c8:	e5 2e       	mov	r14, r21
    34ca:	ff 24       	eor	r15, r15
    34cc:	00 27       	eor	r16, r16
    34ce:	11 27       	eor	r17, r17
    34d0:	da 01       	movw	r26, r20
    34d2:	c9 01       	movw	r24, r18
    34d4:	80 70       	andi	r24, 0x00	; 0
    34d6:	90 70       	andi	r25, 0x00	; 0
    34d8:	b0 70       	andi	r27, 0x00	; 0
    34da:	89 2f       	mov	r24, r25
    34dc:	9a 2f       	mov	r25, r26
    34de:	ab 2f       	mov	r26, r27
    34e0:	bb 27       	eor	r27, r27
    34e2:	e8 2a       	or	r14, r24
    34e4:	f9 2a       	or	r15, r25
    34e6:	0a 2b       	or	r16, r26
    34e8:	1b 2b       	or	r17, r27
    34ea:	b2 2f       	mov	r27, r18
    34ec:	aa 27       	eor	r26, r26
    34ee:	99 27       	eor	r25, r25
    34f0:	88 27       	eor	r24, r24
    34f2:	20 70       	andi	r18, 0x00	; 0
    34f4:	40 70       	andi	r20, 0x00	; 0
    34f6:	50 70       	andi	r21, 0x00	; 0
    34f8:	54 2f       	mov	r21, r20
    34fa:	43 2f       	mov	r20, r19
    34fc:	32 2f       	mov	r19, r18
    34fe:	22 27       	eor	r18, r18
    3500:	82 2b       	or	r24, r18
    3502:	93 2b       	or	r25, r19
    3504:	a4 2b       	or	r26, r20
    3506:	b5 2b       	or	r27, r21
    3508:	e8 2a       	or	r14, r24
    350a:	f9 2a       	or	r15, r25
    350c:	0a 2b       	or	r16, r26
    350e:	1b 2b       	or	r17, r27
    3510:	c3 01       	movw	r24, r6
    3512:	aa 27       	eor	r26, r26
    3514:	97 fd       	sbrc	r25, 7
    3516:	a0 95       	com	r26
    3518:	ba 2f       	mov	r27, r26
    351a:	e8 0e       	add	r14, r24
    351c:	f9 1e       	adc	r15, r25
    351e:	0a 1f       	adc	r16, r26
    3520:	1b 1f       	adc	r17, r27
    3522:	ee 86       	std	Y+14, r14	; 0x0e
    3524:	ff 86       	std	Y+15, r15	; 0x0f
    3526:	08 8b       	std	Y+16, r16	; 0x10
    3528:	19 8b       	std	Y+17, r17	; 0x11
    352a:	04 c0       	rjmp	.+8      	; 0x3534 <tcp_upcall+0x636>
    352c:	1e 86       	std	Y+14, r1	; 0x0e
    352e:	1f 86       	std	Y+15, r1	; 0x0f
    3530:	18 8a       	std	Y+16, r1	; 0x10
    3532:	19 8a       	std	Y+17, r1	; 0x11
    3534:	8b e1       	ldi	r24, 0x1B	; 27
    3536:	8d 83       	std	Y+5, r24	; 0x05
    3538:	40 e0       	ldi	r20, 0x00	; 0
    353a:	50 e0       	ldi	r21, 0x00	; 0
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	ce 01       	movw	r24, r28
    3542:	05 96       	adiw	r24, 0x05	; 5
    3544:	0e 94 20 15 	call	0x2a40	; 0x2a40 <tcp_sendit>
    3548:	03 c0       	rjmp	.+6      	; 0x3550 <tcp_upcall+0x652>
    354a:	f1 e0       	ldi	r31, 0x01	; 1
    354c:	fe 8b       	std	Y+22, r31	; 0x16
    354e:	29 cf       	rjmp	.-430    	; 0x33a2 <tcp_upcall+0x4a4>
    3550:	66 96       	adiw	r28, 0x16	; 22
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	de bf       	out	0x3e, r29	; 62
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	cd bf       	out	0x3d, r28	; 61
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	0f 91       	pop	r16
    3564:	ff 90       	pop	r15
    3566:	ef 90       	pop	r14
    3568:	df 90       	pop	r13
    356a:	cf 90       	pop	r12
    356c:	bf 90       	pop	r11
    356e:	af 90       	pop	r10
    3570:	9f 90       	pop	r9
    3572:	7f 90       	pop	r7
    3574:	6f 90       	pop	r6
    3576:	5f 90       	pop	r5
    3578:	4f 90       	pop	r4
    357a:	3f 90       	pop	r3
    357c:	2f 90       	pop	r2
    357e:	08 95       	ret

00003580 <tcp_sport>:
    3580:	e8 2f       	mov	r30, r24
    3582:	ff 27       	eor	r31, r31
    3584:	e3 30       	cpi	r30, 0x03	; 3
    3586:	f1 05       	cpc	r31, r1
    3588:	3c f0       	brlt	.+14     	; 0x3598 <tcp_sport+0x18>
    358a:	80 e4       	ldi	r24, 0x40	; 64
    358c:	92 e0       	ldi	r25, 0x02	; 2
    358e:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	08 95       	ret
    3598:	8c e1       	ldi	r24, 0x1C	; 28
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	9f 01       	movw	r18, r30
    359e:	28 9f       	mul	r18, r24
    35a0:	f0 01       	movw	r30, r0
    35a2:	29 9f       	mul	r18, r25
    35a4:	f0 0d       	add	r31, r0
    35a6:	38 9f       	mul	r19, r24
    35a8:	f0 0d       	add	r31, r0
    35aa:	11 24       	eor	r1, r1
    35ac:	e6 56       	subi	r30, 0x66	; 102
    35ae:	f8 4f       	sbci	r31, 0xF8	; 248
    35b0:	80 81       	ld	r24, Z
    35b2:	91 81       	ldd	r25, Z+1	; 0x01
    35b4:	08 95       	ret

000035b6 <tcp_status>:
    35b6:	e8 2f       	mov	r30, r24
    35b8:	ff 27       	eor	r31, r31
    35ba:	e3 30       	cpi	r30, 0x03	; 3
    35bc:	f1 05       	cpc	r31, r1
    35be:	3c f0       	brlt	.+14     	; 0x35ce <tcp_status+0x18>
    35c0:	82 e6       	ldi	r24, 0x62	; 98
    35c2:	92 e0       	ldi	r25, 0x02	; 2
    35c4:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	08 95       	ret
    35ce:	8c e1       	ldi	r24, 0x1C	; 28
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	9f 01       	movw	r18, r30
    35d4:	28 9f       	mul	r18, r24
    35d6:	f0 01       	movw	r30, r0
    35d8:	29 9f       	mul	r18, r25
    35da:	f0 0d       	add	r31, r0
    35dc:	38 9f       	mul	r19, r24
    35de:	f0 0d       	add	r31, r0
    35e0:	11 24       	eor	r1, r1
    35e2:	e7 56       	subi	r30, 0x67	; 103
    35e4:	f8 4f       	sbci	r31, 0xF8	; 248
    35e6:	80 81       	ld	r24, Z
    35e8:	99 27       	eor	r25, r25
    35ea:	08 95       	ret

000035ec <tcp_close>:
    35ec:	cf 93       	push	r28
    35ee:	df 93       	push	r29
    35f0:	28 2f       	mov	r18, r24
    35f2:	99 27       	eor	r25, r25
    35f4:	03 97       	sbiw	r24, 0x03	; 3
    35f6:	0c f4       	brge	.+2      	; 0x35fa <tcp_close+0xe>
    35f8:	50 c0       	rjmp	.+160    	; 0x369a <tcp_close+0xae>
    35fa:	85 e8       	ldi	r24, 0x85	; 133
    35fc:	92 e0       	ldi	r25, 0x02	; 2
    35fe:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	4e c0       	rjmp	.+156    	; 0x36a4 <tcp_close+0xb8>
    3608:	21 50       	subi	r18, 0x01	; 1
    360a:	8c e1       	ldi	r24, 0x1C	; 28
    360c:	28 9f       	mul	r18, r24
    360e:	e0 01       	movw	r28, r0
    3610:	11 24       	eor	r1, r1
    3612:	cb 54       	subi	r28, 0x4B	; 75
    3614:	d8 4f       	sbci	r29, 0xF8	; 248
    3616:	88 81       	ld	r24, Y
    3618:	99 27       	eor	r25, r25
    361a:	8f 70       	andi	r24, 0x0F	; 15
    361c:	90 70       	andi	r25, 0x00	; 0
    361e:	00 97       	sbiw	r24, 0x00	; 0
    3620:	11 f4       	brne	.+4      	; 0x3626 <tcp_close+0x3a>
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	3e c0       	rjmp	.+124    	; 0x36a2 <tcp_close+0xb6>
    3626:	8a 30       	cpi	r24, 0x0A	; 10
    3628:	91 05       	cpc	r25, r1
    362a:	99 f1       	breq	.+102    	; 0x3692 <tcp_close+0xa6>
    362c:	04 97       	sbiw	r24, 0x04	; 4
    362e:	b9 f4       	brne	.+46     	; 0x365e <tcp_close+0x72>
    3630:	87 e0       	ldi	r24, 0x07	; 7
    3632:	88 83       	st	Y, r24
    3634:	8d 85       	ldd	r24, Y+13	; 0x0d
    3636:	9e 85       	ldd	r25, Y+14	; 0x0e
    3638:	af 85       	ldd	r26, Y+15	; 0x0f
    363a:	b8 89       	ldd	r27, Y+16	; 0x10
    363c:	01 96       	adiw	r24, 0x01	; 1
    363e:	a1 1d       	adc	r26, r1
    3640:	b1 1d       	adc	r27, r1
    3642:	8d 87       	std	Y+13, r24	; 0x0d
    3644:	9e 87       	std	Y+14, r25	; 0x0e
    3646:	af 87       	std	Y+15, r26	; 0x0f
    3648:	b8 8b       	std	Y+16, r27	; 0x10
    364a:	40 e0       	ldi	r20, 0x00	; 0
    364c:	50 e0       	ldi	r21, 0x00	; 0
    364e:	60 e0       	ldi	r22, 0x00	; 0
    3650:	70 e0       	ldi	r23, 0x00	; 0
    3652:	ce 01       	movw	r24, r28
    3654:	0e 94 20 15 	call	0x2a40	; 0x2a40 <tcp_sendit>
    3658:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <timer_set>
    365c:	0a c0       	rjmp	.+20     	; 0x3672 <tcp_close+0x86>
    365e:	80 e1       	ldi	r24, 0x10	; 16
    3660:	88 83       	st	Y, r24
    3662:	40 e0       	ldi	r20, 0x00	; 0
    3664:	50 e0       	ldi	r21, 0x00	; 0
    3666:	60 e0       	ldi	r22, 0x00	; 0
    3668:	70 e0       	ldi	r23, 0x00	; 0
    366a:	ce 01       	movw	r24, r28
    366c:	0e 94 20 15 	call	0x2a40	; 0x2a40 <tcp_sendit>
    3670:	10 c0       	rjmp	.+32     	; 0x3692 <tcp_close+0xa6>
    3672:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <poll_serial>
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	0e 94 44 17 	call	0x2e88	; 0x2e88 <tcp_process>
    367c:	88 81       	ld	r24, Y
    367e:	88 23       	and	r24, r24
    3680:	41 f0       	breq	.+16     	; 0x3692 <tcp_close+0xa6>
    3682:	8a 30       	cpi	r24, 0x0A	; 10
    3684:	31 f0       	breq	.+12     	; 0x3692 <tcp_close+0xa6>
    3686:	87 e0       	ldi	r24, 0x07	; 7
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 14 09 	call	0x1228	; 0x1228 <timer_timeout>
    368e:	88 23       	and	r24, r24
    3690:	81 f3       	breq	.-32     	; 0x3672 <tcp_close+0x86>
    3692:	ce 01       	movw	r24, r28
    3694:	0e 94 08 15 	call	0x2a10	; 0x2a10 <tcp_clean_socket>
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <tcp_close+0xb4>
    369a:	22 23       	and	r18, r18
    369c:	09 f0       	breq	.+2      	; 0x36a0 <tcp_close+0xb4>
    369e:	b4 cf       	rjmp	.-152    	; 0x3608 <tcp_close+0x1c>
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	99 27       	eor	r25, r25
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	08 95       	ret

000036aa <tcp_open>:
    36aa:	df 92       	push	r13
    36ac:	ef 92       	push	r14
    36ae:	ff 92       	push	r15
    36b0:	0f 93       	push	r16
    36b2:	1f 93       	push	r17
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
    36b8:	7b 01       	movw	r14, r22
    36ba:	8c 01       	movw	r16, r24
    36bc:	80 91 b5 07 	lds	r24, 0x07B5
    36c0:	88 23       	and	r24, r24
    36c2:	11 f4       	brne	.+4      	; 0x36c8 <tcp_open+0x1e>
    36c4:	dd 24       	eor	r13, r13
    36c6:	07 c0       	rjmp	.+14     	; 0x36d6 <tcp_open+0x2c>
    36c8:	80 91 d1 07 	lds	r24, 0x07D1
    36cc:	88 23       	and	r24, r24
    36ce:	09 f0       	breq	.+2      	; 0x36d2 <tcp_open+0x28>
    36d0:	53 c0       	rjmp	.+166    	; 0x3778 <tcp_open+0xce>
    36d2:	e1 e0       	ldi	r30, 0x01	; 1
    36d4:	de 2e       	mov	r13, r30
    36d6:	8c e1       	ldi	r24, 0x1C	; 28
    36d8:	d8 9e       	mul	r13, r24
    36da:	e0 01       	movw	r28, r0
    36dc:	11 24       	eor	r1, r1
    36de:	cb 54       	subi	r28, 0x4B	; 75
    36e0:	d8 4f       	sbci	r29, 0xF8	; 248
    36e2:	3e 8b       	std	Y+22, r19	; 0x16
    36e4:	2d 8b       	std	Y+21, r18	; 0x15
    36e6:	85 2f       	mov	r24, r21
    36e8:	99 27       	eor	r25, r25
    36ea:	34 2f       	mov	r19, r20
    36ec:	22 27       	eor	r18, r18
    36ee:	82 2b       	or	r24, r18
    36f0:	93 2b       	or	r25, r19
    36f2:	9c 83       	std	Y+4, r25	; 0x04
    36f4:	8b 83       	std	Y+3, r24	; 0x03
    36f6:	ed 82       	std	Y+5, r14	; 0x05
    36f8:	fe 82       	std	Y+6, r15	; 0x06
    36fa:	0f 83       	std	Y+7, r16	; 0x07
    36fc:	18 87       	std	Y+8, r17	; 0x08
    36fe:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER_Get_Second>
    3702:	9a 83       	std	Y+2, r25	; 0x02
    3704:	89 83       	std	Y+1, r24	; 0x01
    3706:	82 e2       	ldi	r24, 0x22	; 34
    3708:	88 83       	st	Y, r24
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	a0 e0       	ldi	r26, 0x00	; 0
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	8d 87       	std	Y+13, r24	; 0x0d
    3714:	9e 87       	std	Y+14, r25	; 0x0e
    3716:	af 87       	std	Y+15, r26	; 0x0f
    3718:	b8 8b       	std	Y+16, r27	; 0x10
    371a:	19 8a       	std	Y+17, r1	; 0x11
    371c:	1a 8a       	std	Y+18, r1	; 0x12
    371e:	1b 8a       	std	Y+19, r1	; 0x13
    3720:	1c 8a       	std	Y+20, r1	; 0x14
    3722:	19 86       	std	Y+9, r1	; 0x09
    3724:	1a 86       	std	Y+10, r1	; 0x0a
    3726:	1b 86       	std	Y+11, r1	; 0x0b
    3728:	1c 86       	std	Y+12, r1	; 0x0c
    372a:	1b 8e       	std	Y+27, r1	; 0x1b
    372c:	1a 8e       	std	Y+26, r1	; 0x1a
    372e:	19 8e       	std	Y+25, r1	; 0x19
    3730:	18 8e       	std	Y+24, r1	; 0x18
    3732:	1f 8a       	std	Y+23, r1	; 0x17
    3734:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <timer_set>
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	70 e0       	ldi	r23, 0x00	; 0
    3740:	ce 01       	movw	r24, r28
    3742:	0e 94 20 15 	call	0x2a40	; 0x2a40 <tcp_sendit>
    3746:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <poll_serial>
    374a:	80 e0       	ldi	r24, 0x00	; 0
    374c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <tcp_process>
    3750:	98 81       	ld	r25, Y
    3752:	89 2f       	mov	r24, r25
    3754:	8f 70       	andi	r24, 0x0F	; 15
    3756:	84 30       	cpi	r24, 0x04	; 4
    3758:	59 f0       	breq	.+22     	; 0x3770 <tcp_open+0xc6>
    375a:	99 23       	and	r25, r25
    375c:	69 f0       	breq	.+26     	; 0x3778 <tcp_open+0xce>
    375e:	80 91 7e 03 	lds	r24, 0x037E
    3762:	99 27       	eor	r25, r25
    3764:	0e 94 14 09 	call	0x1228	; 0x1228 <timer_timeout>
    3768:	88 23       	and	r24, r24
    376a:	69 f3       	breq	.-38     	; 0x3746 <tcp_open+0x9c>
    376c:	18 82       	st	Y, r1
    376e:	04 c0       	rjmp	.+8      	; 0x3778 <tcp_open+0xce>
    3770:	d3 94       	inc	r13
    3772:	8d 2d       	mov	r24, r13
    3774:	99 27       	eor	r25, r25
    3776:	02 c0       	rjmp	.+4      	; 0x377c <tcp_open+0xd2>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	df 91       	pop	r29
    377e:	cf 91       	pop	r28
    3780:	1f 91       	pop	r17
    3782:	0f 91       	pop	r16
    3784:	ff 90       	pop	r15
    3786:	ef 90       	pop	r14
    3788:	df 90       	pop	r13
    378a:	08 95       	ret

0000378c <udp_init>:
// udp_init() - just init the udp socket table.
//-----------------------------------------------------------------------------
void
udp_init()
{
    378c:	10 92 ee 07 	sts	0x07EE, r1
    3790:	10 92 ed 07 	sts	0x07ED, r1
    3794:	10 92 f2 07 	sts	0x07F2, r1
    3798:	10 92 f1 07 	sts	0x07F1, r1
    379c:	08 95       	ret

0000379e <udp_bind>:
U8	i;
	
	for(i=0;i<MAX_UDP_SOCKETS;i++)
		udp_socket[i].port=0;
}



//-----------------------------------------------------------------------------
// udp_upcall() - this handles incoming UDP packets.
//-----------------------------------------------------------------------------
void
udp_upcall(IP *ip, UDP *udp, U16 len)
{
U16		tchk=0;
U8		i;
U16		protocol;

#ifdef DEBUG_LV3
	printf("\nudp upcall port %d\n"CRLF,udp->dest_port);
#endif
	//
	// Check the UDP checksum (we can omit this if we want)
	//
	// Checksum is ok if zero
	if(udp->checksum)	
	{
		//
		// First do psudo header
		//
		len-=sizeof(IP);
		protocol=swap(PROT_UDP);
		tchk=Checksum_16(0,(U16 *)&ip->source_ip,8);
		tchk=Checksum_16(tchk,(U16 *)&udp->length,2);
		tchk=Checksum_16(tchk,(U16 *)&protocol,2);
		tchk=Checksum_16(tchk,(U16 *)&udp->source_port,swap(udp->length));

		if(tchk!=0)
		{
			if(mm.IMMConfig & DEBUG_MODE)
			{
				DEBUG2("Bad UDP Checksum\n");
			}
			return;
		}
	}
	//
	// Demux on dest socket, just search list
	//
	for(i=0;i<MAX_UDP_SOCKETS;i++)
	{
		// look for a match5
		if(udp_socket[i].port==swap(udp->dest_port))
		{
			// We have a Match, Call the app. (struct ip_h *header,U8 *data, U16 len));
#ifdef DEBUG_LV3
	printf("\ncalling socket callback for port %d\n"CRLF,udp->dest_port);
#endif
			udp_socket[i].socket_callback(ip,udp,len);
		}
	}
	if(i>=MAX_UDP_SOCKETS)
	{
		// Send Port Not Reachable ICMP message
#ifdef DEBUG_LV3
	printf("\no udp port bound to %d\n"CRLF,udp->dest_port);
#endif
	}

}


//-----------------------------------------------------------------------------
// udp_bind(port, port_callback) - bind a port to a UDP socket.  Requires a 
//		Callback routine per socket for receive packets.
//-----------------------------------------------------------------------------
U8
udp_bind(U16 port, void (*callback)(struct ip_h *header,U8 *data, U16 len))
{
    379e:	9c 01       	movw	r18, r24
U8	i;
	
	for(i=0;i<MAX_UDP_SOCKETS;i++)
	{
		if (0==udp_socket[i].port)
    37a0:	80 91 ed 07 	lds	r24, 0x07ED
    37a4:	90 91 ee 07 	lds	r25, 0x07EE
    37a8:	89 2b       	or	r24, r25
    37aa:	21 f4       	brne	.+8      	; 0x37b4 <udp_bind+0x16>
    37ac:	e0 e0       	ldi	r30, 0x00	; 0
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	0c c0       	rjmp	.+24     	; 0x37cc <udp_bind+0x2e>
    37b4:	80 91 f1 07 	lds	r24, 0x07F1
    37b8:	90 91 f2 07 	lds	r25, 0x07F2
    37bc:	89 2b       	or	r24, r25
    37be:	19 f0       	breq	.+6      	; 0x37c6 <udp_bind+0x28>
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	08 95       	ret
    37c6:	e1 e0       	ldi	r30, 0x01	; 1
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	81 e0       	ldi	r24, 0x01	; 1
		{
			udp_socket[i].port=port;//swap(port);			// we convert here once, not every time on demux
    37cc:	ee 0f       	add	r30, r30
    37ce:	ff 1f       	adc	r31, r31
    37d0:	ee 0f       	add	r30, r30
    37d2:	ff 1f       	adc	r31, r31
    37d4:	e3 51       	subi	r30, 0x13	; 19
    37d6:	f8 4f       	sbci	r31, 0xF8	; 248
    37d8:	31 83       	std	Z+1, r19	; 0x01
    37da:	20 83       	st	Z, r18
			udp_socket[i].socket_callback=callback;
    37dc:	73 83       	std	Z+3, r23	; 0x03
    37de:	62 83       	std	Z+2, r22	; 0x02
			return (i+1);
    37e0:	8f 5f       	subi	r24, 0xFF	; 255
    37e2:	99 27       	eor	r25, r25
		}
	}
	return 0;
}
    37e4:	08 95       	ret

000037e6 <udp_port>:


//-----------------------------------------------------------------------------
// udp_port(socket)
//-----------------------------------------------------------------------------
U16
udp_port(U8 socket)
{
    37e6:	88 23       	and	r24, r24
    37e8:	19 f4       	brne	.+6      	; 0x37f0 <udp_port+0xa>
	if(socket==0)
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	08 95       	ret
		return(0);
	else
		return(udp_socket[socket-1].port);
    37f0:	e8 2f       	mov	r30, r24
    37f2:	ff 27       	eor	r31, r31
    37f4:	ee 0f       	add	r30, r30
    37f6:	ff 1f       	adc	r31, r31
    37f8:	ee 0f       	add	r30, r30
    37fa:	ff 1f       	adc	r31, r31
    37fc:	e7 51       	subi	r30, 0x17	; 23
    37fe:	f8 4f       	sbci	r31, 0xF8	; 248
    3800:	80 81       	ld	r24, Z
    3802:	91 81       	ldd	r25, Z+1	; 0x01
}
    3804:	08 95       	ret

00003806 <udp_close>:

//-----------------------------------------------------------------------------
// udp_close(socket)
//-----------------------------------------------------------------------------
void
udp_close(U8 socket)
{
    3806:	88 23       	and	r24, r24
    3808:	51 f0       	breq	.+20     	; 0x381e <udp_close+0x18>
	if(socket==0)
		return;
	else
		udp_socket[socket-1].port=0;
    380a:	e8 2f       	mov	r30, r24
    380c:	ff 27       	eor	r31, r31
    380e:	ee 0f       	add	r30, r30
    3810:	ff 1f       	adc	r31, r31
    3812:	ee 0f       	add	r30, r30
    3814:	ff 1f       	adc	r31, r31
    3816:	e7 51       	subi	r30, 0x17	; 23
    3818:	f8 4f       	sbci	r31, 0xF8	; 248
    381a:	11 82       	std	Z+1, r1	; 0x01
    381c:	10 82       	st	Z, r1
    381e:	08 95       	ret

00003820 <udp_upcall>:
    3820:	af 92       	push	r10
    3822:	bf 92       	push	r11
    3824:	cf 92       	push	r12
    3826:	df 92       	push	r13
    3828:	ef 92       	push	r14
    382a:	ff 92       	push	r15
    382c:	0f 93       	push	r16
    382e:	1f 93       	push	r17
    3830:	cf 93       	push	r28
    3832:	df 93       	push	r29
    3834:	cd b7       	in	r28, 0x3d	; 61
    3836:	de b7       	in	r29, 0x3e	; 62
    3838:	22 97       	sbiw	r28, 0x02	; 2
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	5c 01       	movw	r10, r24
    3846:	7b 01       	movw	r14, r22
    3848:	6a 01       	movw	r12, r20
    384a:	fb 01       	movw	r30, r22
    384c:	86 81       	ldd	r24, Z+6	; 0x06
    384e:	97 81       	ldd	r25, Z+7	; 0x07
    3850:	89 2b       	or	r24, r25
    3852:	69 f1       	breq	.+90     	; 0x38ae <udp_upcall+0x8e>
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	91 e1       	ldi	r25, 0x11	; 17
    3858:	9a 83       	std	Y+2, r25	; 0x02
    385a:	89 83       	std	Y+1, r24	; 0x01
    385c:	b5 01       	movw	r22, r10
    385e:	64 5f       	subi	r22, 0xF4	; 244
    3860:	7f 4f       	sbci	r23, 0xFF	; 255
    3862:	48 e0       	ldi	r20, 0x08	; 8
    3864:	50 e0       	ldi	r21, 0x00	; 0
    3866:	80 e0       	ldi	r24, 0x00	; 0
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    386e:	b7 01       	movw	r22, r14
    3870:	6c 5f       	subi	r22, 0xFC	; 252
    3872:	7f 4f       	sbci	r23, 0xFF	; 255
    3874:	42 e0       	ldi	r20, 0x02	; 2
    3876:	50 e0       	ldi	r21, 0x00	; 0
    3878:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    387c:	42 e0       	ldi	r20, 0x02	; 2
    387e:	50 e0       	ldi	r21, 0x00	; 0
    3880:	be 01       	movw	r22, r28
    3882:	6f 5f       	subi	r22, 0xFF	; 255
    3884:	7f 4f       	sbci	r23, 0xFF	; 255
    3886:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    388a:	f7 01       	movw	r30, r14
    388c:	24 81       	ldd	r18, Z+4	; 0x04
    388e:	35 81       	ldd	r19, Z+5	; 0x05
    3890:	43 2f       	mov	r20, r19
    3892:	55 27       	eor	r21, r21
    3894:	32 2f       	mov	r19, r18
    3896:	22 27       	eor	r18, r18
    3898:	42 2b       	or	r20, r18
    389a:	53 2b       	or	r21, r19
    389c:	b7 01       	movw	r22, r14
    389e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    38a2:	89 2b       	or	r24, r25
    38a4:	11 f5       	brne	.+68     	; 0x38ea <udp_upcall+0xca>
    38a6:	8c ee       	ldi	r24, 0xEC	; 236
    38a8:	9f ef       	ldi	r25, 0xFF	; 255
    38aa:	c8 0e       	add	r12, r24
    38ac:	d9 1e       	adc	r13, r25
    38ae:	0d ee       	ldi	r16, 0xED	; 237
    38b0:	17 e0       	ldi	r17, 0x07	; 7
    38b2:	f7 01       	movw	r30, r14
    38b4:	82 81       	ldd	r24, Z+2	; 0x02
    38b6:	93 81       	ldd	r25, Z+3	; 0x03
    38b8:	29 2f       	mov	r18, r25
    38ba:	33 27       	eor	r19, r19
    38bc:	98 2f       	mov	r25, r24
    38be:	88 27       	eor	r24, r24
    38c0:	28 2b       	or	r18, r24
    38c2:	39 2b       	or	r19, r25
    38c4:	f8 01       	movw	r30, r16
    38c6:	80 81       	ld	r24, Z
    38c8:	91 81       	ldd	r25, Z+1	; 0x01
    38ca:	82 17       	cp	r24, r18
    38cc:	93 07       	cpc	r25, r19
    38ce:	39 f4       	brne	.+14     	; 0x38de <udp_upcall+0xbe>
    38d0:	22 81       	ldd	r18, Z+2	; 0x02
    38d2:	33 81       	ldd	r19, Z+3	; 0x03
    38d4:	a6 01       	movw	r20, r12
    38d6:	b7 01       	movw	r22, r14
    38d8:	c5 01       	movw	r24, r10
    38da:	f9 01       	movw	r30, r18
    38dc:	09 95       	icall
    38de:	0c 5f       	subi	r16, 0xFC	; 252
    38e0:	1f 4f       	sbci	r17, 0xFF	; 255
    38e2:	f7 e0       	ldi	r31, 0x07	; 7
    38e4:	05 3f       	cpi	r16, 0xF5	; 245
    38e6:	1f 07       	cpc	r17, r31
    38e8:	21 f7       	brne	.-56     	; 0x38b2 <udp_upcall+0x92>
    38ea:	22 96       	adiw	r28, 0x02	; 2
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    38fe:	ff 90       	pop	r15
    3900:	ef 90       	pop	r14
    3902:	df 90       	pop	r13
    3904:	cf 90       	pop	r12
    3906:	bf 90       	pop	r11
    3908:	af 90       	pop	r10
    390a:	08 95       	ret

0000390c <udp_tx>:
}


//-----------------------------------------------------------------------------
// udp_tx(socket, peer_ip, peer_port, buffer, len)
//
// returns number of bytes sent, or -1 for send failed.	
// 
//-----------------------------------------------------------------------------
S16
udp_tx(IPAddr dest_ip, U16 dest_port, U16 src_port, U8 *data, U16 len)
{
    390c:	2f 92       	push	r2
    390e:	3f 92       	push	r3
    3910:	4f 92       	push	r4
    3912:	5f 92       	push	r5
    3914:	6f 92       	push	r6
    3916:	7f 92       	push	r7
    3918:	8f 92       	push	r8
    391a:	9f 92       	push	r9
    391c:	af 92       	push	r10
    391e:	bf 92       	push	r11
    3920:	cf 92       	push	r12
    3922:	df 92       	push	r13
    3924:	ef 92       	push	r14
    3926:	ff 92       	push	r15
    3928:	0f 93       	push	r16
    392a:	1f 93       	push	r17
    392c:	cf 93       	push	r28
    392e:	df 93       	push	r29
    3930:	cd b7       	in	r28, 0x3d	; 61
    3932:	de b7       	in	r29, 0x3e	; 62
    3934:	24 97       	sbiw	r28, 0x04	; 4
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	3b 01       	movw	r6, r22
    3942:	4c 01       	movw	r8, r24
    3944:	2a 01       	movw	r4, r20
    3946:	19 01       	movw	r2, r18
    3948:	1c 83       	std	Y+4, r17	; 0x04
    394a:	0b 83       	std	Y+3, r16	; 0x03
    394c:	57 01       	movw	r10, r14
IP			*ip;
UDP			*udp;
U16			protocol,tchk;
MEMBLOCK	*memblock;

	memblock=MEM_GetBlock();
    394e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <MEM_GetBlock>
    3952:	6c 01       	movw	r12, r24

	if(!memblock)
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	19 f4       	brne	.+6      	; 0x395e <udp_tx+0x52>
    3958:	2f ef       	ldi	r18, 0xFF	; 255
    395a:	3f ef       	ldi	r19, 0xFF	; 255
    395c:	9a c0       	rjmp	.+308    	; 0x3a92 <udp_tx+0x186>
	{
#ifdef DEBUG_LV1
		if(mm.IMMConfig & DEBUG_MODE)
		{
			CONSOLE_puts("UDP failed to allocate memblock"CRLF);
		}
#endif
		return(-1);
	}
	//
	// checked 
	//
	ip=(IP *)(memblock->data+sizeof(MAC));
    395e:	8c 01       	movw	r16, r24
    3960:	08 5e       	subi	r16, 0xE8	; 232
    3962:	1f 4f       	sbci	r17, 0xFF	; 255
	udp=(UDP *)ip->transport;
    3964:	ec e2       	ldi	r30, 0x2C	; 44
    3966:	ee 2e       	mov	r14, r30
    3968:	f1 2c       	mov	r15, r1
    396a:	e8 0e       	add	r14, r24
    396c:	f9 1e       	adc	r15, r25

	//
	//
	ip->version=IP_VERSION;
    396e:	85 e4       	ldi	r24, 0x45	; 69
    3970:	f6 01       	movw	r30, r12
    3972:	80 8f       	std	Z+24, r24	; 0x18
	ip->tos=mm.ip_tos;
    3974:	80 91 82 03 	lds	r24, 0x0382
    3978:	f8 01       	movw	r30, r16
    397a:	81 83       	std	Z+1, r24	; 0x01
	ip->length=swap((len+sizeof(IP)+sizeof(UDP)));
    397c:	c5 01       	movw	r24, r10
    397e:	4c 96       	adiw	r24, 0x1c	; 28
    3980:	29 2f       	mov	r18, r25
    3982:	33 27       	eor	r19, r19
    3984:	98 2f       	mov	r25, r24
    3986:	88 27       	eor	r24, r24
    3988:	28 2b       	or	r18, r24
    398a:	39 2b       	or	r19, r25
    398c:	33 83       	std	Z+3, r19	; 0x03
    398e:	22 83       	std	Z+2, r18	; 0x02
	ip->id=ipid++;
    3990:	80 91 e0 06 	lds	r24, 0x06E0
    3994:	90 91 e1 06 	lds	r25, 0x06E1
    3998:	95 83       	std	Z+5, r25	; 0x05
    399a:	84 83       	std	Z+4, r24	; 0x04
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	90 93 e1 06 	sts	0x06E1, r25
    39a2:	80 93 e0 06 	sts	0x06E0, r24
	ip->ttl=mm.ip_ttl;
    39a6:	80 91 81 03 	lds	r24, 0x0381
    39aa:	80 87       	std	Z+8, r24	; 0x08
	ip->flags=0;
    39ac:	17 82       	std	Z+7, r1	; 0x07
    39ae:	16 82       	std	Z+6, r1	; 0x06
	ip->protocol=PROT_UDP;
    39b0:	81 e1       	ldi	r24, 0x11	; 17
    39b2:	81 87       	std	Z+9, r24	; 0x09
	ip->source_ip.ip32=mm.our_ipaddr.ip32;
    39b4:	80 91 8a 03 	lds	r24, 0x038A
    39b8:	90 91 8b 03 	lds	r25, 0x038B
    39bc:	a0 91 8c 03 	lds	r26, 0x038C
    39c0:	b0 91 8d 03 	lds	r27, 0x038D
    39c4:	84 87       	std	Z+12, r24	; 0x0c
    39c6:	95 87       	std	Z+13, r25	; 0x0d
    39c8:	a6 87       	std	Z+14, r26	; 0x0e
    39ca:	b7 87       	std	Z+15, r27	; 0x0f
	ip->dest_ip.ip32=dest_ip.ip32;
    39cc:	60 8a       	std	Z+16, r6	; 0x10
    39ce:	71 8a       	std	Z+17, r7	; 0x11
    39d0:	82 8a       	std	Z+18, r8	; 0x12
    39d2:	93 8a       	std	Z+19, r9	; 0x13
	ip->checksum=0;
    39d4:	13 86       	std	Z+11, r1	; 0x0b
    39d6:	12 86       	std	Z+10, r1	; 0x0a
	ip->checksum=Checksum_16(0, (U16 *)ip, 20);
    39d8:	44 e1       	ldi	r20, 0x14	; 20
    39da:	50 e0       	ldi	r21, 0x00	; 0
    39dc:	b8 01       	movw	r22, r16
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
    39e6:	f8 01       	movw	r30, r16
    39e8:	93 87       	std	Z+11, r25	; 0x0b
    39ea:	82 87       	std	Z+10, r24	; 0x0a


	// Build UDP header.
	udp->dest_port=swap(dest_port);
    39ec:	85 2d       	mov	r24, r5
    39ee:	99 27       	eor	r25, r25
    39f0:	34 2d       	mov	r19, r4
    39f2:	22 27       	eor	r18, r18
    39f4:	82 2b       	or	r24, r18
    39f6:	93 2b       	or	r25, r19
    39f8:	f7 01       	movw	r30, r14
    39fa:	93 83       	std	Z+3, r25	; 0x03
    39fc:	82 83       	std	Z+2, r24	; 0x02
	udp->source_port=swap(src_port);
    39fe:	83 2d       	mov	r24, r3
    3a00:	99 27       	eor	r25, r25
    3a02:	32 2d       	mov	r19, r2
    3a04:	22 27       	eor	r18, r18
    3a06:	82 2b       	or	r24, r18
    3a08:	93 2b       	or	r25, r19
    3a0a:	f6 01       	movw	r30, r12
    3a0c:	95 a7       	std	Z+45, r25	; 0x2d
    3a0e:	84 a7       	std	Z+44, r24	; 0x2c
	udp->checksum=0;
    3a10:	f7 01       	movw	r30, r14
    3a12:	17 82       	std	Z+7, r1	; 0x07
    3a14:	16 82       	std	Z+6, r1	; 0x06
	udp->length=swap((sizeof(UDP)+len));
    3a16:	c5 01       	movw	r24, r10
    3a18:	08 96       	adiw	r24, 0x08	; 8
    3a1a:	29 2f       	mov	r18, r25
    3a1c:	33 27       	eor	r19, r19
    3a1e:	98 2f       	mov	r25, r24
    3a20:	88 27       	eor	r24, r24
    3a22:	28 2b       	or	r18, r24
    3a24:	39 2b       	or	r19, r25
    3a26:	35 83       	std	Z+5, r19	; 0x05
    3a28:	24 83       	std	Z+4, r18	; 0x04

	//
	// Build Psudo header checksum
	protocol=swap(PROT_UDP);
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	91 e1       	ldi	r25, 0x11	; 17
    3a2e:	9a 83       	std	Y+2, r25	; 0x02
    3a30:	89 83       	std	Y+1, r24	; 0x01
	//protocol=PROT_UDP;
	tchk=Checksum_16(0,(U16 *)&ip->source_ip,8);
    3a32:	b6 01       	movw	r22, r12
    3a34:	6c 5d       	subi	r22, 0xDC	; 220
    3a36:	7f 4f       	sbci	r23, 0xFF	; 255
    3a38:	48 e0       	ldi	r20, 0x08	; 8
    3a3a:	50 e0       	ldi	r21, 0x00	; 0
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
	tchk=Checksum_16(tchk,(U16 *)&udp->length,2);
    3a44:	b6 01       	movw	r22, r12
    3a46:	60 5d       	subi	r22, 0xD0	; 208
    3a48:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4a:	42 e0       	ldi	r20, 0x02	; 2
    3a4c:	50 e0       	ldi	r21, 0x00	; 0
    3a4e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
	tchk=Checksum_16(tchk,(U16 *)&protocol,2);
    3a52:	42 e0       	ldi	r20, 0x02	; 2
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	be 01       	movw	r22, r28
    3a58:	6f 5f       	subi	r22, 0xFF	; 255
    3a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
	//tchk=Checksum_16(tchk,(U16 *)&ip->flags,2);
	//
	// Build UDP checksum and store it
	tchk=Checksum_16(tchk,(U16 *)&udp->source_port,sizeof(UDP));
    3a60:	48 e0       	ldi	r20, 0x08	; 8
    3a62:	50 e0       	ldi	r21, 0x00	; 0
    3a64:	b7 01       	movw	r22, r14
    3a66:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>
	tchk=Checksum_16(tchk,(U16 *)data,len);
    3a6a:	a5 01       	movw	r20, r10
    3a6c:	6b 81       	ldd	r22, Y+3	; 0x03
    3a6e:	7c 81       	ldd	r23, Y+4	; 0x04
    3a70:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Checksum_16>

	udp->checksum=tchk;  //+++ fix
    3a74:	f7 01       	movw	r30, r14
    3a76:	97 83       	std	Z+7, r25	; 0x07
    3a78:	86 83       	std	Z+6, r24	; 0x06
	//printf("checksum = %x\n",tchk);
	
	ip_send(ip,data,(sizeof(IP)+sizeof(UDP)),len);	// IP_Send(header,data,len);
    3a7a:	95 01       	movw	r18, r10
    3a7c:	4c e1       	ldi	r20, 0x1C	; 28
    3a7e:	50 e0       	ldi	r21, 0x00	; 0
    3a80:	6b 81       	ldd	r22, Y+3	; 0x03
    3a82:	7c 81       	ldd	r23, Y+4	; 0x04
    3a84:	c8 01       	movw	r24, r16
    3a86:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <ip_send>
	
	MEM_FreeBlock(memblock);
    3a8a:	c6 01       	movw	r24, r12
    3a8c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <MEM_FreeBlock>

	return(len);
    3a90:	95 01       	movw	r18, r10
}
    3a92:	c9 01       	movw	r24, r18
    3a94:	24 96       	adiw	r28, 0x04	; 4
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	cd bf       	out	0x3d, r28	; 61
    3aa0:	df 91       	pop	r29
    3aa2:	cf 91       	pop	r28
    3aa4:	1f 91       	pop	r17
    3aa6:	0f 91       	pop	r16
    3aa8:	ff 90       	pop	r15
    3aaa:	ef 90       	pop	r14
    3aac:	df 90       	pop	r13
    3aae:	cf 90       	pop	r12
    3ab0:	bf 90       	pop	r11
    3ab2:	af 90       	pop	r10
    3ab4:	9f 90       	pop	r9
    3ab6:	8f 90       	pop	r8
    3ab8:	7f 90       	pop	r7
    3aba:	6f 90       	pop	r6
    3abc:	5f 90       	pop	r5
    3abe:	4f 90       	pop	r4
    3ac0:	3f 90       	pop	r3
    3ac2:	2f 90       	pop	r2
    3ac4:	08 95       	ret

00003ac6 <gobble_name>:
// gobble_name - supports resolve_name, gobbles hostname strings and tosses them away, 
//---------------------------------------------------------------------------------------------------
U16
gobble_name(U8 *data, U16 index)
{
    3ac6:	30 e0       	ldi	r19, 0x00	; 0
U8  t,i,count=0;

	while(1)
	{
		t=data[index++];
    3ac8:	fc 01       	movw	r30, r24
    3aca:	e6 0f       	add	r30, r22
    3acc:	f7 1f       	adc	r31, r23
    3ace:	e0 81       	ld	r30, Z
		count++;
		
		if(t==0)
    3ad0:	ee 23       	and	r30, r30
    3ad2:	99 f0       	breq	.+38     	; 0x3afa <gobble_name+0x34>
    3ad4:	6f 5f       	subi	r22, 0xFF	; 255
    3ad6:	7f 4f       	sbci	r23, 0xFF	; 255
		{    
			return(RET_CODE_OK);
		}
		else if(t==0xc0)
    3ad8:	e0 3c       	cpi	r30, 0xC0	; 192
    3ada:	19 f0       	breq	.+6      	; 0x3ae2 <gobble_name+0x1c>
    3adc:	3f 5f       	subi	r19, 0xFF	; 255
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	03 c0       	rjmp	.+6      	; 0x3ae8 <gobble_name+0x22>
		{
			index++;
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	01 96       	adiw	r24, 0x01	; 1
    3ae6:	08 95       	ret
			count++;
			return(index);
		}                 
		else
		{
			// This error out may not be needed.
			for(i=0;i<t;i++)           
			{
				index++;
				count++;         
    3ae8:	3f 5f       	subi	r19, 0xFF	; 255
				if(count>250)
    3aea:	3b 3f       	cpi	r19, 0xFB	; 251
    3aec:	30 f4       	brcc	.+12     	; 0x3afa <gobble_name+0x34>
    3aee:	6f 5f       	subi	r22, 0xFF	; 255
    3af0:	7f 4f       	sbci	r23, 0xFF	; 255
    3af2:	2f 5f       	subi	r18, 0xFF	; 255
    3af4:	2e 17       	cp	r18, r30
    3af6:	c1 f7       	brne	.-16     	; 0x3ae8 <gobble_name+0x22>
    3af8:	e7 cf       	rjmp	.-50     	; 0x3ac8 <gobble_name+0x2>
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	90 e0       	ldi	r25, 0x00	; 0
					return(0);
			}
		}
	}
}
    3afe:	08 95       	ret

00003b00 <resolve_callback>:

 
//---------------------------------------------------------------------------------------------------
// dump_bytes()
//---------------------------------------------------------------------------------------------------
/*
U8
dump_bytes(U8	bytes)
{           
	U8	i,t=0;
	    
	if(bytes)
	{	    
		for(i=0;i<bytes;i++)
			t=readx(SOCKET_DATA_REG);
	}

	return(t);	
}
*/

 
//---------------------------------------------------------------------------------------------------
// resolve_callback(IP *header, U8 * data, U16 len) - this is called by mTCPIP when a UDP packet
//	has been received on a resolver bound socket.
//---------------------------------------------------------------------------------------------------
void 
resolve_callback(IP *header,U8 *data, U16 len)
{
    3b00:	0f 93       	push	r16
    3b02:	1f 93       	push	r17
    3b04:	cf 93       	push	r28
    3b06:	df 93       	push	r29
    3b08:	eb 01       	movw	r28, r22
    3b0a:	8a 01       	movw	r16, r20
S16		index;
U8		t,i;

#ifdef DEBUG_LV2
	if(mm.IMMConfig & PPP_DEBUG)
	{
		CONSOLE_puts("DNS Reply: ");
	}
#endif

	// Parse the reply, first skip the UDP header.
	index=sizeof(UDP);
	//
	// Sanity check length
	//
	if(len<index+16)
    3b0c:	48 31       	cpi	r20, 0x18	; 24
    3b0e:	51 05       	cpc	r21, r1
    3b10:	08 f4       	brcc	.+2      	; 0x3b14 <resolve_callback+0x14>
    3b12:	4d c0       	rjmp	.+154    	; 0x3bae <resolve_callback+0xae>
		return;
	//
	// Check dns_id of incoming packet, dump the first byte as we don't care
	if(dns_id!=data[++index])
    3b14:	90 91 bd 02 	lds	r25, 0x02BD
    3b18:	89 85       	ldd	r24, Y+9	; 0x09
    3b1a:	98 17       	cp	r25, r24
    3b1c:	09 f0       	breq	.+2      	; 0x3b20 <resolve_callback+0x20>
    3b1e:	47 c0       	rjmp	.+142    	; 0x3bae <resolve_callback+0xae>
	{
#ifdef DEBUG_LV2
		if(mm.IMMConfig & PPP_DEBUG)
		{
			CONSOLE_puts("wrong id .."CRLF);
		}
#endif
		return;
	}
	index++;
	//
	// Check for a reply
	//printf("resonse code %x\n",data[index]);
	if(!(data[index++] & 0x80))
    3b20:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b22:	87 ff       	sbrs	r24, 7
    3b24:	44 c0       	rjmp	.+136    	; 0x3bae <resolve_callback+0xae>
	{
#ifdef DEBUG_LV2
		if(mm.IMMConfig & PPP_DEBUG)
		{
			CONSOLE_puts("no responce code .."CRLF);
		}
#endif
		return;
	}
	if(data[index] !=0x80)
    3b26:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b28:	80 38       	cpi	r24, 0x80	; 128
    3b2a:	e9 f0       	breq	.+58     	; 0x3b66 <resolve_callback+0x66>
	{
		// no answer
		//DEBUG1("no answer"CRLF);
#ifdef DEBUG_LV2
		if(mm.IMMConfig & PPP_DEBUG)
		{
			CONSOLE_puts("no anser code .."CRLF);
		}
#endif
		dnsflags=2;
    3b2c:	82 e0       	ldi	r24, 0x02	; 2
    3b2e:	80 93 bc 02 	sts	0x02BC, r24
    3b32:	3d c0       	rjmp	.+122    	; 0x3bae <resolve_callback+0xae>
		return;
	}
	// Toss  question count, answer count, authority count, and additional records, size of name we sent above, query type, query class
	//for(i=0;i<(13+namesize);i++)      
	index+=13+namesize;
	//
	//
	while(len>index)
	{
		index=gobble_name(data,index);
		if(0==index)
			break; 
		t=data[index++];
		i=data[index++];
		if((t==0) && (i==0x1))
		{	
			// We've found the host address, dump class, ttl and length of next object
		    index+=8;
			// Store the IP address
			foundip.ipb1=data[index++];
    3b34:	fb 01       	movw	r30, r22
    3b36:	ec 0f       	add	r30, r28
    3b38:	fd 1f       	adc	r31, r29
    3b3a:	82 85       	ldd	r24, Z+10	; 0x0a
    3b3c:	80 93 f5 07 	sts	0x07F5, r24
			foundip.ipb2=data[index++];
    3b40:	fb 01       	movw	r30, r22
    3b42:	ec 0f       	add	r30, r28
    3b44:	fd 1f       	adc	r31, r29
    3b46:	83 85       	ldd	r24, Z+11	; 0x0b
    3b48:	80 93 f6 07 	sts	0x07F6, r24
    3b4c:	fb 01       	movw	r30, r22
    3b4e:	3c 96       	adiw	r30, 0x0c	; 12
			foundip.ipb3=data[index++];
    3b50:	ec 0f       	add	r30, r28
    3b52:	fd 1f       	adc	r31, r29
    3b54:	80 81       	ld	r24, Z
    3b56:	80 93 f7 07 	sts	0x07F7, r24
			foundip.ipb4=data[index++];		
    3b5a:	81 81       	ldd	r24, Z+1	; 0x01
    3b5c:	80 93 f8 07 	sts	0x07F8, r24
#ifdef DEBUG_LV2
		if(mm.IMMConfig & PPP_DEBUG)
		{
			CONSOLE_puts("found ");
			printIP(&foundip);
			CONSOLE_puts("CRLF");
		}
#endif			

			dnsflags=1;
    3b60:	90 93 bc 02 	sts	0x02BC, r25
    3b64:	24 c0       	rjmp	.+72     	; 0x3bae <resolve_callback+0xae>
    3b66:	80 91 be 02 	lds	r24, 0x02BE
    3b6a:	68 2f       	mov	r22, r24
    3b6c:	77 27       	eor	r23, r23
    3b6e:	68 5e       	subi	r22, 0xE8	; 232
    3b70:	7f 4f       	sbci	r23, 0xFF	; 255
    3b72:	1a c0       	rjmp	.+52     	; 0x3ba8 <resolve_callback+0xa8>
    3b74:	ce 01       	movw	r24, r28
    3b76:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <gobble_name>
    3b7a:	bc 01       	movw	r22, r24
    3b7c:	00 97       	sbiw	r24, 0x00	; 0
    3b7e:	b9 f0       	breq	.+46     	; 0x3bae <resolve_callback+0xae>
    3b80:	fc 01       	movw	r30, r24
    3b82:	ec 0f       	add	r30, r28
    3b84:	fd 1f       	adc	r31, r29
    3b86:	91 81       	ldd	r25, Z+1	; 0x01
    3b88:	fe 01       	movw	r30, r28
    3b8a:	e6 0f       	add	r30, r22
    3b8c:	f7 1f       	adc	r31, r23
    3b8e:	80 81       	ld	r24, Z
    3b90:	88 23       	and	r24, r24
    3b92:	11 f4       	brne	.+4      	; 0x3b98 <resolve_callback+0x98>
    3b94:	91 30       	cpi	r25, 0x01	; 1
    3b96:	71 f2       	breq	.-100    	; 0x3b34 <resolve_callback+0x34>
//printf("*** found ! ***");
			break;	
		}
		else
		{
			// Eat this section 
			index+=7;
			index+=data[index]+1; // Remember to add in size (+1) of length itself
    3b98:	fb 01       	movw	r30, r22
    3b9a:	ec 0f       	add	r30, r28
    3b9c:	fd 1f       	adc	r31, r29
    3b9e:	81 85       	ldd	r24, Z+9	; 0x09
    3ba0:	66 5f       	subi	r22, 0xF6	; 246
    3ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba4:	68 0f       	add	r22, r24
    3ba6:	71 1d       	adc	r23, r1
    3ba8:	60 17       	cp	r22, r16
    3baa:	71 07       	cpc	r23, r17
    3bac:	18 f3       	brcs	.-58     	; 0x3b74 <resolve_callback+0x74>
    3bae:	df 91       	pop	r29
    3bb0:	cf 91       	pop	r28
    3bb2:	1f 91       	pop	r17
    3bb4:	0f 91       	pop	r16
    3bb6:	08 95       	ret

00003bb8 <resolve_name>:
		}
	}
}


//---------------------------------------------------------------------------------------------------
// DNS resolver, optimized for low memory requirements, code size.
//---------------------------------------------------------------------------------------------------
RET_CODE
resolve_name(IPAddr *ipaddr, U8 *hostname)
{   
    3bb8:	2f 92       	push	r2
    3bba:	3f 92       	push	r3
    3bbc:	4f 92       	push	r4
    3bbe:	5f 92       	push	r5
    3bc0:	6f 92       	push	r6
    3bc2:	7f 92       	push	r7
    3bc4:	8f 92       	push	r8
    3bc6:	9f 92       	push	r9
    3bc8:	af 92       	push	r10
    3bca:	bf 92       	push	r11
    3bcc:	cf 92       	push	r12
    3bce:	df 92       	push	r13
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
    3be0:	21 97       	sbiw	r28, 0x01	; 1
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	1c 01       	movw	r2, r24
    3bee:	6b 01       	movw	r12, r22
	U8			s,count;              
	U16 		stime;
	U8			*tptr,*ptr,*buffer,*name;
	U16			i;
	RET_CODE	ret=RET_CODE_FAIL;	
	MEMBLOCK	*memblock;

	//
	// If no DNS server, fail  sec_dns_addr
	//
	if((mm.pri_dns_addr.ipw1 | mm.pri_dns_addr.ipw2)==0)
    3bf0:	80 91 96 03 	lds	r24, 0x0396
    3bf4:	90 91 97 03 	lds	r25, 0x0397
    3bf8:	20 91 98 03 	lds	r18, 0x0398
    3bfc:	30 91 99 03 	lds	r19, 0x0399
    3c00:	82 2b       	or	r24, r18
    3c02:	93 2b       	or	r25, r19
    3c04:	89 2b       	or	r24, r25
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <resolve_name+0x52>
    3c08:	53 c1       	rjmp	.+678    	; 0x3eb0 <resolve_name+0x2f8>
		return(ret);	
	//
	// Check DNS cache 
	//
	if(0==strcmp(cache_name,hostname))
    3c0a:	8f eb       	ldi	r24, 0xBF	; 191
    3c0c:	92 e0       	ldi	r25, 0x02	; 2
    3c0e:	0e 94 76 24 	call	0x48ec	; 0x48ec <strcmp>
    3c12:	89 2b       	or	r24, r25
    3c14:	81 f4       	brne	.+32     	; 0x3c36 <resolve_name+0x7e>
	{

		// Found a match, return IP address from cache.
		ipaddr->ip32=cache_ip.ip32;
    3c16:	80 91 dd 02 	lds	r24, 0x02DD
    3c1a:	90 91 de 02 	lds	r25, 0x02DE
    3c1e:	a0 91 df 02 	lds	r26, 0x02DF
    3c22:	b0 91 e0 02 	lds	r27, 0x02E0
    3c26:	f1 01       	movw	r30, r2
    3c28:	80 83       	st	Z, r24
    3c2a:	91 83       	std	Z+1, r25	; 0x01
    3c2c:	a2 83       	std	Z+2, r26	; 0x02
    3c2e:	b3 83       	std	Z+3, r27	; 0x03
    3c30:	80 e0       	ldi	r24, 0x00	; 0
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	3f c1       	rjmp	.+638    	; 0x3eb4 <resolve_name+0x2fc>

#ifdef DEBUG_LV2
		if(mm.IMMConfig & PPP_DEBUG)
		{
			DEBUG2("DNS cache hit"CRLF);
		}
#endif
		return(RET_CODE_OK);
	}
	//
	// Clear the DNS flag, for now this means that only one pending process
	//
	dnsflags=0;
    3c36:	10 92 bc 02 	sts	0x02BC, r1
	//
	// Allocate a buffer, right now we do static, change in future.
	//
	memblock=MEM_GetBlock();
    3c3a:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <MEM_GetBlock>
    3c3e:	4c 01       	movw	r8, r24
	if(0==memblock)
    3c40:	00 97       	sbiw	r24, 0x00	; 0
    3c42:	09 f4       	brne	.+2      	; 0x3c46 <resolve_name+0x8e>
    3c44:	35 c1       	rjmp	.+618    	; 0x3eb0 <resolve_name+0x2f8>
	{
		return(ret);
	}

	buffer=memblock->data;
    3c46:	3a e0       	ldi	r19, 0x0A	; 10
    3c48:	a3 2e       	mov	r10, r19
    3c4a:	b1 2c       	mov	r11, r1
    3c4c:	a8 0e       	add	r10, r24
    3c4e:	b9 1e       	adc	r11, r25
	
	//
	// Bind the UDP port for the reply
	//
	s=udp_bind(2048, (void *)&resolve_callback);
    3c50:	60 e8       	ldi	r22, 0x80	; 128
    3c52:	7d e1       	ldi	r23, 0x1D	; 29
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	98 e0       	ldi	r25, 0x08	; 8
    3c58:	0e 94 cf 1b 	call	0x379e	; 0x379e <udp_bind>
    3c5c:	89 83       	std	Y+1, r24	; 0x01
	if(0==s)
    3c5e:	88 23       	and	r24, r24
    3c60:	49 f4       	brne	.+18     	; 0x3c74 <resolve_name+0xbc>
	{
		MEM_FreeBlock(memblock);
    3c62:	c4 01       	movw	r24, r8
    3c64:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <MEM_FreeBlock>
    3c68:	23 c1       	rjmp	.+582    	; 0x3eb0 <resolve_name+0x2f8>
		return(ret);
	}
		
	//
	// Try 2 times to resolve the name
	//
	for(count=0;count<MAX_DNS_RETRY;count++)
	{
#ifdef DEBUG_LV2
		if(mm.IMMConfig & PPP_DEBUG)
		{
			CONSOLE_puts("building DNS request to DNS server ");
			printIP(&mm.pri_dns_addr);
			CONSOLE_puts(" for ");
			CONSOLE_puts(hostname);
			CONSOLE_puts("CRLF");
		}
#endif

		//
		// point to our buffer
		//
		tptr=buffer;
		//
		// Build a DNS request packet
		//
   		// Build the reqest, [dnsid][querytype][questions][answers][rr's][ad rr's][hostname2resolve][querytype][queryclass]
		*tptr++=0;
		*tptr++=dns_id;
		// querytype (flags), always use 01 00 for query, this tels the server to do all the work.
		*tptr++=0x01;
		*tptr++=0x00;	
		// Number of questions, we always ask just one question
		*tptr++=0x00;
		*tptr++=0x01;		
		//  Store number of answers, always 0 
		*tptr++=0x00;
		*tptr++=0x00;	 
		// Store the number of Authority RR's, always zero
		*tptr++=0x00;
		*tptr++=0x00;	 
		// Store the number of aditional RR's, always zero
		*tptr++=0x00;
		*tptr++=0x00;	                                    
		//
		// Convert the name we want to resolve into the correct format (Stevens Vol1 Pg 193), keep
		//	tabs on the number of bytes we send here so we can skip them in the reply without having
		//	to parse them.
		//   
		namesize=1;           
		name=hostname;
		while((*name >=  46) && (*name!=':'))
		{          
			ptr=name;  

			i=0;
			//while((*ptr !='.') && (*ptr > 32) && (*ptr != ':'))
			while(((*ptr>=47) && (*ptr != ':')) || *ptr==45)
			{                 
				i++;
				ptr++;
			}   
			
			*tptr++=(U8)i;
			namesize++;

			while(i--)
			{
				*tptr++=*name++;
				namesize++;
			}
			 
			// Skip period if necessary 
			if(*name=='.')       
			{
				name++;
			}
		}
		*tptr++=0;
		// query type 00 01 if we want an IP address, use 00 05 if you want to resolve a n IP address to a name
		*tptr++=0;
		*tptr++=1;
		// Query Class, always 00 01 for IP 
		*tptr++=0;
		*tptr++=1;    
		// 
		// Send the data out the socket
		//
		if( (1==count) && (0!=(mm.sec_dns_addr.ipw1 | mm.sec_dns_addr.ipw2)) )
			udp_tx(mm.sec_dns_addr, 53, 2048, buffer, (U16)(namesize+16));
		else
			udp_tx(mm.pri_dns_addr, 53, 2048, buffer, (U16)(namesize+16));

		// Wait for a reply, up to 5 seconds. 
		
		stime=TIMER_Get_Second();  	
		// +++ make sure this works..
		while(0==dnsflags)
    	{   
			//poll_serial();
	    	if(mm.dns_timeout <  (U8)(TIMER_Get_Second()-stime)) 
    		{                 
				ret=RET_CODE_TIMEOUT;
#ifdef DEBUG_LV2
		if(mm.IMMConfig & PPP_DEBUG)
		{
			CONSOLE_puts("DNS timeout"CRLF);
		}
#endif	
				break;
    		}
			//printf("Timer = %x \n",TIMER_Get_Second());
			poll_serial();
	    } 
		//
		// Check DNS flags
		//
		if(1==dnsflags)
		{
#ifdef DEBUG_LV2
		if(mm.IMMConfig & PPP_DEBUG)
		{
			CONSOLE_puts("found return IP address "CRLF);
		}
#endif	
			ret=RET_CODE_OK;
			ipaddr->ip32=foundip.ip32;
			//
			// Update cache, if hostname fits in cache
			//
			i=strlen(hostname);
			if(i<CACHE_NAME_SIZE)
			{
				// store the cache element
				cache_ip.ip32=foundip.ip32;
				bytecopy(cache_name,hostname,i);
				cache_name[i]=0;
			}
			break;
		} else if(dnsflags==2)
    3c6a:	27 ef       	ldi	r18, 0xF7	; 247
    3c6c:	62 2e       	mov	r6, r18
    3c6e:	2f ef       	ldi	r18, 0xFF	; 255
    3c70:	72 2e       	mov	r7, r18
    3c72:	11 c1       	rjmp	.+546    	; 0x3e96 <resolve_name+0x2de>
    3c74:	97 ef       	ldi	r25, 0xF7	; 247
    3c76:	69 2e       	mov	r6, r25
    3c78:	9f ef       	ldi	r25, 0xFF	; 255
    3c7a:	79 2e       	mov	r7, r25
    3c7c:	44 24       	eor	r4, r4
    3c7e:	55 24       	eor	r5, r5
    3c80:	f5 01       	movw	r30, r10
    3c82:	11 92       	st	Z+, r1
    3c84:	9f 01       	movw	r18, r30
    3c86:	80 91 bd 02 	lds	r24, 0x02BD
    3c8a:	f5 01       	movw	r30, r10
    3c8c:	81 83       	std	Z+1, r24	; 0x01
    3c8e:	d9 01       	movw	r26, r18
    3c90:	11 96       	adiw	r26, 0x01	; 1
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	f9 01       	movw	r30, r18
    3c96:	81 83       	std	Z+1, r24	; 0x01
    3c98:	9d 01       	movw	r18, r26
    3c9a:	2f 5f       	subi	r18, 0xFF	; 255
    3c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c9e:	fd 01       	movw	r30, r26
    3ca0:	11 82       	std	Z+1, r1	; 0x01
    3ca2:	d9 01       	movw	r26, r18
    3ca4:	11 96       	adiw	r26, 0x01	; 1
    3ca6:	f9 01       	movw	r30, r18
    3ca8:	11 82       	std	Z+1, r1	; 0x01
    3caa:	9d 01       	movw	r18, r26
    3cac:	2f 5f       	subi	r18, 0xFF	; 255
    3cae:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb0:	fd 01       	movw	r30, r26
    3cb2:	81 83       	std	Z+1, r24	; 0x01
    3cb4:	d9 01       	movw	r26, r18
    3cb6:	11 96       	adiw	r26, 0x01	; 1
    3cb8:	f9 01       	movw	r30, r18
    3cba:	11 82       	std	Z+1, r1	; 0x01
    3cbc:	9d 01       	movw	r18, r26
    3cbe:	2f 5f       	subi	r18, 0xFF	; 255
    3cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cc2:	fd 01       	movw	r30, r26
    3cc4:	11 82       	std	Z+1, r1	; 0x01
    3cc6:	d9 01       	movw	r26, r18
    3cc8:	11 96       	adiw	r26, 0x01	; 1
    3cca:	f9 01       	movw	r30, r18
    3ccc:	11 82       	std	Z+1, r1	; 0x01
    3cce:	9d 01       	movw	r18, r26
    3cd0:	2f 5f       	subi	r18, 0xFF	; 255
    3cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd4:	fd 01       	movw	r30, r26
    3cd6:	11 82       	std	Z+1, r1	; 0x01
    3cd8:	d9 01       	movw	r26, r18
    3cda:	11 96       	adiw	r26, 0x01	; 1
    3cdc:	f9 01       	movw	r30, r18
    3cde:	11 82       	std	Z+1, r1	; 0x01
    3ce0:	fd 01       	movw	r30, r26
    3ce2:	11 82       	std	Z+1, r1	; 0x01
    3ce4:	9d 01       	movw	r18, r26
    3ce6:	2e 5f       	subi	r18, 0xFE	; 254
    3ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cea:	80 93 be 02 	sts	0x02BE, r24
    3cee:	86 01       	movw	r16, r12
    3cf0:	91 e0       	ldi	r25, 0x01	; 1
    3cf2:	2c c0       	rjmp	.+88     	; 0x3d4c <resolve_name+0x194>
    3cf4:	4f 5f       	subi	r20, 0xFF	; 255
    3cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    3cf8:	31 96       	adiw	r30, 0x01	; 1
    3cfa:	80 81       	ld	r24, Z
    3cfc:	8f 32       	cpi	r24, 0x2F	; 47
    3cfe:	18 f0       	brcs	.+6      	; 0x3d06 <resolve_name+0x14e>
    3d00:	8a 33       	cpi	r24, 0x3A	; 58
    3d02:	c1 f7       	brne	.-16     	; 0x3cf4 <resolve_name+0x13c>
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <resolve_name+0x152>
    3d06:	8d 32       	cpi	r24, 0x2D	; 45
    3d08:	a9 f3       	breq	.-22     	; 0x3cf4 <resolve_name+0x13c>
    3d0a:	d9 01       	movw	r26, r18
    3d0c:	4d 93       	st	X+, r20
    3d0e:	9f 5f       	subi	r25, 0xFF	; 255
    3d10:	79 01       	movw	r14, r18
    3d12:	b8 01       	movw	r22, r16
    3d14:	9a 01       	movw	r18, r20
    3d16:	05 c0       	rjmp	.+10     	; 0x3d22 <resolve_name+0x16a>
    3d18:	fb 01       	movw	r30, r22
    3d1a:	81 91       	ld	r24, Z+
    3d1c:	bf 01       	movw	r22, r30
    3d1e:	f7 01       	movw	r30, r14
    3d20:	80 83       	st	Z, r24
    3d22:	21 50       	subi	r18, 0x01	; 1
    3d24:	30 40       	sbci	r19, 0x00	; 0
    3d26:	08 94       	sec
    3d28:	e1 1c       	adc	r14, r1
    3d2a:	f1 1c       	adc	r15, r1
    3d2c:	ff ef       	ldi	r31, 0xFF	; 255
    3d2e:	2f 3f       	cpi	r18, 0xFF	; 255
    3d30:	3f 07       	cpc	r19, r31
    3d32:	91 f7       	brne	.-28     	; 0x3d18 <resolve_name+0x160>
    3d34:	94 0f       	add	r25, r20
    3d36:	04 0f       	add	r16, r20
    3d38:	15 1f       	adc	r17, r21
    3d3a:	9d 01       	movw	r18, r26
    3d3c:	24 0f       	add	r18, r20
    3d3e:	35 1f       	adc	r19, r21
    3d40:	f8 01       	movw	r30, r16
    3d42:	80 81       	ld	r24, Z
    3d44:	8e 32       	cpi	r24, 0x2E	; 46
    3d46:	11 f4       	brne	.+4      	; 0x3d4c <resolve_name+0x194>
    3d48:	0f 5f       	subi	r16, 0xFF	; 255
    3d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	80 81       	ld	r24, Z
    3d50:	8e 32       	cpi	r24, 0x2E	; 46
    3d52:	30 f0       	brcs	.+12     	; 0x3d60 <resolve_name+0x1a8>
    3d54:	8a 33       	cpi	r24, 0x3A	; 58
    3d56:	21 f0       	breq	.+8      	; 0x3d60 <resolve_name+0x1a8>
    3d58:	f8 01       	movw	r30, r16
    3d5a:	40 e0       	ldi	r20, 0x00	; 0
    3d5c:	50 e0       	ldi	r21, 0x00	; 0
    3d5e:	cd cf       	rjmp	.-102    	; 0x3cfa <resolve_name+0x142>
    3d60:	90 93 be 02 	sts	0x02BE, r25
    3d64:	f9 01       	movw	r30, r18
    3d66:	11 92       	st	Z+, r1
    3d68:	af 01       	movw	r20, r30
    3d6a:	f9 01       	movw	r30, r18
    3d6c:	11 82       	std	Z+1, r1	; 0x01
    3d6e:	da 01       	movw	r26, r20
    3d70:	11 96       	adiw	r26, 0x01	; 1
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	fa 01       	movw	r30, r20
    3d76:	81 83       	std	Z+1, r24	; 0x01
    3d78:	fd 01       	movw	r30, r26
    3d7a:	11 82       	std	Z+1, r1	; 0x01
    3d7c:	82 83       	std	Z+2, r24	; 0x02
    3d7e:	48 16       	cp	r4, r24
    3d80:	f9 f4       	brne	.+62     	; 0x3dc0 <resolve_name+0x208>
    3d82:	80 91 9a 03 	lds	r24, 0x039A
    3d86:	90 91 9b 03 	lds	r25, 0x039B
    3d8a:	20 91 9c 03 	lds	r18, 0x039C
    3d8e:	30 91 9d 03 	lds	r19, 0x039D
    3d92:	82 2b       	or	r24, r18
    3d94:	93 2b       	or	r25, r19
    3d96:	89 2b       	or	r24, r25
    3d98:	99 f0       	breq	.+38     	; 0x3dc0 <resolve_name+0x208>
    3d9a:	20 91 be 02 	lds	r18, 0x02BE
    3d9e:	33 27       	eor	r19, r19
    3da0:	20 5f       	subi	r18, 0xF0	; 240
    3da2:	3f 4f       	sbci	r19, 0xFF	; 255
    3da4:	60 91 9a 03 	lds	r22, 0x039A
    3da8:	70 91 9b 03 	lds	r23, 0x039B
    3dac:	80 91 9c 03 	lds	r24, 0x039C
    3db0:	90 91 9d 03 	lds	r25, 0x039D
    3db4:	12 c0       	rjmp	.+36     	; 0x3dda <resolve_name+0x222>
    3db6:	89 ef       	ldi	r24, 0xF9	; 249
    3db8:	68 2e       	mov	r6, r24
    3dba:	8f ef       	ldi	r24, 0xFF	; 255
    3dbc:	78 2e       	mov	r7, r24
    3dbe:	26 c0       	rjmp	.+76     	; 0x3e0c <resolve_name+0x254>
    3dc0:	20 91 be 02 	lds	r18, 0x02BE
    3dc4:	33 27       	eor	r19, r19
    3dc6:	20 5f       	subi	r18, 0xF0	; 240
    3dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3dca:	60 91 96 03 	lds	r22, 0x0396
    3dce:	70 91 97 03 	lds	r23, 0x0397
    3dd2:	80 91 98 03 	lds	r24, 0x0398
    3dd6:	90 91 99 03 	lds	r25, 0x0399
    3dda:	79 01       	movw	r14, r18
    3ddc:	85 01       	movw	r16, r10
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	38 e0       	ldi	r19, 0x08	; 8
    3de2:	45 e3       	ldi	r20, 0x35	; 53
    3de4:	50 e0       	ldi	r21, 0x00	; 0
    3de6:	0e 94 86 1c 	call	0x390c	; 0x390c <udp_tx>
    3dea:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER_Get_Second>
    3dee:	7c 01       	movw	r14, r24
    3df0:	09 c0       	rjmp	.+18     	; 0x3e04 <resolve_name+0x24c>
    3df2:	10 91 7a 03 	lds	r17, 0x037A
    3df6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER_Get_Second>
    3dfa:	8e 19       	sub	r24, r14
    3dfc:	18 17       	cp	r17, r24
    3dfe:	d8 f2       	brcs	.-74     	; 0x3db6 <resolve_name+0x1fe>
    3e00:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <poll_serial>
    3e04:	80 91 bc 02 	lds	r24, 0x02BC
    3e08:	88 23       	and	r24, r24
    3e0a:	99 f3       	breq	.-26     	; 0x3df2 <resolve_name+0x23a>
    3e0c:	80 91 bc 02 	lds	r24, 0x02BC
    3e10:	81 30       	cpi	r24, 0x01	; 1
    3e12:	b1 f5       	brne	.+108    	; 0x3e80 <resolve_name+0x2c8>
    3e14:	80 91 f5 07 	lds	r24, 0x07F5
    3e18:	90 91 f6 07 	lds	r25, 0x07F6
    3e1c:	a0 91 f7 07 	lds	r26, 0x07F7
    3e20:	b0 91 f8 07 	lds	r27, 0x07F8
    3e24:	f1 01       	movw	r30, r2
    3e26:	80 83       	st	Z, r24
    3e28:	91 83       	std	Z+1, r25	; 0x01
    3e2a:	a2 83       	std	Z+2, r26	; 0x02
    3e2c:	b3 83       	std	Z+3, r27	; 0x03
    3e2e:	f6 01       	movw	r30, r12
    3e30:	01 90       	ld	r0, Z+
    3e32:	00 20       	and	r0, r0
    3e34:	e9 f7       	brne	.-6      	; 0x3e30 <resolve_name+0x278>
    3e36:	8f 01       	movw	r16, r30
    3e38:	01 50       	subi	r16, 0x01	; 1
    3e3a:	10 40       	sbci	r17, 0x00	; 0
    3e3c:	0c 19       	sub	r16, r12
    3e3e:	1d 09       	sbc	r17, r13
    3e40:	0e 31       	cpi	r16, 0x1E	; 30
    3e42:	11 05       	cpc	r17, r1
    3e44:	d0 f4       	brcc	.+52     	; 0x3e7a <resolve_name+0x2c2>
    3e46:	80 91 f5 07 	lds	r24, 0x07F5
    3e4a:	90 91 f6 07 	lds	r25, 0x07F6
    3e4e:	a0 91 f7 07 	lds	r26, 0x07F7
    3e52:	b0 91 f8 07 	lds	r27, 0x07F8
    3e56:	80 93 dd 02 	sts	0x02DD, r24
    3e5a:	90 93 de 02 	sts	0x02DE, r25
    3e5e:	a0 93 df 02 	sts	0x02DF, r26
    3e62:	b0 93 e0 02 	sts	0x02E0, r27
    3e66:	a8 01       	movw	r20, r16
    3e68:	b6 01       	movw	r22, r12
    3e6a:	8f eb       	ldi	r24, 0xBF	; 191
    3e6c:	92 e0       	ldi	r25, 0x02	; 2
    3e6e:	0e 94 12 04 	call	0x824	; 0x824 <bytecopy>
    3e72:	01 54       	subi	r16, 0x41	; 65
    3e74:	1d 4f       	sbci	r17, 0xFD	; 253
    3e76:	f8 01       	movw	r30, r16
    3e78:	10 82       	st	Z, r1
    3e7a:	66 24       	eor	r6, r6
    3e7c:	77 24       	eor	r7, r7
    3e7e:	0b c0       	rjmp	.+22     	; 0x3e96 <resolve_name+0x2de>
    3e80:	82 30       	cpi	r24, 0x02	; 2
    3e82:	09 f4       	brne	.+2      	; 0x3e86 <resolve_name+0x2ce>
    3e84:	f2 ce       	rjmp	.-540    	; 0x3c6a <resolve_name+0xb2>
    3e86:	08 94       	sec
    3e88:	41 1c       	adc	r4, r1
    3e8a:	51 1c       	adc	r5, r1
    3e8c:	f3 e0       	ldi	r31, 0x03	; 3
    3e8e:	4f 16       	cp	r4, r31
    3e90:	51 04       	cpc	r5, r1
    3e92:	09 f0       	breq	.+2      	; 0x3e96 <resolve_name+0x2de>
    3e94:	f5 ce       	rjmp	.-534    	; 0x3c80 <resolve_name+0xc8>
		{
			ret=RET_CODE_FAIL;
			break;
		}
    }       
	// incerment dns_id so we don't get this session confused with another session.             
	dns_id++;
    3e96:	80 91 bd 02 	lds	r24, 0x02BD
    3e9a:	8f 5f       	subi	r24, 0xFF	; 255
    3e9c:	80 93 bd 02 	sts	0x02BD, r24

	// release bound socket
	udp_close(s);
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	0e 94 03 1c 	call	0x3806	; 0x3806 <udp_close>

	// Release memory
	MEM_FreeBlock(memblock);
    3ea6:	c4 01       	movw	r24, r8
    3ea8:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <MEM_FreeBlock>
    3eac:	c3 01       	movw	r24, r6
    3eae:	02 c0       	rjmp	.+4      	; 0x3eb4 <resolve_name+0x2fc>

	// Store Cache Element


	// return code
	return(ret);
    3eb0:	87 ef       	ldi	r24, 0xF7	; 247
    3eb2:	9f ef       	ldi	r25, 0xFF	; 255
    3eb4:	21 96       	adiw	r28, 0x01	; 1
    3eb6:	0f b6       	in	r0, 0x3f	; 63
    3eb8:	f8 94       	cli
    3eba:	de bf       	out	0x3e, r29	; 62
    3ebc:	0f be       	out	0x3f, r0	; 63
    3ebe:	cd bf       	out	0x3d, r28	; 61
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	1f 91       	pop	r17
    3ec6:	0f 91       	pop	r16
    3ec8:	ff 90       	pop	r15
    3eca:	ef 90       	pop	r14
    3ecc:	df 90       	pop	r13
    3ece:	cf 90       	pop	r12
    3ed0:	bf 90       	pop	r11
    3ed2:	af 90       	pop	r10
    3ed4:	9f 90       	pop	r9
    3ed6:	8f 90       	pop	r8
    3ed8:	7f 90       	pop	r7
    3eda:	6f 90       	pop	r6
    3edc:	5f 90       	pop	r5
    3ede:	4f 90       	pop	r4
    3ee0:	3f 90       	pop	r3
    3ee2:	2f 90       	pop	r2
    3ee4:	08 95       	ret

00003ee6 <MEM_GetBlock>:

*/
MEMBLOCK *
MEM_GetBlock()
{
    3ee6:	e0 91 19 0b 	lds	r30, 0x0B19
    3eea:	f0 91 1a 0b 	lds	r31, 0x0B1A
MEMBLOCK	*ret;

	// Check free list
	ret=free_list;
	//DEBUG1(CRLF"ret=");
	//printShort(ret);
	//DEBUG1(CRLF);
	if(0!=ret)
    3eee:	30 97       	sbiw	r30, 0x00	; 0
    3ef0:	59 f0       	breq	.+22     	; 0x3f08 <MEM_GetBlock+0x22>
	{
		free_list=free_list->next;
    3ef2:	82 81       	ldd	r24, Z+2	; 0x02
    3ef4:	93 81       	ldd	r25, Z+3	; 0x03
    3ef6:	90 93 1a 0b 	sts	0x0B1A, r25
    3efa:	80 93 19 0b 	sts	0x0B19, r24
		used_count++;
    3efe:	80 91 e1 02 	lds	r24, 0x02E1
    3f02:	8f 5f       	subi	r24, 0xFF	; 255
    3f04:	80 93 e1 02 	sts	0x02E1, r24
		
		if(used_count>0)
		{
#if 0
			DEBUG1("GUsed Count ");
			printByte(used_count);
			DEBUG1("blk -");
			printWord(ret);
			DEBUG1(CRLF);
			if(ret->sig!=MEMSIG)
				DEBUG1("ALLOC CORRUPT BLOCK"CRLF);
#endif	
		}
	}
	// return
	return(ret);
}
    3f08:	cf 01       	movw	r24, r30
    3f0a:	08 95       	ret

00003f0c <MEM_FreeBlock>:

/*! \fn void MEM_FreeBlock(MEMBLOCK *block)
    \brief Put a block back on the free list

    \param block pointer to memory block to free

*/
void
MEM_FreeBlock(MEMBLOCK *block)
{
    3f0c:	fc 01       	movw	r30, r24
	//
	// Verify block is ok
	//
	//	DEBUG1("free --");
	//	printWord(block);
	//	DEBUG1("attach -");
	//	printWord(free_list);
	//	DEBUG1(CRLF);

	if( ( block<memory) || (block > memory+(NUM_MEM_BLOCKS*sizeof(MEMBLOCK))) )
    3f0e:	89 5f       	subi	r24, 0xF9	; 249
    3f10:	97 40       	sbci	r25, 0x07	; 7
    3f12:	d8 f0       	brcs	.+54     	; 0x3f4a <MEM_FreeBlock+0x3e>
    3f14:	88 e7       	ldi	r24, 0x78	; 120
    3f16:	e9 3f       	cpi	r30, 0xF9	; 249
    3f18:	f8 07       	cpc	r31, r24
    3f1a:	09 f0       	breq	.+2      	; 0x3f1e <MEM_FreeBlock+0x12>
    3f1c:	b0 f4       	brcc	.+44     	; 0x3f4a <MEM_FreeBlock+0x3e>
	{
		DEBUG1("BADFREEBLOCK"CRLF);
		return;
	}

	if(block->sig!=MEMSIG)
    3f1e:	80 81       	ld	r24, Z
    3f20:	91 81       	ldd	r25, Z+1	; 0x01
    3f22:	8f 5e       	subi	r24, 0xEF	; 239
    3f24:	9e 4b       	sbci	r25, 0xBE	; 190
    3f26:	89 f4       	brne	.+34     	; 0x3f4a <MEM_FreeBlock+0x3e>
	{
		DEBUG1("CORRUPT BLOCK"CRLF);
		return;
	}

  //
	// Add back onto the head of the free list
	//
	if(used_count)
    3f28:	20 91 e1 02 	lds	r18, 0x02E1
    3f2c:	22 23       	and	r18, r18
    3f2e:	69 f0       	breq	.+26     	; 0x3f4a <MEM_FreeBlock+0x3e>
	{
		block->next=free_list;
    3f30:	80 91 19 0b 	lds	r24, 0x0B19
    3f34:	90 91 1a 0b 	lds	r25, 0x0B1A
    3f38:	93 83       	std	Z+3, r25	; 0x03
    3f3a:	82 83       	std	Z+2, r24	; 0x02
		free_list=block;
    3f3c:	f0 93 1a 0b 	sts	0x0B1A, r31
    3f40:	e0 93 19 0b 	sts	0x0B19, r30
		used_count--;
    3f44:	21 50       	subi	r18, 0x01	; 1
    3f46:	20 93 e1 02 	sts	0x02E1, r18
    3f4a:	08 95       	ret

00003f4c <MEM_init>:
    3f4c:	e9 ef       	ldi	r30, 0xF9	; 249
    3f4e:	f7 e0       	ldi	r31, 0x07	; 7
    3f50:	2f ee       	ldi	r18, 0xEF	; 239
    3f52:	3e eb       	ldi	r19, 0xBE	; 190
    3f54:	af 01       	movw	r20, r30
    3f56:	6e eb       	ldi	r22, 0xBE	; 190
    3f58:	df 01       	movw	r26, r30
    3f5a:	1a 96       	adiw	r26, 0x0a	; 10
    3f5c:	cf 01       	movw	r24, r30
    3f5e:	88 53       	subi	r24, 0x38	; 56
    3f60:	9f 4f       	sbci	r25, 0xFF	; 255
    3f62:	93 83       	std	Z+3, r25	; 0x03
    3f64:	82 83       	std	Z+2, r24	; 0x02
    3f66:	31 83       	std	Z+1, r19	; 0x01
    3f68:	20 83       	st	Z, r18
    3f6a:	fd 01       	movw	r30, r26
    3f6c:	76 2f       	mov	r23, r22
    3f6e:	11 92       	st	Z+, r1
    3f70:	7a 95       	dec	r23
    3f72:	e9 f7       	brne	.-6      	; 0x3f6e <MEM_init+0x22>
    3f74:	a8 53       	subi	r26, 0x38	; 56
    3f76:	bf 4f       	sbci	r27, 0xFF	; 255
    3f78:	fc 01       	movw	r30, r24
    3f7a:	8b e0       	ldi	r24, 0x0B	; 11
    3f7c:	a3 32       	cpi	r26, 0x23	; 35
    3f7e:	b8 07       	cpc	r27, r24
    3f80:	69 f7       	brne	.-38     	; 0x3f5c <MEM_init+0x10>
    3f82:	10 92 54 0a 	sts	0x0A54, r1
    3f86:	10 92 53 0a 	sts	0x0A53, r1
    3f8a:	30 93 52 0a 	sts	0x0A52, r19
    3f8e:	20 93 51 0a 	sts	0x0A51, r18
    3f92:	50 93 1a 0b 	sts	0x0B1A, r21
    3f96:	40 93 19 0b 	sts	0x0B19, r20
    3f9a:	10 92 e1 02 	sts	0x02E1, r1
    3f9e:	08 95       	ret

00003fa0 <displayMessage>:
// Display the result message, either string or numeric result.
//
void
displayMessage(U8 msg)
{
    3fa0:	8e 3f       	cpi	r24, 0xFE	; 254
    3fa2:	09 f4       	brne	.+2      	; 0x3fa6 <displayMessage+0x6>
    3fa4:	62 c0       	rjmp	.+196    	; 0x406a <displayMessage+0xca>
	if(msg==MSG_NULL)
		return;

	//
	// Do nothing if result is turned off.
	//
	if(RESULT_OFF & mm.IMMConfig)
    3fa6:	90 91 75 03 	lds	r25, 0x0375
    3faa:	97 fd       	sbrc	r25, 7
    3fac:	5e c0       	rjmp	.+188    	; 0x406a <displayMessage+0xca>
		return;
	// sysdata
	//if(msg!=MSG_EMPTY)
	//	CONSOLE_puts(CRLF);
	//
	// Result if on, send numeric or text.
	//
	if(RESULT & mm.IMMConfig)
    3fae:	92 ff       	sbrs	r25, 2
    3fb0:	4a c0       	rjmp	.+148    	; 0x4046 <displayMessage+0xa6>
	{   
#ifdef DEBUG_LV3
		DEBUG3("msg ");
		printShort(msg);
		DEBUG3(CRLF);
#endif
		//
		// Return result string
		//
	    switch(msg)
    3fb2:	84 38       	cpi	r24, 0x84	; 132
    3fb4:	81 f1       	breq	.+96     	; 0x4016 <displayMessage+0x76>
    3fb6:	85 38       	cpi	r24, 0x85	; 133
    3fb8:	80 f4       	brcc	.+32     	; 0x3fda <displayMessage+0x3a>
    3fba:	84 30       	cpi	r24, 0x04	; 4
    3fbc:	31 f1       	breq	.+76     	; 0x400a <displayMessage+0x6a>
    3fbe:	85 30       	cpi	r24, 0x05	; 5
    3fc0:	30 f4       	brcc	.+12     	; 0x3fce <displayMessage+0x2e>
    3fc2:	88 23       	and	r24, r24
    3fc4:	d1 f0       	breq	.+52     	; 0x3ffa <displayMessage+0x5a>
    3fc6:	81 30       	cpi	r24, 0x01	; 1
    3fc8:	09 f0       	breq	.+2      	; 0x3fcc <displayMessage+0x2c>
    3fca:	4b c0       	rjmp	.+150    	; 0x4062 <displayMessage+0xc2>
    3fcc:	19 c0       	rjmp	.+50     	; 0x4000 <displayMessage+0x60>
    3fce:	86 30       	cpi	r24, 0x06	; 6
    3fd0:	71 f1       	breq	.+92     	; 0x402e <displayMessage+0x8e>
    3fd2:	83 38       	cpi	r24, 0x83	; 131
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <displayMessage+0x38>
    3fd6:	45 c0       	rjmp	.+138    	; 0x4062 <displayMessage+0xc2>
    3fd8:	1b c0       	rjmp	.+54     	; 0x4010 <displayMessage+0x70>
    3fda:	8c 38       	cpi	r24, 0x8C	; 140
    3fdc:	f9 f0       	breq	.+62     	; 0x401c <displayMessage+0x7c>
    3fde:	8d 38       	cpi	r24, 0x8D	; 141
    3fe0:	28 f4       	brcc	.+10     	; 0x3fec <displayMessage+0x4c>
    3fe2:	85 38       	cpi	r24, 0x85	; 133
    3fe4:	39 f1       	breq	.+78     	; 0x4034 <displayMessage+0x94>
    3fe6:	86 38       	cpi	r24, 0x86	; 134
    3fe8:	e1 f5       	brne	.+120    	; 0x4062 <displayMessage+0xc2>
    3fea:	27 c0       	rjmp	.+78     	; 0x403a <displayMessage+0x9a>
    3fec:	86 39       	cpi	r24, 0x96	; 150
    3fee:	e1 f0       	breq	.+56     	; 0x4028 <displayMessage+0x88>
    3ff0:	88 3c       	cpi	r24, 0xC8	; 200
    3ff2:	31 f1       	breq	.+76     	; 0x4040 <displayMessage+0xa0>
    3ff4:	8d 38       	cpi	r24, 0x8D	; 141
    3ff6:	a9 f5       	brne	.+106    	; 0x4062 <displayMessage+0xc2>
    3ff8:	14 c0       	rjmp	.+40     	; 0x4022 <displayMessage+0x82>
    	{
    	case MSG_OK:   
			CONSOLE_cputs(strOK);
    3ffa:	8c e9       	ldi	r24, 0x9C	; 156
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	02 c0       	rjmp	.+4      	; 0x4004 <displayMessage+0x64>
    		break;             
	    case MSG_CONNECT:   
    		CONSOLE_cputs(strCONNECT);
    4000:	8f e9       	ldi	r24, 0x9F	; 159
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CONSOLE_cputs>
    4008:	2c c0       	rjmp	.+88     	; 0x4062 <displayMessage+0xc2>
    		break;	
	    case MSG_ERROR:          
			CONSOLE_cputs(strERROR);    
    400a:	87 ea       	ldi	r24, 0xA7	; 167
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	fa cf       	rjmp	.-12     	; 0x4004 <displayMessage+0x64>
    		break;
	    case MSG_LINKDOWN:          
			CONSOLE_cputs(strLINKDown);    
    4010:	8d ea       	ldi	r24, 0xAD	; 173
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	f7 cf       	rjmp	.-18     	; 0x4004 <displayMessage+0x64>
    		break;
	    case MSG_DHCPFAIL:          
			CONSOLE_cputs(strDHCPFail);    
    4016:	87 eb       	ldi	r24, 0xB7	; 183
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	f4 cf       	rjmp	.-24     	; 0x4004 <displayMessage+0x64>
    		break;

#ifdef PPP
		case MSG_NOCARRIER:
			CONSOLE_cputs(strNoCarrier);
			break;    		  
		case MSG_PPPFAIL:				// was 80  
			CONSOLE_cputs(strPPPFail);
			break;    	
		case MSG_PPPAUTHFAIL:			// was 80  
			CONSOLE_cputs(strPPPAUTHFail);
			break; 			
		case MSG_PPPDOWN:				// was 81  
			CONSOLE_cputs(strPPPDown);
			break;	  
#endif
		case MSG_TCPFAIL:				// was 82  
			CONSOLE_cputs(strTCPFail);
    401c:	81 ec       	ldi	r24, 0xC1	; 193
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	f1 cf       	rjmp	.-30     	; 0x4004 <displayMessage+0x64>
			break;	
		case MSG_SOCDOWN:				// was 84
			CONSOLE_cputs(strSOCDown);
    4022:	8a ec       	ldi	r24, 0xCA	; 202
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	ee cf       	rjmp	.-36     	; 0x4004 <displayMessage+0x64>
    		break;	
    	case MSG_DNSFAIL:				// was 87
    		CONSOLE_cputs(strDNSFail);
    4028:	88 ed       	ldi	r24, 0xD8	; 216
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	eb cf       	rjmp	.-42     	; 0x4004 <displayMessage+0x64>
    		break;              
		case MSG_FAIL:                       //88
			CONSOLE_cputs(strFAIL);    
    402e:	81 ee       	ldi	r24, 0xE1	; 225
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	e8 cf       	rjmp	.-48     	; 0x4004 <displayMessage+0x64>
			break;
		case MSG_NODATA:				// was 125
			CONSOLE_cputs(strNoData);		
    4034:	86 ee       	ldi	r24, 0xE6	; 230
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	e5 cf       	rjmp	.-54     	; 0x4004 <displayMessage+0x64>
			break;		
		case MSG_EEERROR:
			CONSOLE_cputs(strEERROR);
    403a:	8e ee       	ldi	r24, 0xEE	; 238
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	e2 cf       	rjmp	.-60     	; 0x4004 <displayMessage+0x64>
			break;
		case MSG_VERSION:
			CONSOLE_cputs(strVersion);
    4040:	86 e0       	ldi	r24, 0x06	; 6
    4042:	91 e0       	ldi	r25, 0x01	; 1
    4044:	df cf       	rjmp	.-66     	; 0x4004 <displayMessage+0x64>
			break;
		case MSG_EMPTY:
	    default:
    		break;
		}
	}
	else
	{
		//
		// Return Numeric String
		//
		if(msg!=MSG_EMPTY)
    4046:	8d 3f       	cpi	r24, 0xFD	; 253
    4048:	61 f0       	breq	.+24     	; 0x4062 <displayMessage+0xc2>
		{
			b2d(msg, smbuff);
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	44 e6       	ldi	r20, 0x64	; 100
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	67 e1       	ldi	r22, 0x17	; 23
    4052:	73 e0       	ldi	r23, 0x03	; 3
    4054:	99 27       	eor	r25, r25
    4056:	0e 94 54 06 	call	0xca8	; 0xca8 <_2d>
			CONSOLE_puts(smbuff);
    405a:	87 e1       	ldi	r24, 0x17	; 23
    405c:	93 e0       	ldi	r25, 0x03	; 3
    405e:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
		}
	}	
	
	//CONSOLE_putch(0x0d);
	//CONSOLE_putch(0x0a);
	CONSOLE_puts(CRLF);
    4062:	87 ea       	ldi	r24, 0xA7	; 167
    4064:	92 e0       	ldi	r25, 0x02	; 2
    4066:	0e 94 8f 08 	call	0x111e	; 0x111e <CONSOLE_puts>
    406a:	08 95       	ret

0000406c <sRegister>:
//      7					Modes
//
U8
sRegister(U8 *ptr)
{
    406c:	cf 92       	push	r12
    406e:	df 92       	push	r13
    4070:	ef 92       	push	r14
    4072:	ff 92       	push	r15
    4074:	0f 93       	push	r16
    4076:	1f 93       	push	r17
    4078:	cf 93       	push	r28
    407a:	df 93       	push	r29
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    4080:	28 97       	sbiw	r28, 0x08	; 8
    4082:	0f b6       	in	r0, 0x3f	; 63
    4084:	f8 94       	cli
    4086:	de bf       	out	0x3e, r29	; 62
    4088:	0f be       	out	0x3f, r0	; 63
    408a:	cd bf       	out	0x3d, r28	; 61
    408c:	fc 01       	movw	r30, r24
U8		msg=0xff; 
U8		soc=1,s=1;
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	8a 83       	std	Y+2, r24	; 0x02
    4092:	89 83       	std	Y+1, r24	; 0x01
U16		t=0;
    4094:	1c 82       	std	Y+4, r1	; 0x04
    4096:	1b 82       	std	Y+3, r1	; 0x03
    4098:	01 c0       	rjmp	.+2      	; 0x409c <sRegister+0x30>
U8		*tptr=(U8 *)&mm;
//U16     t;
IPAddr 	ip;
	//
	// Dump Spaces
	//
	while(*ptr==' ')
			ptr++ ;
    409a:	31 96       	adiw	r30, 0x01	; 1
    409c:	80 81       	ld	r24, Z
    409e:	80 32       	cpi	r24, 0x20	; 32
    40a0:	e1 f3       	breq	.-8      	; 0x409a <sRegister+0x2e>
	//
	// Decode 
	//
	ptr=Get_Byte(ptr,&s);
    40a2:	be 01       	movw	r22, r28
    40a4:	6f 5f       	subi	r22, 0xFF	; 255
    40a6:	7f 4f       	sbci	r23, 0xFF	; 255
    40a8:	cf 01       	movw	r24, r30
    40aa:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
    40ae:	fc 01       	movw	r30, r24
    40b0:	01 c0       	rjmp	.+2      	; 0x40b4 <sRegister+0x48>

#ifdef DEBUG_LV4	
	DEBUG2("sreg=");
	printShort(s);
	DEBUG2(CRLF);
#endif
	//
	// Dump Spaces
	//
	while(*ptr==' ')
			ptr++ ;	
    40b2:	f7 01       	movw	r30, r14
    40b4:	81 91       	ld	r24, Z+
    40b6:	7f 01       	movw	r14, r30
    40b8:	80 32       	cpi	r24, 0x20	; 32
    40ba:	d9 f3       	breq	.-10     	; 0x40b2 <sRegister+0x46>

	if('='==*ptr++)
    40bc:	8d 33       	cpi	r24, 0x3D	; 61
    40be:	21 f4       	brne	.+8      	; 0x40c8 <sRegister+0x5c>
		t=1;
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	9c 83       	std	Y+4, r25	; 0x04
    40c6:	8b 83       	std	Y+3, r24	; 0x03
	//
	// Operate on sreg
	//
	switch(s)
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	87 30       	cpi	r24, 0x07	; 7
    40cc:	09 f4       	brne	.+2      	; 0x40d0 <sRegister+0x64>
    40ce:	c0 c0       	rjmp	.+384    	; 0x4250 <sRegister+0x1e4>
    40d0:	88 30       	cpi	r24, 0x08	; 8
    40d2:	80 f4       	brcc	.+32     	; 0x40f4 <sRegister+0x88>
    40d4:	83 30       	cpi	r24, 0x03	; 3
    40d6:	21 f1       	breq	.+72     	; 0x4120 <sRegister+0xb4>
    40d8:	84 30       	cpi	r24, 0x04	; 4
    40da:	28 f4       	brcc	.+10     	; 0x40e6 <sRegister+0x7a>
    40dc:	81 30       	cpi	r24, 0x01	; 1
    40de:	11 f1       	breq	.+68     	; 0x4124 <sRegister+0xb8>
    40e0:	82 30       	cpi	r24, 0x02	; 2
    40e2:	80 f5       	brcc	.+96     	; 0x4144 <sRegister+0xd8>
    40e4:	21 c0       	rjmp	.+66     	; 0x4128 <sRegister+0xbc>
    40e6:	85 30       	cpi	r24, 0x05	; 5
    40e8:	09 f4       	brne	.+2      	; 0x40ec <sRegister+0x80>
    40ea:	5e c0       	rjmp	.+188    	; 0x41a8 <sRegister+0x13c>
    40ec:	86 30       	cpi	r24, 0x06	; 6
    40ee:	08 f0       	brcs	.+2      	; 0x40f2 <sRegister+0x86>
    40f0:	93 c0       	rjmp	.+294    	; 0x4218 <sRegister+0x1ac>
    40f2:	50 c0       	rjmp	.+160    	; 0x4194 <sRegister+0x128>
    40f4:	8b 30       	cpi	r24, 0x0B	; 11
    40f6:	09 f4       	brne	.+2      	; 0x40fa <sRegister+0x8e>
    40f8:	1d c1       	rjmp	.+570    	; 0x4334 <sRegister+0x2c8>
    40fa:	8c 30       	cpi	r24, 0x0C	; 12
    40fc:	38 f4       	brcc	.+14     	; 0x410c <sRegister+0xa0>
    40fe:	89 30       	cpi	r24, 0x09	; 9
    4100:	09 f4       	brne	.+2      	; 0x4104 <sRegister+0x98>
    4102:	de c0       	rjmp	.+444    	; 0x42c0 <sRegister+0x254>
    4104:	8a 30       	cpi	r24, 0x0A	; 10
    4106:	08 f0       	brcs	.+2      	; 0x410a <sRegister+0x9e>
    4108:	f7 c0       	rjmp	.+494    	; 0x42f8 <sRegister+0x28c>
    410a:	be c0       	rjmp	.+380    	; 0x4288 <sRegister+0x21c>
    410c:	8d 30       	cpi	r24, 0x0D	; 13
    410e:	09 f4       	brne	.+2      	; 0x4112 <sRegister+0xa6>
    4110:	39 c1       	rjmp	.+626    	; 0x4384 <sRegister+0x318>
    4112:	8d 30       	cpi	r24, 0x0D	; 13
    4114:	08 f4       	brcc	.+2      	; 0x4118 <sRegister+0xac>
    4116:	25 c1       	rjmp	.+586    	; 0x4362 <sRegister+0x2f6>
    4118:	8e 30       	cpi	r24, 0x0E	; 14
    411a:	09 f0       	breq	.+2      	; 0x411e <sRegister+0xb2>
    411c:	51 c1       	rjmp	.+674    	; 0x43c0 <sRegister+0x354>
    411e:	45 c1       	rjmp	.+650    	; 0x43aa <sRegister+0x33e>
    4120:	88 ec       	ldi	r24, 0xC8	; 200
    4122:	6b c1       	rjmp	.+726    	; 0x43fa <sRegister+0x38e>
	{
		case 1:
			// Return socket 1 status      
			soc=2;
    4124:	82 e0       	ldi	r24, 0x02	; 2
    4126:	8a 83       	std	Y+2, r24	; 0x02
		case 0:
			// Return socket 0 status   
			//
			// See if this socket is up,  Returns socket state and source port
			//		
			t=tcp_status(soc);
    4128:	8a 81       	ldd	r24, Y+2	; 0x02
    412a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <tcp_status>
    412e:	9c 83       	std	Y+4, r25	; 0x04
    4130:	8b 83       	std	Y+3, r24	; 0x03
			printByte((U8)t);
    4132:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
			CONSOLE_putch(' ');
    4136:	80 e2       	ldi	r24, 0x20	; 32
    4138:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
			t=tcp_sport(soc);
    413c:	8a 81       	ldd	r24, Y+2	; 0x02
    413e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <tcp_sport>
    4142:	2d c0       	rjmp	.+90     	; 0x419e <sRegister+0x132>
			printWord(t);
			break;	
		case 2:
			//
			// Return UDP status,   Returns Len of data ready, peer ip, peer source port
			//
			if(0==udp_ptr)
    4144:	80 91 d4 06 	lds	r24, 0x06D4
    4148:	90 91 d5 06 	lds	r25, 0x06D5
    414c:	89 2b       	or	r24, r25
    414e:	19 f4       	brne	.+6      	; 0x4156 <sRegister+0xea>
				printShort(0);
    4150:	80 e0       	ldi	r24, 0x00	; 0
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	02 c0       	rjmp	.+4      	; 0x415a <sRegister+0xee>
			else
				printShort(1);
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	90 e0       	ldi	r25, 0x00	; 0
    415a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <printShort>
			CONSOLE_putch(' ');
    415e:	80 e2       	ldi	r24, 0x20	; 32
    4160:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
			printShort(udp_len);
    4164:	80 91 cb 06 	lds	r24, 0x06CB
    4168:	90 91 cc 06 	lds	r25, 0x06CC
    416c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <printShort>
			CONSOLE_putch(' ');
    4170:	80 e2       	ldi	r24, 0x20	; 32
    4172:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
			printIP(&udp_ip);
    4176:	8e ec       	ldi	r24, 0xCE	; 206
    4178:	96 e0       	ldi	r25, 0x06	; 6
    417a:	0e 94 f6 06 	call	0xdec	; 0xdec <printIP>
			CONSOLE_putch(' ');
    417e:	80 e2       	ldi	r24, 0x20	; 32
    4180:	0e 94 52 08 	call	0x10a4	; 0x10a4 <CONSOLE_putch>
			printShort(udp_sp);
    4184:	80 91 d2 06 	lds	r24, 0x06D2
    4188:	90 91 d3 06 	lds	r25, 0x06D3
    418c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <printShort>
    4190:	8f ef       	ldi	r24, 0xFF	; 255
    4192:	33 c1       	rjmp	.+614    	; 0x43fa <sRegister+0x38e>
			break;
		case 3:
			//
			// Print SW version
			//
			msg=MSG_VERSION;
			break;
		case 4:
			//
			// Print boot loader Version
			//
#ifdef __AVR__	
#ifndef DEMO
			t=boot_version();
    4194:	e0 91 14 02 	lds	r30, 0x0214
    4198:	f0 91 15 02 	lds	r31, 0x0215
    419c:	09 95       	icall
    419e:	9c 83       	std	Y+4, r25	; 0x04
    41a0:	8b 83       	std	Y+3, r24	; 0x03
#else
			t=1;
#endif
#else
			t=1;
#endif
			printWord(t);
    41a2:	0e 94 3b 07 	call	0xe76	; 0xe76 <printWord>
    41a6:	f4 cf       	rjmp	.-24     	; 0x4190 <sRegister+0x124>
			//msg=MSG_NULL;
			break;
		case 5:
			//
			// Our MAC address
			//                    
			// Check Read or Write
			//                    
			if(1==t)
    41a8:	cb 80       	ldd	r12, Y+3	; 0x03
    41aa:	dc 80       	ldd	r13, Y+4	; 0x04
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	c8 16       	cp	r12, r24
    41b0:	d1 04       	cpc	r13, r1
    41b2:	69 f5       	brne	.+90     	; 0x420e <sRegister+0x1a2>
			{
				// Convert the MAC address    
				// Dump first 3 bytes that are non setable
				ptr=Get_Byte(ptr,&soc);	
    41b4:	8e 01       	movw	r16, r28
    41b6:	0e 5f       	subi	r16, 0xFE	; 254
    41b8:	1f 4f       	sbci	r17, 0xFF	; 255
    41ba:	b8 01       	movw	r22, r16
    41bc:	c7 01       	movw	r24, r14
    41be:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
				ptr=Get_Byte(ptr,&soc);	
    41c2:	b8 01       	movw	r22, r16
    41c4:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
				ptr=Get_Byte(ptr,&soc);
    41c8:	b8 01       	movw	r22, r16
    41ca:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
				ptr=Get_Byte(ptr,&mm.our_mac_addr[3]);	
    41ce:	67 e8       	ldi	r22, 0x87	; 135
    41d0:	73 e0       	ldi	r23, 0x03	; 3
    41d2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
				ptr=Get_Byte(ptr,&mm.our_mac_addr[4]);	
    41d6:	68 e8       	ldi	r22, 0x88	; 136
    41d8:	73 e0       	ldi	r23, 0x03	; 3
    41da:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
				ptr=Get_Byte(ptr,&mm.our_mac_addr[5]);
    41de:	69 e8       	ldi	r22, 0x89	; 137
    41e0:	73 e0       	ldi	r23, 0x03	; 3
    41e2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
#ifdef __AVR__				
				eeprom_write_byte(1,mm.our_mac_addr[3]);
    41e6:	80 91 87 03 	lds	r24, 0x0387

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    41ea:	d6 01       	movw	r26, r12
    41ec:	08 2e       	mov	r0, r24
    41ee:	0e 94 bd 24 	call	0x497a	; 0x497a <__eeprom_write_byte_1C1D1E>
				eeprom_write_byte(2,mm.our_mac_addr[4]);
    41f2:	80 91 88 03 	lds	r24, 0x0388

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    41f6:	a2 e0       	ldi	r26, 0x02	; 2
    41f8:	b0 e0       	ldi	r27, 0x00	; 0
    41fa:	08 2e       	mov	r0, r24
    41fc:	0e 94 bd 24 	call	0x497a	; 0x497a <__eeprom_write_byte_1C1D1E>
				eeprom_write_byte(3,mm.our_mac_addr[5]);
    4200:	80 91 89 03 	lds	r24, 0x0389

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    4204:	a3 e0       	ldi	r26, 0x03	; 3
    4206:	b0 e0       	ldi	r27, 0x00	; 0
    4208:	08 2e       	mov	r0, r24
    420a:	0e 94 bd 24 	call	0x497a	; 0x497a <__eeprom_write_byte_1C1D1E>
#endif			
			}	
			//nicGetMacAddress(&macaddr1);
			printMAC(mm.our_mac_addr);
    420e:	84 e8       	ldi	r24, 0x84	; 132
    4210:	93 e0       	ldi	r25, 0x03	; 3
    4212:	0e 94 55 07 	call	0xeaa	; 0xeaa <printMAC>
    4216:	bc cf       	rjmp	.-136    	; 0x4190 <sRegister+0x124>
			break;
		case 6:
			//
			// Our IP address
			//                    
			// Check Read or Write
			//                    
			if(1==t)
    4218:	8b 81       	ldd	r24, Y+3	; 0x03
    421a:	9c 81       	ldd	r25, Y+4	; 0x04
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	a9 f4       	brne	.+42     	; 0x424a <sRegister+0x1de>
			{
				// Convert the IP address    
				if(ptr!=(U8 *)s2ip(ptr, &ip ))
    4220:	be 01       	movw	r22, r28
    4222:	6b 5f       	subi	r22, 0xFB	; 251
    4224:	7f 4f       	sbci	r23, 0xFF	; 255
    4226:	c7 01       	movw	r24, r14
    4228:	0e 94 a6 05 	call	0xb4c	; 0xb4c <s2ip>
    422c:	e8 16       	cp	r14, r24
    422e:	f9 06       	cpc	r15, r25
    4230:	61 f0       	breq	.+24     	; 0x424a <sRegister+0x1de>
				{         
					mm.our_ipaddr.ipb1=ip.ipb1;
    4232:	8d 81       	ldd	r24, Y+5	; 0x05
    4234:	80 93 8a 03 	sts	0x038A, r24
					mm.our_ipaddr.ipb2=ip.ipb2;
    4238:	8e 81       	ldd	r24, Y+6	; 0x06
    423a:	80 93 8b 03 	sts	0x038B, r24
					mm.our_ipaddr.ipb3=ip.ipb3;
    423e:	8f 81       	ldd	r24, Y+7	; 0x07
    4240:	80 93 8c 03 	sts	0x038C, r24
					mm.our_ipaddr.ipb4=ip.ipb4;
    4244:	88 85       	ldd	r24, Y+8	; 0x08
    4246:	80 93 8d 03 	sts	0x038D, r24
				}			
			}
			printIP(&mm.our_ipaddr);
    424a:	8a e8       	ldi	r24, 0x8A	; 138
    424c:	93 e0       	ldi	r25, 0x03	; 3
    424e:	6f c0       	rjmp	.+222    	; 0x432e <sRegister+0x2c2>
			break;
		case 7:
			//
			// Our Netmask 		mm.mm.netmask
			//                    
			// Check Read or Write
			//                    
			if(1==t)
    4250:	8b 81       	ldd	r24, Y+3	; 0x03
    4252:	9c 81       	ldd	r25, Y+4	; 0x04
    4254:	01 97       	sbiw	r24, 0x01	; 1
    4256:	a9 f4       	brne	.+42     	; 0x4282 <sRegister+0x216>
			{
				// Convert the IP address    
				if(ptr!=(U8 *)s2ip(ptr, &ip ))
    4258:	be 01       	movw	r22, r28
    425a:	6b 5f       	subi	r22, 0xFB	; 251
    425c:	7f 4f       	sbci	r23, 0xFF	; 255
    425e:	c7 01       	movw	r24, r14
    4260:	0e 94 a6 05 	call	0xb4c	; 0xb4c <s2ip>
    4264:	e8 16       	cp	r14, r24
    4266:	f9 06       	cpc	r15, r25
    4268:	61 f0       	breq	.+24     	; 0x4282 <sRegister+0x216>
				{         
					mm.netmask.ipb1=ip.ipb1;
    426a:	8d 81       	ldd	r24, Y+5	; 0x05
    426c:	80 93 8e 03 	sts	0x038E, r24
					mm.netmask.ipb2=ip.ipb2;
    4270:	8e 81       	ldd	r24, Y+6	; 0x06
    4272:	80 93 8f 03 	sts	0x038F, r24
					mm.netmask.ipb3=ip.ipb3;
    4276:	8f 81       	ldd	r24, Y+7	; 0x07
    4278:	80 93 90 03 	sts	0x0390, r24
					mm.netmask.ipb4=ip.ipb4;
    427c:	88 85       	ldd	r24, Y+8	; 0x08
    427e:	80 93 91 03 	sts	0x0391, r24
				}			
			}	
			printIP(&mm.netmask);
    4282:	8e e8       	ldi	r24, 0x8E	; 142
    4284:	93 e0       	ldi	r25, 0x03	; 3
    4286:	53 c0       	rjmp	.+166    	; 0x432e <sRegister+0x2c2>
			break;
		case 8:
			//
			// Our Gateway IP 		mm.gatewayip
			//                    
			// Check Read or Write
			//                    
			if(1==t)
    4288:	8b 81       	ldd	r24, Y+3	; 0x03
    428a:	9c 81       	ldd	r25, Y+4	; 0x04
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	a9 f4       	brne	.+42     	; 0x42ba <sRegister+0x24e>
			{
				// Convert the IP address    
				if(ptr!=(U8 *)s2ip(ptr, &ip ))
    4290:	be 01       	movw	r22, r28
    4292:	6b 5f       	subi	r22, 0xFB	; 251
    4294:	7f 4f       	sbci	r23, 0xFF	; 255
    4296:	c7 01       	movw	r24, r14
    4298:	0e 94 a6 05 	call	0xb4c	; 0xb4c <s2ip>
    429c:	e8 16       	cp	r14, r24
    429e:	f9 06       	cpc	r15, r25
    42a0:	61 f0       	breq	.+24     	; 0x42ba <sRegister+0x24e>
				{         
					mm.gatewayip.ipb1=ip.ipb1;
    42a2:	8d 81       	ldd	r24, Y+5	; 0x05
    42a4:	80 93 92 03 	sts	0x0392, r24
					mm.gatewayip.ipb2=ip.ipb2;
    42a8:	8e 81       	ldd	r24, Y+6	; 0x06
    42aa:	80 93 93 03 	sts	0x0393, r24
					mm.gatewayip.ipb3=ip.ipb3;
    42ae:	8f 81       	ldd	r24, Y+7	; 0x07
    42b0:	80 93 94 03 	sts	0x0394, r24
					mm.gatewayip.ipb4=ip.ipb4;
    42b4:	88 85       	ldd	r24, Y+8	; 0x08
    42b6:	80 93 95 03 	sts	0x0395, r24
				}			
			}	
			printIP(&mm.gatewayip);
    42ba:	82 e9       	ldi	r24, 0x92	; 146
    42bc:	93 e0       	ldi	r25, 0x03	; 3
    42be:	37 c0       	rjmp	.+110    	; 0x432e <sRegister+0x2c2>
			break;
		case 9:
			//
			// Primary DNS
			//                    
			// Check Read or Write
			//                    
			if(1==t)
    42c0:	8b 81       	ldd	r24, Y+3	; 0x03
    42c2:	9c 81       	ldd	r25, Y+4	; 0x04
    42c4:	01 97       	sbiw	r24, 0x01	; 1
    42c6:	a9 f4       	brne	.+42     	; 0x42f2 <sRegister+0x286>
			{
				// Convert the IP address    
				if(ptr!=(U8 *)s2ip(ptr, &ip ))
    42c8:	be 01       	movw	r22, r28
    42ca:	6b 5f       	subi	r22, 0xFB	; 251
    42cc:	7f 4f       	sbci	r23, 0xFF	; 255
    42ce:	c7 01       	movw	r24, r14
    42d0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <s2ip>
    42d4:	e8 16       	cp	r14, r24
    42d6:	f9 06       	cpc	r15, r25
    42d8:	61 f0       	breq	.+24     	; 0x42f2 <sRegister+0x286>
				{         
					mm.pri_dns_addr.ipb1=ip.ipb1;
    42da:	8d 81       	ldd	r24, Y+5	; 0x05
    42dc:	80 93 96 03 	sts	0x0396, r24
					mm.pri_dns_addr.ipb2=ip.ipb2;
    42e0:	8e 81       	ldd	r24, Y+6	; 0x06
    42e2:	80 93 97 03 	sts	0x0397, r24
					mm.pri_dns_addr.ipb3=ip.ipb3;
    42e6:	8f 81       	ldd	r24, Y+7	; 0x07
    42e8:	80 93 98 03 	sts	0x0398, r24
					mm.pri_dns_addr.ipb4=ip.ipb4;
    42ec:	88 85       	ldd	r24, Y+8	; 0x08
    42ee:	80 93 99 03 	sts	0x0399, r24
				}			
			}	
			printIP(&mm.pri_dns_addr);
    42f2:	86 e9       	ldi	r24, 0x96	; 150
    42f4:	93 e0       	ldi	r25, 0x03	; 3
    42f6:	1b c0       	rjmp	.+54     	; 0x432e <sRegister+0x2c2>
			break;
		case 0xa:
			//
			// Secondary DNS
			//                    
			// Check Read or Write
			//                    
			if(1==t)
    42f8:	8b 81       	ldd	r24, Y+3	; 0x03
    42fa:	9c 81       	ldd	r25, Y+4	; 0x04
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	a9 f4       	brne	.+42     	; 0x432a <sRegister+0x2be>
			{
				// Convert the IP address    
				if(ptr!=(U8 *)s2ip(ptr, &ip ))
    4300:	be 01       	movw	r22, r28
    4302:	6b 5f       	subi	r22, 0xFB	; 251
    4304:	7f 4f       	sbci	r23, 0xFF	; 255
    4306:	c7 01       	movw	r24, r14
    4308:	0e 94 a6 05 	call	0xb4c	; 0xb4c <s2ip>
    430c:	e8 16       	cp	r14, r24
    430e:	f9 06       	cpc	r15, r25
    4310:	61 f0       	breq	.+24     	; 0x432a <sRegister+0x2be>
				{         
					mm.sec_dns_addr.ipb1=ip.ipb1;
    4312:	8d 81       	ldd	r24, Y+5	; 0x05
    4314:	80 93 9a 03 	sts	0x039A, r24
					mm.sec_dns_addr.ipb2=ip.ipb2;
    4318:	8e 81       	ldd	r24, Y+6	; 0x06
    431a:	80 93 9b 03 	sts	0x039B, r24
					mm.sec_dns_addr.ipb3=ip.ipb3;
    431e:	8f 81       	ldd	r24, Y+7	; 0x07
    4320:	80 93 9c 03 	sts	0x039C, r24
					mm.sec_dns_addr.ipb4=ip.ipb4;
    4324:	88 85       	ldd	r24, Y+8	; 0x08
    4326:	80 93 9d 03 	sts	0x039D, r24
				}			
			}
			printIP(&mm.sec_dns_addr);
    432a:	8a e9       	ldi	r24, 0x9A	; 154
    432c:	93 e0       	ldi	r25, 0x03	; 3
    432e:	0e 94 f6 06 	call	0xdec	; 0xdec <printIP>
    4332:	2e cf       	rjmp	.-420    	; 0x4190 <sRegister+0x124>
			break;
		case 0xb:
			// Console Baud Rate
			if(1==t)
    4334:	8b 81       	ldd	r24, Y+3	; 0x03
    4336:	9c 81       	ldd	r25, Y+4	; 0x04
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	79 f4       	brne	.+30     	; 0x435a <sRegister+0x2ee>
			{
				if(tptr!=(U8 *)s2p(ptr,&t))
    433c:	be 01       	movw	r22, r28
    433e:	6d 5f       	subi	r22, 0xFD	; 253
    4340:	7f 4f       	sbci	r23, 0xFF	; 255
    4342:	c7 01       	movw	r24, r14
    4344:	0e 94 35 06 	call	0xc6a	; 0xc6a <s2p>
    4348:	25 e7       	ldi	r18, 0x75	; 117
    434a:	33 e0       	ldi	r19, 0x03	; 3
    434c:	28 17       	cp	r18, r24
    434e:	39 07       	cpc	r19, r25
    4350:	09 f4       	brne	.+2      	; 0x4354 <sRegister+0x2e8>
    4352:	52 c0       	rjmp	.+164    	; 0x43f8 <sRegister+0x38c>
				{
					//printShort(t);
					//DEBUG1(CRLF);
					mm.ConsoleBaud=(U8)t;
    4354:	8b 81       	ldd	r24, Y+3	; 0x03
    4356:	80 93 7c 03 	sts	0x037C, r24
#ifndef WINDOWS
			//		MODEM_init(t);							/// bug!
#endif
				}
				else
					msg=MSG_ERROR;
			}
			if(msg!=MSG_ERROR)
			{
				printShort(mm.ConsoleBaud);
    435a:	80 91 7c 03 	lds	r24, 0x037C
    435e:	99 27       	eor	r25, r25
    4360:	15 cf       	rjmp	.-470    	; 0x418c <sRegister+0x120>
			}
			break;
#ifdef __AVR__	
		case 0xc:
			// 
			// PortF GPIO Direction Pin
			//
			if(1==t)
    4362:	8b 81       	ldd	r24, Y+3	; 0x03
    4364:	9c 81       	ldd	r25, Y+4	; 0x04
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	49 f4       	brne	.+18     	; 0x437c <sRegister+0x310>
			{
				Get_Byte(ptr,&soc);
    436a:	be 01       	movw	r22, r28
    436c:	6e 5f       	subi	r22, 0xFE	; 254
    436e:	7f 4f       	sbci	r23, 0xFF	; 255
    4370:	c7 01       	movw	r24, r14
    4372:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
				DDRF=soc;				//outp(soc,DDRF);
    4376:	8a 81       	ldd	r24, Y+2	; 0x02
    4378:	80 93 61 00 	sts	0x0061, r24
			}
			soc=DDRF;					//soc=inp(DDRF);
    437c:	80 91 61 00 	lds	r24, 0x0061
    4380:	8a 83       	std	Y+2, r24	; 0x02
    4382:	10 c0       	rjmp	.+32     	; 0x43a4 <sRegister+0x338>
			printByte(soc);
			break;
		case 0xd:
			// 
			// PortF GPIO pin  PINF? +++
			//
			if(1==t)
    4384:	8b 81       	ldd	r24, Y+3	; 0x03
    4386:	9c 81       	ldd	r25, Y+4	; 0x04
    4388:	01 97       	sbiw	r24, 0x01	; 1
    438a:	49 f4       	brne	.+18     	; 0x439e <sRegister+0x332>
			{
				Get_Byte(ptr,&soc);
    438c:	be 01       	movw	r22, r28
    438e:	6e 5f       	subi	r22, 0xFE	; 254
    4390:	7f 4f       	sbci	r23, 0xFF	; 255
    4392:	c7 01       	movw	r24, r14
    4394:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
				PORTF=soc;				//outp(soc,PORTF);
    4398:	8a 81       	ldd	r24, Y+2	; 0x02
    439a:	80 93 62 00 	sts	0x0062, r24
			}
			PORTF=soc;					//soc=inp(PORTF);
    439e:	8a 81       	ldd	r24, Y+2	; 0x02
    43a0:	80 93 62 00 	sts	0x0062, r24
			printByte(soc);
    43a4:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
    43a8:	f3 ce       	rjmp	.-538    	; 0x4190 <sRegister+0x124>
			break;
#endif
		case 0xe:
			//
			// DHCP lease time
			//
			printDWord(DhcpLeaseTime);
    43aa:	60 91 22 0b 	lds	r22, 0x0B22
    43ae:	70 91 23 0b 	lds	r23, 0x0B23
    43b2:	80 91 24 0b 	lds	r24, 0x0B24
    43b6:	90 91 25 0b 	lds	r25, 0x0B25
    43ba:	0e 94 82 07 	call	0xf04	; 0xf04 <printDWord>
    43be:	e8 ce       	rjmp	.-560    	; 0x4190 <sRegister+0x124>
			break;
		default:
			if(s<(sizeof(MEMMAP)+0x20+1) && (s>=0x20))
    43c0:	80 52       	subi	r24, 0x20	; 32
    43c2:	8b 32       	cpi	r24, 0x2B	; 43
    43c4:	c8 f4       	brcc	.+50     	; 0x43f8 <sRegister+0x38c>
			{
				//
				// now see if it is set or display
				//
				if(1==t)
    43c6:	8b 81       	ldd	r24, Y+3	; 0x03
    43c8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	61 f4       	brne	.+24     	; 0x43e6 <sRegister+0x37a>
				{
					// Write to S-Register
					Get_Byte(ptr,&soc);
    43ce:	be 01       	movw	r22, r28
    43d0:	6e 5f       	subi	r22, 0xFE	; 254
    43d2:	7f 4f       	sbci	r23, 0xFF	; 255
    43d4:	c7 01       	movw	r24, r14
    43d6:	0e 94 c6 06 	call	0xd8c	; 0xd8c <Get_Byte>
					tptr[s-0x20]=soc;
    43da:	e9 81       	ldd	r30, Y+1	; 0x01
    43dc:	ff 27       	eor	r31, r31
    43de:	eb 5a       	subi	r30, 0xAB	; 171
    43e0:	fc 4f       	sbci	r31, 0xFC	; 252
    43e2:	8a 81       	ldd	r24, Y+2	; 0x02
    43e4:	80 83       	st	Z, r24
				}
				// Display register value always
				printByte(tptr[s-0x20]);
    43e6:	e9 81       	ldd	r30, Y+1	; 0x01
    43e8:	ff 27       	eor	r31, r31
    43ea:	eb 5a       	subi	r30, 0xAB	; 171
    43ec:	fc 4f       	sbci	r31, 0xFC	; 252
    43ee:	80 81       	ld	r24, Z
    43f0:	0e 94 48 07 	call	0xe90	; 0xe90 <printByte>
    43f4:	8d ef       	ldi	r24, 0xFD	; 253
    43f6:	01 c0       	rjmp	.+2      	; 0x43fa <sRegister+0x38e>
    43f8:	84 e0       	ldi	r24, 0x04	; 4
				msg=MSG_EMPTY;
			}
			else
			{
			//	DEBUG1("SREG is out of range"CRLF);
				msg=MSG_ERROR;
				break; 
			}
	}
	return(msg);
}
    43fa:	99 27       	eor	r25, r25
    43fc:	28 96       	adiw	r28, 0x08	; 8
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	f8 94       	cli
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	0f be       	out	0x3f, r0	; 63
    4406:	cd bf       	out	0x3d, r28	; 61
    4408:	df 91       	pop	r29
    440a:	cf 91       	pop	r28
    440c:	1f 91       	pop	r17
    440e:	0f 91       	pop	r16
    4410:	ff 90       	pop	r15
    4412:	ef 90       	pop	r14
    4414:	df 90       	pop	r13
    4416:	cf 90       	pop	r12
    4418:	08 95       	ret

0000441a <dhcpGetOption>:
//
//
//
U8* dhcpGetOption(U8* options, U8 optcode, U8 optlen, void* optvalptr)
{
    441a:	0f 93       	push	r16
    441c:	1f 93       	push	r17
    441e:	cf 93       	push	r28
    4420:	df 93       	push	r29
    4422:	ec 01       	movw	r28, r24
    4424:	89 01       	movw	r16, r18
	U8 i;

	// parse for desired option
	for (;;)
	{
		// skip pad characters
		if(*options == DHCP_OPT_PAD)
    4426:	58 81       	ld	r21, Y
    4428:	55 23       	and	r21, r21
    442a:	f1 f0       	breq	.+60     	; 0x4468 <dhcpGetOption+0x4e>
			options++;
		// break if end reached
		else if(*options == DHCP_OPT_END)
    442c:	5f 3f       	cpi	r21, 0xFF	; 255
    442e:	f1 f0       	breq	.+60     	; 0x446c <dhcpGetOption+0x52>
    4430:	ce 01       	movw	r24, r28
    4432:	01 96       	adiw	r24, 0x01	; 1
    4434:	79 81       	ldd	r23, Y+1	; 0x01
			break;
		// check for desired option
		else if(*options == optcode)
    4436:	56 17       	cp	r21, r22
    4438:	a1 f4       	brne	.+40     	; 0x4462 <dhcpGetOption+0x48>
		{
			// found desired option
			// limit size to actual option length
			if(optlen> *(options+1))
    443a:	9c 01       	movw	r18, r24
    443c:	57 2f       	mov	r21, r23
    443e:	47 17       	cp	r20, r23
    4440:	08 f4       	brcc	.+2      	; 0x4444 <dhcpGetOption+0x2a>
    4442:	54 2f       	mov	r21, r20
    4444:	40 e0       	ldi	r20, 0x00	; 0
    4446:	0a c0       	rjmp	.+20     	; 0x445c <dhcpGetOption+0x42>
				optlen= *(options+1);
			//if(*(options+1) < optlen)
			//	optlen = *(options+1);
			
			// copy contents of option
			for(i=0; i<optlen; i++)
				*(((U8*)optvalptr)+i) = *(options+i+2);
    4448:	e4 2f       	mov	r30, r20
    444a:	ff 27       	eor	r31, r31
    444c:	d8 01       	movw	r26, r16
    444e:	ae 0f       	add	r26, r30
    4450:	bf 1f       	adc	r27, r31
    4452:	ec 0f       	add	r30, r28
    4454:	fd 1f       	adc	r31, r29
    4456:	82 81       	ldd	r24, Z+2	; 0x02
    4458:	8c 93       	st	X, r24
    445a:	4f 5f       	subi	r20, 0xFF	; 255
    445c:	45 17       	cp	r20, r21
    445e:	a1 f7       	brne	.-24     	; 0x4448 <dhcpGetOption+0x2e>
    4460:	07 c0       	rjmp	.+14     	; 0x4470 <dhcpGetOption+0x56>
			// return length of option
			//return *(options+1); +++
			return (options+1);
		}
		else
		{
			// skip to next option
			options++;
			options+=*options;
    4462:	ec 01       	movw	r28, r24
    4464:	c7 0f       	add	r28, r23
    4466:	d1 1d       	adc	r29, r1
			options++;
    4468:	21 96       	adiw	r28, 0x01	; 1
    446a:	dd cf       	rjmp	.-70     	; 0x4426 <dhcpGetOption+0xc>
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	// failed to find desired option
	return 0;
}
    4470:	c9 01       	movw	r24, r18
    4472:	df 91       	pop	r29
    4474:	cf 91       	pop	r28
    4476:	1f 91       	pop	r17
    4478:	0f 91       	pop	r16
    447a:	08 95       	ret

0000447c <dhcpSetOption>:


//
// Set a DHCP option in the BootP packet
// 
U8* dhcpSetOption(U8* options, U8 optcode, U8 optlen, U8* optvalptr)
{
    447c:	cf 93       	push	r28
    447e:	df 93       	push	r29
    4480:	fc 01       	movw	r30, r24
    4482:	54 2f       	mov	r21, r20
    4484:	e9 01       	movw	r28, r18
	// use current options address as write point

	// set optcode
	*options++ = optcode;
    4486:	dc 01       	movw	r26, r24
    4488:	6d 93       	st	X+, r22
	// set optlen
	*options++ = optlen;
    448a:	41 83       	std	Z+1, r20	; 0x01
    448c:	11 96       	adiw	r26, 0x01	; 1
    448e:	94 2f       	mov	r25, r20
    4490:	02 c0       	rjmp	.+4      	; 0x4496 <dhcpSetOption+0x1a>
	// copy in argument/data
	while(optlen--)
	{
		*options++ = *optvalptr++;
    4492:	89 91       	ld	r24, Y+
    4494:	81 83       	std	Z+1, r24	; 0x01
    4496:	91 50       	subi	r25, 0x01	; 1
    4498:	31 96       	adiw	r30, 0x01	; 1
    449a:	9f 3f       	cpi	r25, 0xFF	; 255
    449c:	d1 f7       	brne	.-12     	; 0x4492 <dhcpSetOption+0x16>
    449e:	fd 01       	movw	r30, r26
    44a0:	e5 0f       	add	r30, r21
    44a2:	f1 1d       	adc	r31, r1
	}
	// write end marker
	*options = DHCP_OPT_END;
    44a4:	90 83       	st	Z, r25

	// return address of end marker, to be used as a future write point
	return options;
}
    44a6:	cf 01       	movw	r24, r30
    44a8:	df 91       	pop	r29
    44aa:	cf 91       	pop	r28
    44ac:	08 95       	ret

000044ae <dhcp_init>:
    44ae:	df 92       	push	r13
    44b0:	ef 92       	push	r14
    44b2:	ff 92       	push	r15
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17
    44b8:	cf 93       	push	r28
    44ba:	df 93       	push	r29
    44bc:	cd b7       	in	r28, 0x3d	; 61
    44be:	de b7       	in	r29, 0x3e	; 62
    44c0:	27 97       	sbiw	r28, 0x07	; 7
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	f8 94       	cli
    44c6:	de bf       	out	0x3e, r29	; 62
    44c8:	0f be       	out	0x3f, r0	; 63
    44ca:	cd bf       	out	0x3d, r28	; 61
    44cc:	ce 01       	movw	r24, r28
    44ce:	02 96       	adiw	r24, 0x02	; 2
    44d0:	0e 94 1c 01 	call	0x238	; 0x238 <nicGetMacAddress>
    44d4:	8a 81       	ldd	r24, Y+2	; 0x02
    44d6:	9b 81       	ldd	r25, Y+3	; 0x03
    44d8:	ac 81       	ldd	r26, Y+4	; 0x04
    44da:	bd 81       	ldd	r27, Y+5	; 0x05
    44dc:	80 93 1b 0b 	sts	0x0B1B, r24
    44e0:	90 93 1c 0b 	sts	0x0B1C, r25
    44e4:	a0 93 1d 0b 	sts	0x0B1D, r26
    44e8:	b0 93 1e 0b 	sts	0x0B1E, r27
    44ec:	10 92 22 0b 	sts	0x0B22, r1
    44f0:	10 92 23 0b 	sts	0x0B23, r1
    44f4:	10 92 24 0b 	sts	0x0B24, r1
    44f8:	10 92 25 0b 	sts	0x0B25, r1
    44fc:	65 e7       	ldi	r22, 0x75	; 117
    44fe:	73 e2       	ldi	r23, 0x23	; 35
    4500:	84 e4       	ldi	r24, 0x44	; 68
    4502:	90 e0       	ldi	r25, 0x00	; 0
    4504:	0e 94 cf 1b 	call	0x379e	; 0x379e <udp_bind>
    4508:	d8 2e       	mov	r13, r24
    450a:	88 23       	and	r24, r24
    450c:	19 f4       	brne	.+6      	; 0x4514 <dhcp_init+0x66>
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	90 c0       	rjmp	.+288    	; 0x4634 <dhcp_init+0x186>
    4514:	0f e9       	ldi	r16, 0x9F	; 159
    4516:	13 e0       	ldi	r17, 0x03	; 3
    4518:	84 ef       	ldi	r24, 0xF4	; 244
    451a:	f8 01       	movw	r30, r16
    451c:	11 92       	st	Z+, r1
    451e:	8a 95       	dec	r24
    4520:	e9 f7       	brne	.-6      	; 0x451c <dhcp_init+0x6e>
    4522:	91 e0       	ldi	r25, 0x01	; 1
    4524:	f9 2e       	mov	r15, r25
    4526:	f0 92 9f 03 	sts	0x039F, r15
    452a:	f0 92 a0 03 	sts	0x03A0, r15
    452e:	86 e0       	ldi	r24, 0x06	; 6
    4530:	80 93 a1 03 	sts	0x03A1, r24
    4534:	10 92 a2 03 	sts	0x03A2, r1
    4538:	10 92 a8 03 	sts	0x03A8, r1
    453c:	10 92 a7 03 	sts	0x03A7, r1
    4540:	10 92 aa 03 	sts	0x03AA, r1
    4544:	10 92 a9 03 	sts	0x03A9, r1
    4548:	10 92 ab 03 	sts	0x03AB, r1
    454c:	10 92 ac 03 	sts	0x03AC, r1
    4550:	10 92 ad 03 	sts	0x03AD, r1
    4554:	10 92 ae 03 	sts	0x03AE, r1
    4558:	10 92 af 03 	sts	0x03AF, r1
    455c:	10 92 b0 03 	sts	0x03B0, r1
    4560:	10 92 b1 03 	sts	0x03B1, r1
    4564:	10 92 b2 03 	sts	0x03B2, r1
    4568:	10 92 b3 03 	sts	0x03B3, r1
    456c:	10 92 b4 03 	sts	0x03B4, r1
    4570:	10 92 b5 03 	sts	0x03B5, r1
    4574:	10 92 b6 03 	sts	0x03B6, r1
    4578:	10 92 b7 03 	sts	0x03B7, r1
    457c:	10 92 b8 03 	sts	0x03B8, r1
    4580:	10 92 b9 03 	sts	0x03B9, r1
    4584:	10 92 ba 03 	sts	0x03BA, r1
    4588:	c8 01       	movw	r24, r16
    458a:	4c 96       	adiw	r24, 0x1c	; 28
    458c:	0e 94 1c 01 	call	0x238	; 0x238 <nicGetMacAddress>
    4590:	80 91 1b 0b 	lds	r24, 0x0B1B
    4594:	90 91 1c 0b 	lds	r25, 0x0B1C
    4598:	a0 91 1d 0b 	lds	r26, 0x0B1D
    459c:	b0 91 1e 0b 	lds	r27, 0x0B1E
    45a0:	80 93 a3 03 	sts	0x03A3, r24
    45a4:	90 93 a4 03 	sts	0x03A4, r25
    45a8:	a0 93 a5 03 	sts	0x03A5, r26
    45ac:	b0 93 a6 03 	sts	0x03A6, r27
    45b0:	83 e6       	ldi	r24, 0x63	; 99
    45b2:	92 e8       	ldi	r25, 0x82	; 130
    45b4:	a3 e5       	ldi	r26, 0x53	; 83
    45b6:	b3 e6       	ldi	r27, 0x63	; 99
    45b8:	80 93 8b 04 	sts	0x048B, r24
    45bc:	90 93 8c 04 	sts	0x048C, r25
    45c0:	a0 93 8d 04 	sts	0x048D, r26
    45c4:	b0 93 8e 04 	sts	0x048E, r27
    45c8:	f9 82       	std	Y+1, r15	; 0x01
    45ca:	9e 01       	movw	r18, r28
    45cc:	2f 5f       	subi	r18, 0xFF	; 255
    45ce:	3f 4f       	sbci	r19, 0xFF	; 255
    45d0:	41 e0       	ldi	r20, 0x01	; 1
    45d2:	65 e3       	ldi	r22, 0x35	; 53
    45d4:	8f e8       	ldi	r24, 0x8F	; 143
    45d6:	94 e0       	ldi	r25, 0x04	; 4
    45d8:	0e 94 3e 22 	call	0x447c	; 0x447c <dhcpSetOption>
    45dc:	84 ef       	ldi	r24, 0xF4	; 244
    45de:	e8 2e       	mov	r14, r24
    45e0:	f1 2c       	mov	r15, r1
    45e2:	24 e4       	ldi	r18, 0x44	; 68
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	43 e4       	ldi	r20, 0x43	; 67
    45e8:	50 e0       	ldi	r21, 0x00	; 0
    45ea:	6f ef       	ldi	r22, 0xFF	; 255
    45ec:	7f ef       	ldi	r23, 0xFF	; 255
    45ee:	8f ef       	ldi	r24, 0xFF	; 255
    45f0:	9f ef       	ldi	r25, 0xFF	; 255
    45f2:	0e 94 86 1c 	call	0x390c	; 0x390c <udp_tx>
    45f6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER_Get_Second>
    45fa:	8c 01       	movw	r16, r24
    45fc:	10 92 1f 0b 	sts	0x0B1F, r1
    4600:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER_Get_Second>
    4604:	80 1b       	sub	r24, r16
    4606:	86 30       	cpi	r24, 0x06	; 6
    4608:	38 f4       	brcc	.+14     	; 0x4618 <dhcp_init+0x16a>
    460a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <poll_serial>
    460e:	80 91 1f 0b 	lds	r24, 0x0B1F
    4612:	83 30       	cpi	r24, 0x03	; 3
    4614:	39 f0       	breq	.+14     	; 0x4624 <dhcp_init+0x176>
    4616:	f4 cf       	rjmp	.-24     	; 0x4600 <dhcp_init+0x152>
    4618:	80 91 1f 0b 	lds	r24, 0x0B1F
    461c:	83 30       	cpi	r24, 0x03	; 3
    461e:	11 f0       	breq	.+4      	; 0x4624 <dhcp_init+0x176>
    4620:	19 ef       	ldi	r17, 0xF9	; 249
    4622:	01 c0       	rjmp	.+2      	; 0x4626 <dhcp_init+0x178>
    4624:	11 e0       	ldi	r17, 0x01	; 1
    4626:	8d 2d       	mov	r24, r13
    4628:	0e 94 03 1c 	call	0x3806	; 0x3806 <udp_close>
    462c:	81 2f       	mov	r24, r17
    462e:	99 27       	eor	r25, r25
    4630:	87 fd       	sbrc	r24, 7
    4632:	90 95       	com	r25
    4634:	27 96       	adiw	r28, 0x07	; 7
    4636:	0f b6       	in	r0, 0x3f	; 63
    4638:	f8 94       	cli
    463a:	de bf       	out	0x3e, r29	; 62
    463c:	0f be       	out	0x3f, r0	; 63
    463e:	cd bf       	out	0x3d, r28	; 61
    4640:	df 91       	pop	r29
    4642:	cf 91       	pop	r28
    4644:	1f 91       	pop	r17
    4646:	0f 91       	pop	r16
    4648:	ff 90       	pop	r15
    464a:	ef 90       	pop	r14
    464c:	df 90       	pop	r13
    464e:	08 95       	ret

00004650 <dhcp_process>:
    4650:	ff 92       	push	r15
    4652:	0f 93       	push	r16
    4654:	1f 93       	push	r17
    4656:	f8 2e       	mov	r15, r24
    4658:	00 91 20 0b 	lds	r16, 0x0B20
    465c:	10 91 21 0b 	lds	r17, 0x0B21
    4660:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER_Get_Second>
    4664:	08 17       	cp	r16, r24
    4666:	19 07       	cpc	r17, r25
    4668:	c1 f1       	breq	.+112    	; 0x46da <dhcp_process+0x8a>
    466a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TIMER_Get_Second>
    466e:	90 93 21 0b 	sts	0x0B21, r25
    4672:	80 93 20 0b 	sts	0x0B20, r24
    4676:	80 91 22 0b 	lds	r24, 0x0B22
    467a:	90 91 23 0b 	lds	r25, 0x0B23
    467e:	a0 91 24 0b 	lds	r26, 0x0B24
    4682:	b0 91 25 0b 	lds	r27, 0x0B25
    4686:	00 97       	sbiw	r24, 0x00	; 0
    4688:	a1 05       	cpc	r26, r1
    468a:	b1 05       	cpc	r27, r1
    468c:	79 f0       	breq	.+30     	; 0x46ac <dhcp_process+0x5c>
    468e:	01 97       	sbiw	r24, 0x01	; 1
    4690:	a1 09       	sbc	r26, r1
    4692:	b1 09       	sbc	r27, r1
    4694:	80 93 22 0b 	sts	0x0B22, r24
    4698:	90 93 23 0b 	sts	0x0B23, r25
    469c:	a0 93 24 0b 	sts	0x0B24, r26
    46a0:	b0 93 25 0b 	sts	0x0B25, r27
    46a4:	00 97       	sbiw	r24, 0x00	; 0
    46a6:	a1 05       	cpc	r26, r1
    46a8:	b1 05       	cpc	r27, r1
    46aa:	b9 f4       	brne	.+46     	; 0x46da <dhcp_process+0x8a>
    46ac:	ff 20       	and	r15, r15
    46ae:	a9 f0       	breq	.+42     	; 0x46da <dhcp_process+0x8a>
    46b0:	0e 94 57 22 	call	0x44ae	; 0x44ae <dhcp_init>
    46b4:	28 2f       	mov	r18, r24
    46b6:	33 27       	eor	r19, r19
    46b8:	27 fd       	sbrc	r18, 7
    46ba:	30 95       	com	r19
    46bc:	88 23       	and	r24, r24
    46be:	79 f4       	brne	.+30     	; 0x46de <dhcp_process+0x8e>
    46c0:	8a e0       	ldi	r24, 0x0A	; 10
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	a0 e0       	ldi	r26, 0x00	; 0
    46c6:	b0 e0       	ldi	r27, 0x00	; 0
    46c8:	80 93 22 0b 	sts	0x0B22, r24
    46cc:	90 93 23 0b 	sts	0x0B23, r25
    46d0:	a0 93 24 0b 	sts	0x0B24, r26
    46d4:	b0 93 25 0b 	sts	0x0B25, r27
    46d8:	02 c0       	rjmp	.+4      	; 0x46de <dhcp_process+0x8e>
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	82 2f       	mov	r24, r18
    46e0:	99 27       	eor	r25, r25
    46e2:	1f 91       	pop	r17
    46e4:	0f 91       	pop	r16
    46e6:	ff 90       	pop	r15
    46e8:	08 95       	ret

000046ea <dhcp_callback>:
    46ea:	8f 92       	push	r8
    46ec:	9f 92       	push	r9
    46ee:	af 92       	push	r10
    46f0:	bf 92       	push	r11
    46f2:	df 92       	push	r13
    46f4:	ef 92       	push	r14
    46f6:	ff 92       	push	r15
    46f8:	0f 93       	push	r16
    46fa:	1f 93       	push	r17
    46fc:	cf 93       	push	r28
    46fe:	df 93       	push	r29
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
    4704:	29 97       	sbiw	r28, 0x09	; 9
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	cd bf       	out	0x3d, r28	; 61
    4710:	e8 e0       	ldi	r30, 0x08	; 8
    4712:	8e 2e       	mov	r8, r30
    4714:	91 2c       	mov	r9, r1
    4716:	86 0e       	add	r8, r22
    4718:	97 1e       	adc	r9, r23
    471a:	fb 01       	movw	r30, r22
    471c:	10 85       	ldd	r17, Z+8	; 0x08
    471e:	12 30       	cpi	r17, 0x02	; 2
    4720:	09 f0       	breq	.+2      	; 0x4724 <dhcp_callback+0x3a>
    4722:	c5 c0       	rjmp	.+394    	; 0x48ae <dhcp_callback+0x1c4>
    4724:	f4 01       	movw	r30, r8
    4726:	24 81       	ldd	r18, Z+4	; 0x04
    4728:	35 81       	ldd	r19, Z+5	; 0x05
    472a:	46 81       	ldd	r20, Z+6	; 0x06
    472c:	57 81       	ldd	r21, Z+7	; 0x07
    472e:	80 91 1b 0b 	lds	r24, 0x0B1B
    4732:	90 91 1c 0b 	lds	r25, 0x0B1C
    4736:	a0 91 1d 0b 	lds	r26, 0x0B1D
    473a:	b0 91 1e 0b 	lds	r27, 0x0B1E
    473e:	28 17       	cp	r18, r24
    4740:	39 07       	cpc	r19, r25
    4742:	4a 07       	cpc	r20, r26
    4744:	5b 07       	cpc	r21, r27
    4746:	09 f0       	breq	.+2      	; 0x474a <dhcp_callback+0x60>
    4748:	b2 c0       	rjmp	.+356    	; 0x48ae <dhcp_callback+0x1c4>
    474a:	58 ef       	ldi	r21, 0xF8	; 248
    474c:	a5 2e       	mov	r10, r21
    474e:	b1 2c       	mov	r11, r1
    4750:	a6 0e       	add	r10, r22
    4752:	b7 1e       	adc	r11, r23
    4754:	9e 01       	movw	r18, r28
    4756:	2f 5f       	subi	r18, 0xFF	; 255
    4758:	3f 4f       	sbci	r19, 0xFF	; 255
    475a:	41 e0       	ldi	r20, 0x01	; 1
    475c:	65 e3       	ldi	r22, 0x35	; 53
    475e:	c5 01       	movw	r24, r10
    4760:	0e 94 0d 22 	call	0x441a	; 0x441a <dhcpGetOption>
    4764:	89 81       	ldd	r24, Y+1	; 0x01
    4766:	82 30       	cpi	r24, 0x02	; 2
    4768:	21 f4       	brne	.+8      	; 0x4772 <dhcp_callback+0x88>
    476a:	81 e0       	ldi	r24, 0x01	; 1
    476c:	80 93 1f 0b 	sts	0x0B1F, r24
    4770:	38 c0       	rjmp	.+112    	; 0x47e2 <dhcp_callback+0xf8>
    4772:	85 30       	cpi	r24, 0x05	; 5
    4774:	09 f0       	breq	.+2      	; 0x4778 <dhcp_callback+0x8e>
    4776:	9b c0       	rjmp	.+310    	; 0x48ae <dhcp_callback+0x1c4>
    4778:	80 91 1f 0b 	lds	r24, 0x0B1F
    477c:	82 30       	cpi	r24, 0x02	; 2
    477e:	21 f4       	brne	.+8      	; 0x4788 <dhcp_callback+0x9e>
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	80 93 1f 0b 	sts	0x0B1F, r24
    4786:	93 c0       	rjmp	.+294    	; 0x48ae <dhcp_callback+0x1c4>
    4788:	10 93 1f 0b 	sts	0x0B1F, r17
    478c:	f4 01       	movw	r30, r8
    478e:	80 89       	ldd	r24, Z+16	; 0x10
    4790:	91 89       	ldd	r25, Z+17	; 0x11
    4792:	a2 89       	ldd	r26, Z+18	; 0x12
    4794:	b3 89       	ldd	r27, Z+19	; 0x13
    4796:	80 93 8a 03 	sts	0x038A, r24
    479a:	90 93 8b 03 	sts	0x038B, r25
    479e:	a0 93 8c 03 	sts	0x038C, r26
    47a2:	b0 93 8d 03 	sts	0x038D, r27
    47a6:	2e e8       	ldi	r18, 0x8E	; 142
    47a8:	33 e0       	ldi	r19, 0x03	; 3
    47aa:	44 e0       	ldi	r20, 0x04	; 4
    47ac:	61 e0       	ldi	r22, 0x01	; 1
    47ae:	c5 01       	movw	r24, r10
    47b0:	0e 94 0d 22 	call	0x441a	; 0x441a <dhcpGetOption>
    47b4:	22 e9       	ldi	r18, 0x92	; 146
    47b6:	33 e0       	ldi	r19, 0x03	; 3
    47b8:	44 e0       	ldi	r20, 0x04	; 4
    47ba:	63 e0       	ldi	r22, 0x03	; 3
    47bc:	c5 01       	movw	r24, r10
    47be:	0e 94 0d 22 	call	0x441a	; 0x441a <dhcpGetOption>
    47c2:	22 e2       	ldi	r18, 0x22	; 34
    47c4:	3b e0       	ldi	r19, 0x0B	; 11
    47c6:	44 e0       	ldi	r20, 0x04	; 4
    47c8:	63 e3       	ldi	r22, 0x33	; 51
    47ca:	c5 01       	movw	r24, r10
    47cc:	0e 94 0d 22 	call	0x441a	; 0x441a <dhcpGetOption>
    47d0:	26 e9       	ldi	r18, 0x96	; 150
    47d2:	33 e0       	ldi	r19, 0x03	; 3
    47d4:	48 e0       	ldi	r20, 0x08	; 8
    47d6:	66 e0       	ldi	r22, 0x06	; 6
    47d8:	c5 01       	movw	r24, r10
    47da:	0e 94 0d 22 	call	0x441a	; 0x441a <dhcpGetOption>
    47de:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <ipConfig>
    47e2:	46 e0       	ldi	r20, 0x06	; 6
    47e4:	e4 2e       	mov	r14, r20
    47e6:	f1 2c       	mov	r15, r1
    47e8:	ec 0e       	add	r14, r28
    47ea:	fd 1e       	adc	r15, r29
    47ec:	97 01       	movw	r18, r14
    47ee:	44 e0       	ldi	r20, 0x04	; 4
    47f0:	66 e3       	ldi	r22, 0x36	; 54
    47f2:	c5 01       	movw	r24, r10
    47f4:	0e 94 0d 22 	call	0x441a	; 0x441a <dhcpGetOption>
    47f8:	31 e0       	ldi	r19, 0x01	; 1
    47fa:	d3 2e       	mov	r13, r19
    47fc:	f4 01       	movw	r30, r8
    47fe:	d0 82       	st	Z, r13
    4800:	83 e0       	ldi	r24, 0x03	; 3
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	a0 e0       	ldi	r26, 0x00	; 0
    4806:	b0 e0       	ldi	r27, 0x00	; 0
    4808:	8a 83       	std	Y+2, r24	; 0x02
    480a:	9b 83       	std	Y+3, r25	; 0x03
    480c:	ac 83       	std	Y+4, r26	; 0x04
    480e:	bd 83       	std	Y+5, r27	; 0x05
    4810:	8e 01       	movw	r16, r28
    4812:	0e 5f       	subi	r16, 0xFE	; 254
    4814:	1f 4f       	sbci	r17, 0xFF	; 255
    4816:	98 01       	movw	r18, r16
    4818:	41 e0       	ldi	r20, 0x01	; 1
    481a:	65 e3       	ldi	r22, 0x35	; 53
    481c:	c5 01       	movw	r24, r10
    481e:	0e 94 3e 22 	call	0x447c	; 0x447c <dhcpSetOption>
    4822:	97 01       	movw	r18, r14
    4824:	44 e0       	ldi	r20, 0x04	; 4
    4826:	66 e3       	ldi	r22, 0x36	; 54
    4828:	0e 94 3e 22 	call	0x447c	; 0x447c <dhcpSetOption>
    482c:	94 01       	movw	r18, r8
    482e:	20 5f       	subi	r18, 0xF0	; 240
    4830:	3f 4f       	sbci	r19, 0xFF	; 255
    4832:	44 e0       	ldi	r20, 0x04	; 4
    4834:	62 e3       	ldi	r22, 0x32	; 50
    4836:	0e 94 3e 22 	call	0x447c	; 0x447c <dhcpSetOption>
    483a:	da 82       	std	Y+2, r13	; 0x02
    483c:	23 e0       	ldi	r18, 0x03	; 3
    483e:	2b 83       	std	Y+3, r18	; 0x03
    4840:	26 e0       	ldi	r18, 0x06	; 6
    4842:	f8 01       	movw	r30, r16
    4844:	22 83       	std	Z+2, r18	; 0x02
    4846:	2f e0       	ldi	r18, 0x0F	; 15
    4848:	2d 83       	std	Y+5, r18	; 0x05
    484a:	98 01       	movw	r18, r16
    484c:	44 e0       	ldi	r20, 0x04	; 4
    484e:	67 e3       	ldi	r22, 0x37	; 55
    4850:	0e 94 3e 22 	call	0x447c	; 0x447c <dhcpSetOption>
    4854:	80 91 1f 0b 	lds	r24, 0x0B1F
    4858:	81 30       	cpi	r24, 0x01	; 1
    485a:	29 f4       	brne	.+10     	; 0x4866 <dhcp_callback+0x17c>
    485c:	8f ef       	ldi	r24, 0xFF	; 255
    485e:	9f ef       	ldi	r25, 0xFF	; 255
    4860:	af ef       	ldi	r26, 0xFF	; 255
    4862:	bf ef       	ldi	r27, 0xFF	; 255
    4864:	04 c0       	rjmp	.+8      	; 0x486e <dhcp_callback+0x184>
    4866:	8e 81       	ldd	r24, Y+6	; 0x06
    4868:	9f 81       	ldd	r25, Y+7	; 0x07
    486a:	a8 85       	ldd	r26, Y+8	; 0x08
    486c:	b9 85       	ldd	r27, Y+9	; 0x09
    486e:	80 93 26 0b 	sts	0x0B26, r24
    4872:	90 93 27 0b 	sts	0x0B27, r25
    4876:	a0 93 28 0b 	sts	0x0B28, r26
    487a:	b0 93 29 0b 	sts	0x0B29, r27
    487e:	f4 01       	movw	r30, r8
    4880:	10 8e       	std	Z+24, r1	; 0x18
    4882:	11 8e       	std	Z+25, r1	; 0x19
    4884:	12 8e       	std	Z+26, r1	; 0x1a
    4886:	13 8e       	std	Z+27, r1	; 0x1b
    4888:	60 91 26 0b 	lds	r22, 0x0B26
    488c:	70 91 27 0b 	lds	r23, 0x0B27
    4890:	80 91 28 0b 	lds	r24, 0x0B28
    4894:	90 91 29 0b 	lds	r25, 0x0B29
    4898:	26 e0       	ldi	r18, 0x06	; 6
    489a:	e2 2e       	mov	r14, r18
    489c:	21 e0       	ldi	r18, 0x01	; 1
    489e:	f2 2e       	mov	r15, r18
    48a0:	84 01       	movw	r16, r8
    48a2:	24 e4       	ldi	r18, 0x44	; 68
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	43 e4       	ldi	r20, 0x43	; 67
    48a8:	50 e0       	ldi	r21, 0x00	; 0
    48aa:	0e 94 86 1c 	call	0x390c	; 0x390c <udp_tx>
    48ae:	29 96       	adiw	r28, 0x09	; 9
    48b0:	0f b6       	in	r0, 0x3f	; 63
    48b2:	f8 94       	cli
    48b4:	de bf       	out	0x3e, r29	; 62
    48b6:	0f be       	out	0x3f, r0	; 63
    48b8:	cd bf       	out	0x3d, r28	; 61
    48ba:	df 91       	pop	r29
    48bc:	cf 91       	pop	r28
    48be:	1f 91       	pop	r17
    48c0:	0f 91       	pop	r16
    48c2:	ff 90       	pop	r15
    48c4:	ef 90       	pop	r14
    48c6:	df 90       	pop	r13
    48c8:	bf 90       	pop	r11
    48ca:	af 90       	pop	r10
    48cc:	9f 90       	pop	r9
    48ce:	8f 90       	pop	r8
    48d0:	08 95       	ret

000048d2 <memcmp>:
    48d2:	fb 01       	movw	r30, r22
    48d4:	dc 01       	movw	r26, r24
    48d6:	04 c0       	rjmp	.+8      	; 0x48e0 <memcmp+0xe>
    48d8:	8d 91       	ld	r24, X+
    48da:	01 90       	ld	r0, Z+
    48dc:	80 19       	sub	r24, r0
    48de:	21 f4       	brne	.+8      	; 0x48e8 <memcmp+0x16>
    48e0:	41 50       	subi	r20, 0x01	; 1
    48e2:	50 40       	sbci	r21, 0x00	; 0
    48e4:	c8 f7       	brcc	.-14     	; 0x48d8 <memcmp+0x6>
    48e6:	88 1b       	sub	r24, r24
    48e8:	99 0b       	sbc	r25, r25
    48ea:	08 95       	ret

000048ec <strcmp>:
    48ec:	fb 01       	movw	r30, r22
    48ee:	dc 01       	movw	r26, r24
    48f0:	8d 91       	ld	r24, X+
    48f2:	01 90       	ld	r0, Z+
    48f4:	80 19       	sub	r24, r0
    48f6:	01 10       	cpse	r0, r1
    48f8:	d9 f3       	breq	.-10     	; 0x48f0 <strcmp+0x4>
    48fa:	99 0b       	sbc	r25, r25
    48fc:	08 95       	ret

000048fe <__udivmodhi4>:
    48fe:	aa 1b       	sub	r26, r26
    4900:	bb 1b       	sub	r27, r27
    4902:	51 e1       	ldi	r21, 0x11	; 17
    4904:	07 c0       	rjmp	.+14     	; 0x4914 <__udivmodhi4_ep>

00004906 <__udivmodhi4_loop>:
    4906:	aa 1f       	adc	r26, r26
    4908:	bb 1f       	adc	r27, r27
    490a:	a6 17       	cp	r26, r22
    490c:	b7 07       	cpc	r27, r23
    490e:	10 f0       	brcs	.+4      	; 0x4914 <__udivmodhi4_ep>
    4910:	a6 1b       	sub	r26, r22
    4912:	b7 0b       	sbc	r27, r23

00004914 <__udivmodhi4_ep>:
    4914:	88 1f       	adc	r24, r24
    4916:	99 1f       	adc	r25, r25
    4918:	5a 95       	dec	r21
    491a:	a9 f7       	brne	.-22     	; 0x4906 <__udivmodhi4_loop>
    491c:	80 95       	com	r24
    491e:	90 95       	com	r25
    4920:	bc 01       	movw	r22, r24
    4922:	cd 01       	movw	r24, r26
    4924:	08 95       	ret

00004926 <isalnum>:
    4926:	91 11       	cpse	r25, r1
    4928:	07 c0       	rjmp	.+14     	; 0x4938 <__ctype_isfalse>
    492a:	8f 93       	push	r24
    492c:	12 d0       	rcall	.+36     	; 0x4952 <isdigit>
    492e:	88 23       	and	r24, r24
    4930:	8f 91       	pop	r24
    4932:	09 f0       	breq	.+2      	; 0x4936 <isalnum+0x10>
    4934:	08 95       	ret
    4936:	05 c0       	rjmp	.+10     	; 0x4942 <isalpha>

00004938 <__ctype_isfalse>:
    4938:	99 27       	eor	r25, r25
    493a:	88 27       	eor	r24, r24

0000493c <__ctype_istrue>:
    493c:	08 95       	ret

0000493e <isupper>:
    493e:	85 fd       	sbrc	r24, 5
    4940:	fb cf       	rjmp	.-10     	; 0x4938 <__ctype_isfalse>

00004942 <isalpha>:
    4942:	80 62       	ori	r24, 0x20	; 32

00004944 <islower>:
    4944:	91 11       	cpse	r25, r1
    4946:	f8 cf       	rjmp	.-16     	; 0x4938 <__ctype_isfalse>
    4948:	81 36       	cpi	r24, 0x61	; 97
    494a:	ec f3       	brlt	.-6      	; 0x4946 <islower+0x2>
    494c:	8b 37       	cpi	r24, 0x7B	; 123
    494e:	dc f7       	brge	.-10     	; 0x4946 <islower+0x2>
    4950:	08 95       	ret

00004952 <isdigit>:
    4952:	91 11       	cpse	r25, r1
    4954:	f1 cf       	rjmp	.-30     	; 0x4938 <__ctype_isfalse>
    4956:	80 53       	subi	r24, 0x30	; 48
    4958:	8a 50       	subi	r24, 0x0A	; 10
    495a:	e0 f7       	brcc	.-8      	; 0x4954 <isdigit+0x2>
    495c:	08 95       	ret

0000495e <toupper>:
    495e:	8f 93       	push	r24
    4960:	f0 df       	rcall	.-32     	; 0x4942 <isalpha>
    4962:	8f 91       	pop	r24
    4964:	09 f0       	breq	.+2      	; 0x4968 <toupper+0xa>
    4966:	8f 7d       	andi	r24, 0xDF	; 223
    4968:	08 95       	ret

0000496a <__eeprom_read_byte_1C1D1E>:
    496a:	e1 99       	sbic	0x1c, 1	; 28
    496c:	fe cf       	rjmp	.-4      	; 0x496a <__eeprom_read_byte_1C1D1E>
    496e:	bf bb       	out	0x1f, r27	; 31
    4970:	ae bb       	out	0x1e, r26	; 30
    4972:	e0 9a       	sbi	0x1c, 0	; 28
    4974:	11 96       	adiw	r26, 0x01	; 1
    4976:	0d b2       	in	r0, 0x1d	; 29
    4978:	08 95       	ret

0000497a <__eeprom_write_byte_1C1D1E>:
    497a:	e1 99       	sbic	0x1c, 1	; 28
    497c:	fe cf       	rjmp	.-4      	; 0x497a <__eeprom_write_byte_1C1D1E>
    497e:	bf bb       	out	0x1f, r27	; 31
    4980:	ae bb       	out	0x1e, r26	; 30
    4982:	0d ba       	out	0x1d, r0	; 29
    4984:	11 96       	adiw	r26, 0x01	; 1
    4986:	0f b6       	in	r0, 0x3f	; 63
    4988:	f8 94       	cli
    498a:	e2 9a       	sbi	0x1c, 2	; 28
    498c:	e1 9a       	sbi	0x1c, 1	; 28
    498e:	0f be       	out	0x3f, r0	; 63
    4990:	08 95       	ret

00004992 <_exit>:
    4992:	ff cf       	rjmp	.-2      	; 0x4992 <_exit>
